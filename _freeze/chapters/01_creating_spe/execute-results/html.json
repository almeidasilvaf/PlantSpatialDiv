{
  "hash": "dcea165204a6150a2deccda071aebc4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Spatial transcriptomic data acquisition\n\nIn this chapter, we will describe the code used to obtain the data sets \nused in this project. The data sets are:\n\n1. Arabidopsis leaves [@xia2022single]. In this study,\nauthors obtained 26 samples of cauline leaves from *Arabidopsis thaliana*.\n\n2. Orchid flowers [@liu2022spatiotemporal]. In this study, authors obtained\nthree samples from different sections of developing flowers from \n*Phalaenopsis aphrodite*.\n\n3. Maize ear primordia (STOmics DB, STDS0000236). In this study, authors\nobtained four samples from developing maize ear primordia.\n\n4. Soybean nodules [@liu2023integrated]. In this study, authors\nobtained a sample from soybean nodules\n\nTo start, let's load required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(DropletUtils)\nlibrary(tidyverse)\nlibrary(patchwork)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e10) # to download large data files\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\nbg <- grid::linearGradient(colorRampPalette(c(\"gray90\", \"white\"))(100))\n```\n:::\n\n\n## Data acquisition\n\nNow, we will download data as H5AD files and store them in a local directory.\nEach data set will be stored in a separate subdirectory. Then, we will create\n*.rds* files for each data set containing lists of `SpatialExperiment` \nobjects.\n\n### Arabidopsis leaves (Xia et al. 2022. *Developmental Cell*)\n\nData will be obtained from the ftp repository of STOmics DB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector with file names\nbase_url <- \"https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000104/stomics\"\nsamples <- c(\n    \"S1-1_stereoseq.h5ad\", \"S1-2_stereoseq.h5ad\", \"S1-3_stereoseq.h5ad\", \n    \"S1-4_stereoseq.h5ad\", \"S1-5_stereoseq.h5ad\", \"S1-6_stereoseq.h5ad\", \n    \"S1-7_stereoseq.h5ad\", \"S2-1_stereoseq.h5ad\", \"S2-3_stereoseq.h5ad\", \n    \"S2-4_stereoseq.h5ad\", \"S2-5_stereoseq.h5ad\", \"S2-6_stereoseq.h5ad\", \n    \"S2-7_stereoseq.h5ad\", \"S3-1_stereoseq.h5ad\", \"S3-2_stereoseq.h5ad\", \n    \"S3-3_stereoseq.h5ad\", \"S3-5_stereoseq.h5ad\", \"S3-6_stereoseq.h5ad\", \n    \"S3-7_stereoseq.h5ad\", \"S4-1_stereoseq.h5ad\", \"S4-2_stereoseq.h5ad\", \n    \"S4-3_stereoseq.h5ad\", \"S4-4_stereoseq.h5ad\", \"S4-5_stereoseq.h5ad\", \n    \"S4-6_stereoseq.h5ad\", \"S4-7_stereoseq.h5ad\"\n)\nnames(samples) <- gsub(\"\\\\.h5ad\", \"\", basename(samples))\n\n# Download files\noutdir <- \"~/Documents/PlantSpatialDiv_data/arabidopsis\"\ndownloads <- unlist(lapply(samples, function(x) {\n    \n    fpath <- file.path(base_url, x)\n    d <- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, x)),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n```\n:::\n\n\nNow, creating `SpatialExperiment` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List files\nfiles <- list.files(outdir, full.names = TRUE)\nnames(files) <- gsub(\"\\\\.h5ad\", \"\", basename(files))\n\n# Create and preprocess `SpatialExperiment` objects\nath_spe <- lapply(files, stomics2spe)\nath_spe <- lapply(ath_spe, process_spe, min_exp = c(1, 0.1))\n\n# Save object to RDS file\nsaveRDS(\n    ath_spe, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\")\n)\n```\n:::\n\n\n### Orchid flowers (Liu et al. 2022. *Nucleic Acids Research*)\n\nWe will download data from STOmics DB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector with file URLs\nbase_url <- \"https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000149/stomics\"\nsamples <- c(\n    \"STSP0000011/GSM5939574.h5ad\",\n    \"STSP0000012/GSM5939575.h5ad\",\n    \"STSP0000013/GSM5939576.h5ad\",\n    \"STSP0000011/GSM5939574_processed.h5ad\",\n    \"STSP0000012/GSM5939575_processed.h5ad\",\n    \"STSP0000013/GSM5939576_processed.h5ad\"\n)\nnames(samples) <- gsub(\"\\\\.h5ad\", \"\", basename(samples))\n\n# Download files\noutdir <- \"~/Documents/PlantSpatialDiv_data/orchid\"\ndownloads <- unlist(lapply(samples, function(x) {\n    \n    fpath <- file.path(base_url, x)\n    d <- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, x)),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n```\n:::\n\n\nNow, creating `SpatialExperiment` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List files\nfiles <- list.files(outdir, full.names = TRUE)\nnames(files) <- gsub(\"\\\\.h5ad\", \"\", basename(files))\n\n# Create and preprocess `SpatialExperiment` objects\nprocessed <- files[grepl(\"processed\", files)]\nunprocessed <- files[!grepl(\"processed\", files)]\n\npap_spe <- lapply(seq_along(processed), function(x) {\n    \n    un <- stomics2spe(unprocessed[x], remote = FALSE)\n    proc <- stomics2spe(processed[x], remote = FALSE)\n    \n    # Add column `clusters` to unprocessed data\n    un$clusters <- proc$clusters\n    \n    return(un)\n})\nnames(pap_spe) <- gsub(\"\\\\.h5ad\", \"\", basename(unprocessed))\n\npap_spe <- lapply(\n    pap_spe, process_spe, \n    min_exp = c(1, 0.1), domain_col = \"clusters\"\n)\n\n# Save object to RDS file\nsaveRDS(\n    pap_spe, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\")\n)\n```\n:::\n\n\n### Maize ear primordia (Wang et al. 2024. *Nature Plants*)\n\nFirst, we will download H5AD files from STOmics DB.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector with file URLs\nburl <- \"https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000236/stomics\"\nsamples <- c(\n    \"STSP0007368/MaizeEar_rep3_Impute.h5ad\",\n    \"STSP0007369/MaizeEar_rep4_Impute.h5ad\"\n)\nnames(samples) <- gsub(\"\\\\.h5ad\", \"\", basename(samples))\n\n# Download files\noutdir <- \"~/Documents/PlantSpatialDiv_data/maize_ear\"\ndownloads <- unlist(lapply(samples, function(x) {\n    \n    fpath <- file.path(burl, x)\n    d <- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, x)),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n```\n:::\n\n\nNow, downloading raw .gem files from STOmicsDB to obtain raw (i.e., \nnon-normalized) counts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector with file URLs\nsamples <- c(\n    \"STSP0007368/MaizeEar_rep3_Raw_bin50.gem\",\n    \"STSP0007369/MaizeEar_rep4_Raw_bin50.gem\"\n)\nnames(samples) <- gsub(\"\\\\.gem\", \"\", basename(samples))\n\ndownloads <- unlist(lapply(samples, function(x) {\n    \n    fpath <- file.path(burl, x)\n    d <- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, basename(x))),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n```\n:::\n\n\nNext, creating `SpatialExperiment` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame with paths to H5AD and .gem files\nf <- list.files(\"~/Documents/PlantSpatialDiv_data/maize_ear\", full.names = TRUE)\nmaize_paths <- data.frame(\n    Sample = c(\"MaizeEar_rep3\", \"MaizeEar_rep4\"),\n    H5AD = f[endsWith(f, \"h5ad\")],\n    gem = f[endsWith(f, \"gem\")]\n)\n\n### For each sample, read processed and unprocessed data, and combine them\nzma_spe <- lapply(seq_len(nrow(maize_paths)), function(x) {\n    \n    # Read H5AD file as `SpatialExperiment`\n    spe <- stomics2spe(maize_paths$H5AD[x], remote = FALSE)\n    assay(spe, \"logcounts\") <- NULL\n    \n    # Read .gem file with raw counts and match spots to cols of `un`\n    coords <- spatialCoords(spe) |>\n        as.data.frame() |>\n        tibble::rownames_to_column(\"spot_id\")\n    \n    gem <- readr::read_tsv(\n        maize_paths$gem[x], \n        show_col_types = FALSE\n    ) |>\n        dplyr::right_join(coords, by = c(\"x\" = \"x_coord\", \"y\" = \"y_coord\")) |>\n        dplyr::arrange(spot_id) |>\n        dplyr::select(geneID, spot_id, MIDCount) |>\n        tidyr::pivot_wider(\n            names_from = spot_id, values_from = MIDCount, values_fill = 0\n        ) |>\n        tibble::column_to_rownames(\"geneID\") |>\n        as.matrix()\n        \n    gem <- as(gem, \"dgCMatrix\")\n    gem <- gem[, colnames(spe)]\n    gem <- gem[rownames(spe), ]\n    \n    # Replace the 'counts' assay of `spe` with new matrix\n    assay(spe, \"counts\") <- gem\n    \n    # Add 'logcounts' assay\n    spe <- scater::computeLibraryFactors(spe)\n    spe <- scater::logNormCounts(spe)\n    \n    return(spe)\n})\nnames(zma_spe) <- maize_paths$Sample\n\nzma_spe <- lapply(\n    zma_spe, process_spe, \n    min_exp = c(1, 0.1), domain_col = \"cell_type\"\n)\n\n# Save object to RDS file\nsaveRDS(\n    zma_spe, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\")\n)\n```\n:::\n\n\n\n### Soybean nodules (Liu et al. 2023. *Nature Plants*)\n\nFirst, we will download H5AD files from OMIX.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download H5AD files\nsample_urls <- c(\n    \"https://download.cncb.ac.cn/OMIX/OMIX002290/OMIX002290-01.h5ad\"\n)\nnames(sample_urls) <- gsub(\"\\\\.h5ad\", \"\", basename(sample_urls))\n\nlapply(seq_along(sample_urls), function(x) {\n    \n    url <- sample_urls[x]\n    outfile <- file.path(\n        \"~/Documents/PlantSpatialDiv_data/soybean\", basename(url)\n    )\n    \n    d <- tryCatch(\n        download.file(url = url, destfile = outfile),\n        error = function(e) NA\n    )\n    \n    return(d)\n})\n```\n:::\n\n\nNow, creating `SpatialExperiment` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List files\nfiles <- list.files(\"~/Documents/PlantSpatialDiv_data/soybean\", full.names = TRUE)\nnames(files) <- gsub(\"\\\\.h5ad\", \"\", basename(files))\n\n# Create and preprocess `SpatialExperiment` objects\ngma_spe <- lapply(files, function(x) {\n    \n    ### Read H5AD file as a SingleCellExperiment object\n    sce <- zellkonverter::readH5AD(x)\n    \n    ### Convert SingleCellExperiment to SpatialExperiment\n    coords <- as.matrix(SingleCellExperiment::reducedDim(sce, \"spatial\"))\n    colnames(coords) <- c(\"x_coord\", \"y_coord\")\n    \n    spe <- SpatialExperiment::SpatialExperiment(\n        assays = list(counts = assay(sce, \"raw\")),\n        colData = SummarizedExperiment::colData(sce),\n        rowData = SummarizedExperiment::rowData(sce),\n        spatialCoords = coords\n    )\n    \n    ### Add 'logcounts' assay\n    spe <- scater::computeLibraryFactors(spe)\n    spe <- scater::logNormCounts(spe)\n    \n    ### Process the `SpatialExperiment` object\n    spe <- process_spe(spe, min_exp = c(1, 0.1), domain_col = \"Tissue\")\n    \n    return(spe)\n})\n```\n:::\n\n\nThe original H5AD file contains 4 different slides combined into a single\nfile. Hence, the `SpatialExperiment` object we created contains 4 sections\nthat must be split into separate objects. Information on slides are available\nas suffixes in spot IDs as `<spot>-<slide>`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Splitting slides into separate `SpatialExperiment` objects\nslide_ids <- unique(gsub(\".*-\", \"\", colnames(gma_spe$`OMIX002290-01`)))\ngma_spe_final <- lapply(slide_ids, function(x) {\n    spe <- gma_spe[[1]]\n    spe <- spe[, grepl(x, colnames(spe))]\n    \n    return(spe)\n})\nnames(gma_spe_final) <- slide_ids\n\n# Saving objects to RDS files\nsaveRDS(\n    gma_spe_final, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\")\n)\n```\n:::\n\n\n\n### Germinating barley seeds (Peirats-Llobet et al. 2023. *NAR*)\n\nFirst, let's obtain data from GEO (accession *GSE218970*).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Download .tar file from GEO\nwget https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE218970&format=file\ntar -zxvf GSE218970_RAW.tar\n\n# Extract all files in subdirectory\ncd GSE218970_RAW\nfor file in *.tar.gz; do \n    mkdir -p \"${file%.tar.gz}/outs\" && \n    tar -xzf \"$file\" -C \"${file%.tar.gz}/outs\" --strip-components=1; \ndone\n```\n:::\n\n\nNow, let's read all files as `SpatialExperiment` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List directories with `spatial/` subdir (some don't have it)\ndirs <- list.dirs(\n    path = \"~/Downloads/GSE218970_RAW\", full.names = TRUE, recursive = FALSE\n)\ndirs <- dirs[!grepl(\"test\", dirs)]\n\nkeep_idx <- which(sapply(dirs, function(x) {\n    file.exists(file.path(x, \"outs/spatial\", \"tissue_positions_list.csv\"))\n}) == TRUE)\ndirs <- dirs[keep_idx]\n\n# Define function to read SpaceRanger output as a `SpatialExperiment` obj\nspaceranger2spe <- function(dir) {\n    \n    # Create `SpatialExperiment` and add 'spatialCoords' slot\n    spe <- SpatialExperiment::read10xVisium(\n        samples = dir,\n        type = \"sparse\", data = \"filtered\",\n        images = \"lowres\", load = FALSE\n    )\n    coords <- as.matrix(colData(spe)[, c(\"array_col\", \"array_row\")])\n    colnames(coords) <- c(\"x_coord\", \"y_coord\")    \n    spatialCoords(spe) <- coords\n    \n    # Add per-spot QC metrics\n    spe <- scuttle::addPerCellQC(spe)\n    \n    # Prefiltering: remove spots with sum of counts too low (<10)\n    spe <- spe[, spe$detected >= 10]\n\n    # Add logcounts\n    spe <- scater::computeLibraryFactors(spe)\n    spe <- scater::logNormCounts(spe)\n    \n    return(spe)\n}\n\n# Create objects\nhvu_spe <- lapply(dirs, spaceranger2spe)\nnames(hvu_spe) <- basename(dirs)\n\n# Process `SpatialExperiment` objects\nhvu_spe <- lapply(hvu_spe, process_spe, min_exp = c(1, 0.1), remove_missing = FALSE)\n```\n:::\n\n\nNext, we will add spatial domain annotation to spots using data obtained\nfrom the authors (sent by email).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhvu_domains <- read.csv(here(\"data\", \"hvu_spot_identity.csv\"), row.names = 1)\n\n# Add domain annotation to spots\nhvu_spe <- lapply(names(hvu_spe), function(x) {\n    \n    meta <- unlist(strsplit(x, \"_\"))\n    sa <- hvu_domains |>\n        dplyr::filter(\n            slide_number == meta[2], \n            time == meta[3],\n            section == meta[4]\n        ) |>\n        tibble::remove_rownames() |>\n        tibble::column_to_rownames(\"barcode\")\n    \n    # Update `SpatialExperiment` object\n    new_spe <- hvu_spe[[x]]\n    colData(new_spe) <- merge(\n        as.data.frame(colData(new_spe)), sa, by = \"row.names\", all.x = TRUE\n    ) |>\n        tibble::column_to_rownames(\"Row.names\") |>\n        DataFrame()\n    \n    return(new_spe)\n})\nnames(hvu_spe) <- basename(dirs)\n\n# Remove `ge10` samples - no domain annotation\nhvu_spe <- hvu_spe[!grepl(\"ge10\", names(hvu_spe))]\n```\n:::\n\n\nFinally, we will replace gene IDs with the most recent assembly available\non Ensembl Plants. For that, we will use Ensembl Plants' \n**ID History Converter**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a file with barley gene IDs and export it\ngene_ids <- lapply(hvu_spe, rownames) |> unlist() |> unique()\n\nwrite_tsv(data.frame(Gene = gene_ids), file = \"~/Downloads/hvulgare_ids.tsv\")\n```\n:::\n\n\nThe file `hvulgare_ids.tsv` was used as input to ID History Converter in \nEnsembl Plants release 60, and correspondence between IDs were saved to\n`products/tables/hvu_id_correspondence.csv`. Let's read it and use it to\nconvert old IDs to new IDs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhvu_ids <- read_csv(\n    here(\"products\", \"tables\", \"hvu_id_correspondence.csv\"),\n    show_col_types = FALSE\n) |>\n    janitor::clean_names() |>\n    dplyr::filter(release != \"Release\") |>\n    mutate(\n        mapping_score = as.numeric(mapping_score),\n        old_stable_id = str_replace_all(old_stable_id, \"\\\\.[0-9]$\", \"\"),\n        new_stable_id = str_replace_all(new_stable_id, \"\\\\.[0-9]$\", \"\")\n    ) |>\n    arrange(-mapping_score) |>\n    select(old_stable_id, new_stable_id) |>\n    distinct(old_stable_id, .keep_all = TRUE) |>\n    distinct(new_stable_id, .keep_all = TRUE)\n```\n:::\n\n\nWe will now use this ID correspondence data frame to convert gene IDs\nin the `SpatialExperiment` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace old IDs with new ones\nhvu_spe_final <- lapply(hvu_spe, function(x) {\n    \n    y <- x[rownames(x) %in% hvu_ids$old_stable_id, ]\n    idx <- match(rownames(y), hvu_ids$old_stable_id)\n    rownames(y) <- hvu_ids$new_stable_id[idx]\n    \n    return(y)\n})\n\n# Saving objects to RDS files\nsaveRDS(\n    hvu_spe_final, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\")\n)\n```\n:::\n\n\n## Summary statistics\n\nNext, we will explore and visualize summary statistics (number of expressed \ngenes, number of spots, spatial domains, etc) for each `SpatialExperiment` \nobject.\n\nWe will start by loading the `SpatialExperiment` objects created in\nthe previous section.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load `SpatialExperiment` objects\nath_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\"))\npap_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\"))\nzma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\"))\ngma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\"))\nhvu_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\"))\n```\n:::\n\n\n### Dimensions and spatial domains\n\nHere, we will explore the dimensions (genes x spots) and number of\nspatial domains of each object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to get number of genes, spots, and domains\ncount_dims <- function(spe, domain = \"cell_type\") {\n    df <- data.frame(\n        Genes = nrow(spe), \n        Spots = ncol(spe), \n        Domains = length(unique(spe[[domain]]))\n    )\n    return(df)\n}\n\n# Get summary stats for each object\nspe_stats <- bind_rows(\n    ## Ath\n    lapply(ath_spe, count_dims, domain = \"cell_type\") |> \n        bind_rows(.id = \"sample\") |>\n        mutate(species = \"Ath\"),\n    ## Gma\n    lapply(gma_spe, count_dims, domain = \"annotation\") |> \n        bind_rows(.id = \"sample\") |>\n        mutate(species = \"Gma\"),\n    ## Pap\n    lapply(pap_spe, count_dims, domain = \"clusters\") |> \n        bind_rows(.id = \"sample\") |>\n        mutate(species = \"Pap\"),\n    ## Zma\n    lapply(zma_spe, count_dims, domain = \"cell_type\") |> \n        bind_rows(.id = \"sample\") |>\n        mutate(species = \"Zma\"),\n    ## Hvu\n    lapply(hvu_spe, count_dims, domain = \"tissue\") |> \n        bind_rows(.id = \"sample\") |>\n        mutate(species = \"Hvu\")\n)\n```\n:::\n\n\nWe can visualize such statistics grouped by species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot number of genes, spots, and domains per species\np_spestats <- spe_stats |>\n    pivot_longer(cols = c(Genes, Spots, Domains)) |>\n    mutate(name = factor(name, levels = c(\"Genes\", \"Spots\", \"Domains\"))) |>\n    ggplot(aes(x = value, y = species, color = species)) +\n    ggbeeswarm::geom_quasirandom(alpha = 0.7, size = 2.5) +\n    ggsci::scale_color_jama() +\n    facet_wrap(~name, scales = \"free_x\") +\n    theme_classic() +\n    theme(\n        legend.position = \"none\",\n        panel.grid = element_blank(),\n        panel.background = element_rect(fill = bg)\n    ) +\n    ggh4x::facetted_pos_scales(x = list(\n        scale_x_continuous(\n            limits = c(0, 3e4),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 1e4),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(limits =  c(0, 20))\n    )) +\n    labs(\n        title = \"Summary sample statistics across species\",\n        subtitle = \"Only genes with >1 count in at least 0.1% of the spots\",\n        x = \"Absolute frequency\",\n        y = \"Species\"\n    )\n```\n:::\n\n\n### Spots and domains\n\nNext, we will plot spots colored by spatial for all slides.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot spots colored by domains\np_spots <- list(\n    Ath = lapply(\n        ath_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"cell_type\", pal = \"Okabe-Ito\"\n    ),\n    Gma = lapply(\n        gma_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"annotation\", pal = \"Okabe-Ito\"\n    ),\n    Pap = lapply(\n        pap_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"clusters\", pal = ggsci::pal_d3(\"category20\")(20)\n    ),\n    Zma = lapply(\n        zma_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"cell_type\", pal = ggsci::pal_d3(\"category20\")(20)\n    ),\n    Hvu = lapply(\n        hvu_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"tissue\", pal = ggsci::pal_d3(\"category20\")(20)\n    )\n)\n```\n:::\n\n\nNow, we will create a plot with one slide for each species to use as \na summary of the data sets in this study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot one slide per species\np_spot_species <- wrap_plots(\n    p_spots$Ath[[12]] + ggtitle(\"A. thaliana\"),\n    wrap_plots(\n        p_spots$Gma[[4]] + ggtitle(\"G. max\"),\n        p_spots$Pap[[1]] + ggtitle(\"P. aphrodite\"),\n        ncol = 2\n    ),\n    wrap_plots(\n        p_spots$Zma[[1]] + coord_fixed(ratio = 1.1) + ggtitle(\"Z. mays\"),\n        p_spots$Hvu[[13]] + ggtitle(\"H. vulgare\"),\n        ncol = 2\n    ),\n    nrow = 3,\n    heights = c(0.3, 1, 0.8)\n) &\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5, face = \"italic\")\n    )\n\np_spot_species\n```\n:::\n\n\n\n## Saving objects\n\nFinally, we will save important objects and plots created in this document\nfor future reuse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Objects\nsaveRDS(\n    spe_stats, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"spe_summary_stats.rds\")\n)\n\n# Plots\nsaveRDS(\n    p_spestats, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_spe_summary_stats.rds\")\n)\n\nsaveRDS(\n    p_spot_species, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_spots_one_slide_per_species.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2025-02-28\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n abind                  1.4-5    2016-07-21 [1] CRAN (R 4.4.1)\n beachmat               2.20.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Biobase              * 2.64.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocParallel           1.38.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n cli                    3.6.3    2024-06-21 [1] CRAN (R 4.4.1)\n codetools              0.2-20   2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0    2023-01-23 [1] CRAN (R 4.4.1)\n crayon                 1.5.3    2024-06-20 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1   2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DelayedMatrixStats     1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36   2024-06-23 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4    2023-11-17 [1] CRAN (R 4.4.1)\n dqrng                  0.4.1    2024-05-28 [1] CRAN (R 4.4.1)\n DropletUtils         * 1.24.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n edgeR                  4.2.1    2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0   2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6    2023-12-08 [1] CRAN (R 4.4.1)\n fastmap                1.2.0    2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0    2023-01-29 [1] CRAN (R 4.4.1)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1   2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12   2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1   2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggplot2              * 3.5.1    2024-04-23 [1] CRAN (R 4.4.1)\n glue                   1.7.0    2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5    2024-04-22 [1] CRAN (R 4.4.1)\n HDF5Array              1.32.1   2024-08-11 [1] Bioconductor 3.19 (R 4.4.1)\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3    2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1  2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4    2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7    2023-08-15 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8    2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48     2024-07-07 [1] CRAN (R 4.4.1)\n lattice                0.22-6   2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4    2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4   2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10 2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3    2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4    2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0    2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0    2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1    2024-04-01 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0    2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0    2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2    2023-08-10 [1] CRAN (R 4.4.1)\n R.methodsS3            1.8.2    2022-06-13 [1] CRAN (R 4.4.1)\n R.oo                   1.26.0   2024-01-24 [1] CRAN (R 4.4.1)\n R.utils                2.12.3   2023-11-18 [1] CRAN (R 4.4.1)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13   2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5    2024-01-10 [1] CRAN (R 4.4.1)\n rhdf5                  2.48.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n rhdf5filters           1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Rhdf5lib               1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n rjson                  0.2.21   2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4    2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27     2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4    2023-11-05 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0   2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1    2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0    2023-11-28 [1] CRAN (R 4.4.1)\n scuttle                1.14.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n sparseMatrixStats      1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0    2023-01-06 [1] CRAN (R 4.4.1)\n stringi                1.8.4    2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1    2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1    2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1    2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1    2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0    2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0    2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0    2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4    2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5    2023-12-01 [1] CRAN (R 4.4.1)\n withr                  3.0.0    2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46     2024-07-18 [1] CRAN (R 4.4.1)\n XVector                0.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9    2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}