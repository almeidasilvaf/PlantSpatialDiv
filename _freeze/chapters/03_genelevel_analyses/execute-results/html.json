{
  "hash": "a14392b69a9d51153f45ea92cc8fe89e",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Gene-level analyses\n\nIn this chapter, we will investigate if different duplication modes\nare associated with differences in:\n\n1. Expression levels;\n2. Expression breadths;\n3. Spatial variability.\n\nTo start, let's load required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(DESpace)\nlibrary(patchwork)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e6) # to download large data files\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\n\n# Plot background\nbg <- grid::linearGradient(colorRampPalette(c(\"gray90\", \"white\"))(100))\n```\n:::\n\n\nLet's also load the `SpatialExperiment` objects created in chapter 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load `SpatialExperiment` objects\nath_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\"))\ngma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\"))\npap_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\"))\nzma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\"))\nhvu_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\"))\n```\n:::\n\n\nWe will also need the duplicate pairs and genes obtained in chapter 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load duplicate pairs and genes\ndup_list <- readRDS(here(\"products\", \"result_files\", \"dup_list.rds\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Expression levels of duplicated genes\n\nHere, we will investigate if genes from particular duplication modes\ndisplay significantly higher or lower expression levels compared to\nother duplication modes. We will start by calculating the sum and mean\nexpression levels for all genes across samples combined.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all `SpatialExperiment` objects in a single list\nspe_all <- list(\n    ath = ath_spe,\n    gma = gma_spe,\n    pap = pap_spe,\n    zma = zma_spe, \n    hvu = hvu_spe\n)\n\n# Get sum of gene expression levels across all samples\nsum_all <- Reduce(rbind, lapply(names(spe_all), function(x) {\n    \n    samples <- names(spe_all[[x]])\n    sum_df <- Reduce(rbind, lapply(samples, function(y) {\n        \n        df <- rowSums(logcounts(spe_all[[x]][[y]])) |>\n            as.data.frame() |>\n            select(exp = 1) |>\n            tibble::rownames_to_column(\"gene\") |>\n            inner_join(dup_list[[x]]$genes, by = \"gene\") |>\n            mutate(sample = y)\n            \n        return(df)\n    })) |>\n        mutate(species = x)\n    \n    return(sum_df)\n})) |>\n    mutate(type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")))\n\n# Get mean of gene expression levels across all samples\nmean_all <- Reduce(rbind, lapply(names(spe_all), function(x) {\n    \n    samples <- names(spe_all[[x]])\n    mean_df <- Reduce(rbind, lapply(samples, function(y) {\n        \n        df <- rowMeans(logcounts(spe_all[[x]][[y]]), na.rm = TRUE) |>\n            as.data.frame() |>\n            select(exp = 1) |>\n            tibble::rownames_to_column(\"gene\") |>\n            inner_join(dup_list[[x]]$genes, by = \"gene\") |>\n            mutate(sample = y)\n            \n        return(df)\n    })) |>\n        mutate(species = x)\n    \n    return(mean_df)\n})) |>\n    mutate(type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")))\n```\n:::\n\n\nNow, we will compare distributions using a Kruskal-Wallis test followed by a\npost-hoc Dunn test. Then, we will visualize distributions with CLD indicating\nsignificant differences (if any).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get summary estimates for all samples combined\n## Sum\nsum_combined <- sum_all |>\n    group_by(gene) |>\n    mutate(\n        csum = sum(exp), \n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")) \n    ) |>\n    ungroup() |>\n    select(gene, type, species, csum) |>\n    distinct(gene, .keep_all = TRUE)\n\n## Mean\nmean_combined <- mean_all |>\n    group_by(gene) |>\n    mutate(\n        cmean = mean(exp, na.rm = TRUE), \n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    ) |>\n    ungroup() |>\n    select(gene, type, species, cmean) |>\n    distinct(gene, .keep_all = TRUE)\n    \n# Compare distros and get CLDs\n## Sum\nsum_clds <- lapply(\n    split(sum_combined, sum_combined$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"csum\"\n) |>\n    bind_rows(.id = \"species\") |>\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(3500, 2500, 5500, 4500, 3500)\n        )\n    ) |>\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |>\n    dplyr::rename(type = Group)\n\n## Mean\nmean_clds <- lapply(\n    split(mean_combined, mean_combined$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"cmean\"\n) |>\n    bind_rows(.id = \"species\") |>\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(0.4, 0.4, 0.9, 0.4, 0.4)\n        )\n    ) |>\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |>\n    dplyr::rename(type = Group)\n\n# Plot distros with CLDs\n## Sum\np_sum_combined <- ggplot(sum_combined, aes(x = csum, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    geom_label(\n        data = sum_clds,\n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    ggh4x::facetted_pos_scales(x = list(\n        scale_x_continuous(\n            limits = c(0, 4e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 3e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 6e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 5e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 4e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        )\n    )) +\n    labs(\n        x = \"Sum of log-transformed normalized counts\", y = NULL,\n        title = \"Total expression levels and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P <0.05\"\n    ) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n\n## Mean\np_mean_combined <- ggplot(mean_combined, aes(x = cmean, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    geom_label(\n        data = mean_clds, \n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    ggh4x::facetted_pos_scales(x = list(\n        scale_x_continuous(limits = c(0, 0.5)),\n        scale_x_continuous(limits = c(0, 0.5)),\n        scale_x_continuous(limits = c(0, 1)),\n        scale_x_continuous(limits = c(0, 0.5)),\n        scale_x_continuous(limits = c(0, 0.5))\n    )) +\n    labs(\n        x = \"Mean of log-transformed normalized counts\", y = NULL,\n        title = \"Mean expression level and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P <0.05\"\n    ) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_genelevel_analyses_files/figure-html/unnamed-chunk-7-1.png){width=2400}\n:::\n:::\n\n\nThe figures show that, overall, segmental, tandem, and proximal duplicates \ndisplay higher expression levels compared to duplicated originating from other \nduplication modes, especially dispersed duplicates. In germinating\nbarley seeds, however, retrotransposed duplicates display the highest \nexpression values. Nevertheless, there seems to be an association\nbetween higher expression levels and duplication modes that tend to preserve\ncis-regulatory landscapes (SD, TD, and PD).\n\n## Expression breadths of duplicated genes\n\nWe will now calculate the expression breadths (i.e., number of cell types\nin which genes are expressed) for all duplicated genes, and test for \ndifferences in expression breadth by duplication mode. \n\nWe will start with the actual calculation of absolute expression breadth. Here,\nwe will define gene i as expressed in cell type k if it is detected in \nat least 5% of the spots corresponding to cell type k.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Calculate the proportion of non-zero spots for each gene by cell type\n#'\n#' @param spe A SpatialExperiment object.\n#' @param cell_type Character, name of the column with cell type information.\n#'\n#' @return A data frame with variables `gene`, `cell_type`, and `prop_detected`.\nget_prop_detected <- function(spe, cell_type = \"cell_type\") {\n    \n    prop_detected <- scuttle::aggregateAcrossCells(\n        spe, statistics = \"prop.detected\",\n        ids = spe[[cell_type]]\n    ) |>\n        assay() |>\n        reshape2::melt() |>\n        dplyr::select(gene = Var1, cell_type = Var2, prop_detected = value) |>\n        mutate(cell_type = as.character(cell_type))\n    \n    return(prop_detected)\n}\n\n# Get proportion of gene detection (non-zero counts) by cell type\nprop_detected <- list(\n    Ath = lapply(spe_all$ath, get_prop_detected) |> bind_rows(.id = \"sample\"),\n    Gma = lapply(spe_all$gma, get_prop_detected, \"annotation\") |> bind_rows(.id = \"sample\"),\n    Pap = lapply(spe_all$pap, get_prop_detected, \"clusters\") |> bind_rows(.id = \"sample\"),\n    Zma = lapply(spe_all$zma, get_prop_detected, \"cell_type\") |> bind_rows(.id = \"sample\"),\n    Hvu = lapply(spe_all$hvu, get_prop_detected, \"tissue\") |> bind_rows(.id = \"sample\")\n) |> \n    bind_rows(.id = \"species\")\n\n# Calculate absolute expression breadth\neb <- prop_detected |>\n    group_by(species, gene, cell_type) |>\n    mutate(mean_prop = mean(prop_detected, na.rm = TRUE)) |>\n    ungroup() |>\n    filter(mean_prop >=0.01) |>\n    distinct(gene, cell_type, .keep_all = TRUE) |>\n    dplyr::count(species, gene) |>\n    inner_join(\n        bind_rows(\n            dup_list$ath$genes,\n            dup_list$gma$genes,\n            dup_list$pap$genes,\n            dup_list$zma$genes,\n            dup_list$hvu$genes\n        )\n    ) |>\n    mutate(\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    )\n```\n:::\n\n\nNow, we will test for differences by duplication mode using Kruskal-Wallis +\npost-hoc Dunn's tests, as implemented in the wrapper function `cld_kw_dunn`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Test for differences in expression breadth by duplication mode\neb_test <- lapply(\n    split(eb, eb$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"n\"\n) |>\n    bind_rows(.id = \"species\") |>\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(5.5, 5.5, 2, 14, 16.5)\n        )\n    ) |>\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |>\n    dplyr::rename(type = Group)\n```\n:::\n\n\nNext, we will visualize distributions of expression breadths for genes\noriginating from different duplication modes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot distributions of absolute expression breadths\np_eb <- ggplot(eb, aes(x = n, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_label(\n        data = eb_test, \n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg)\n    ) +\n    labs(\n        title = \"Absolute expression breadth and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P <0.05\",\n        x = \"Number of cell types in which gene is detected\",\n        y = NULL\n    )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_genelevel_analyses_files/figure-html/unnamed-chunk-11-1.png){width=2400}\n:::\n:::\n\n\nThe figure shows that\nthere are significant differences in expression breadth depending on how\ngenes were duplicated. Importantly, as we observed for expression levels,\nduplication mechanisms resulting in shared cis-regulatory landscapes (SD, \nTD, PD) tend to create genes with greater expression breadth (i.e., expressed\nin more cell types).\n\n\n## Spatial variability of duplicated genes\n\nHere, we will identify spatially variable genes (SVGs) and test if they\nare enriched in genes originating from particular duplication modes.\nWe will start by inferring SVGs using DESpace [@cai2024despace] using \ncell types as spatial clusters. Genes will be considered SVGs if FDR <0.05.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to identify SVGs with DESpace\nget_svg <- function(spe, spatial_cluster = \"clusters\") {\n    \n    # Get gene-wise test statistics\n    res <- DESpace_test(\n        spe = spe,\n        spatial_cluster = spatial_cluster,\n        replicates = FALSE,\n        min_counts = 1,\n        min_non_zero_spots = 5\n    )\n    gc()\n    \n    # Get a data frame of test statistics for significant SVGs\n    res_df <- res$gene_results |>\n        as.data.frame() |>\n        dplyr::filter(!is.na(FDR), FDR <= 0.05)\n    \n    return(res_df)\n}\n\n# Identify SVGs\nsvgs <- list(\n    ath = lapply(ath_spe, get_svg, spatial_cluster = \"cell_type\"),\n    gma = lapply(gma_spe, get_svg, spatial_cluster = \"annotation\"),\n    pap = lapply(pap_spe, get_svg, spatial_cluster = \"clusters\"),\n    zma = lapply(zma_spe, get_svg, spatial_cluster = \"cell_type\"),\n    hvu = lapply(hvu_spe, get_svg, spatial_cluster = \"tissue\")\n)\n```\n:::\n\n\nNow, we will test if SVGs are enriched in duplicated genes from a particular\nduplication mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to perform ORA for duplication modes\nora_dupmode <- function(svg_df, dup_df) {\n    \n    df <- HybridExpress::ora(\n        genes = svg_df$gene_id,\n        annotation = as.data.frame(dup_df),\n        background = dup_df$gene,\n        min_setsize = 2,\n        max_setsize = 1e8\n    )\n    \n    return(df)\n}\n\n# Perform overrepresentation analysis for duplication modes\nsp <- names(dup_list)\nora_svg_dup <- lapply(sp, function(x) {\n    \n    df <- lapply(svgs[[x]], ora_dupmode, dup_list[[x]]$genes) |>\n        bind_rows(.id = \"sample\") |>\n        mutate(species = x)\n    \n    return(df)\n}) |>\n    bind_rows() |>\n    dplyr::select(species, sample, type = term, genes, all, padj)\n```\n:::\n\n\nInterestingly, SVGs are enriched in SD-derived genes in most of the samples\nand in TRD-derived genes in some samples, revealing an association between \nthese duplication modes and spatial variability in expression. \n\nNext, let's create a data frame summarizing the frequency of SVGs per \nduplication mode, highlighting overrepresented results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to get frequency of SVGs per duplication mode\nget_dup_freqs <- function(svg_list, dup_df, ora_df) {\n    \n    freq_df <- lapply(svg_list, function(x) {\n        \n        df <- left_join(x, dup_df, by = c(\"gene_id\" = \"gene\")) |>\n            drop_na(type) |>\n            mutate(\n                type = factor(\n                    type, \n                    levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")\n                )\n            ) |>\n            dplyr::count(type, .drop = FALSE) |>\n            as.data.frame()\n        \n        return(df)\n    }) |>\n        bind_rows(.id = \"sample\") |>\n        left_join(ora_df |> select(sample, type, padj)) |>\n        mutate(\n            symbol = case_when(\n                padj > 0.05 ~ \"\",\n                padj > 0.01 ~ \"*\",\n                padj > 0.001 ~ \"**\",\n                !is.na(padj) ~ \"***\",\n                TRUE ~ NA_character_\n            )\n        )\n    \n    return(freq_df)\n}\n\n# Get frequency of SVGs per duplication mode\nsvg_dupmode_freqs <- lapply(sp, function(x) {\n    \n    df <- get_dup_freqs(svgs[[x]], dup_list[[x]]$genes, ora_svg_dup) |>\n        mutate(species = x)\n    \n    return(df)\n}) |>\n    bind_rows() |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    ) |>\n    distinct()\n```\n:::\n\n\nNow, let's visualize results as a heatmap with cells colored by scaled\ncounts (by duplication mode) and significance asterisks highlighted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot\np_heatmap <- svg_dupmode_freqs |>\n    mutate(\n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    ) |>\n    group_by(sample) |>\n    mutate(scaled_n = scale(n, center = FALSE)) |>\n    ungroup() |>\n    # Add code to scale counts by sample\n    ggplot(aes(x = sample, y = type, fill = scaled_n)) +\n    geom_tile(color = \"gray90\", linewidth = 0.8) +\n    geom_text(aes(label = symbol), color = \"gray20\", size = 4) +\n    facet_grid(. ~ species, scales = \"free_x\", space = \"free\") +\n    scale_fill_gradient(low = \"#D6E5F4\", high = \"#2171B5\") +\n    theme_classic() +\n    theme(\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        legend.position = \"bottom\"\n    ) +\n    labs(\n        title = \"Frequency of spatially variable genes by duplication mode\",\n        subtitle = \"Asterisks indicate significant overrepresentation\",\n        x = \"Samples\", y = NULL, fill = \"Scaled counts\"\n    )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_genelevel_analyses_files/figure-html/unnamed-chunk-16-1.png){width=3000}\n:::\n:::\n\n\n\n## Saving objects {.unnumbered}\n\nFinally, we will save important objects to reuse later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save objects as .rds files ----\n## SVGs\nsaveRDS(\n    svgs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"svg_list.rds\")\n)\n\n## Data frame with ORA results - duplication mode and SVGs\nsaveRDS(\n    ora_svg_dup, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"ORA_svg_and_duplication_mode.rds\")\n)\n\n## Frequency of SVGs per duplication mode in each sample and species\nsaveRDS(\n    svg_dupmode_freqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"svg_frequency_by_dupmode.rds\")\n)\n\n# Save plots ----\nsaveRDS(\n    p_sum_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"total_expression_by_duplication_mode.rds\")\n)\n\nsaveRDS(\n    p_mean_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"mean_expression_by_duplication_mode.rds\")\n)\n\nsaveRDS(\n    p_eb, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"expression_breadth_by_duplication_mode.rds\")\n)\n\nsaveRDS(\n    p_heatmap, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"heatmap_svgs_by_dupmode.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n assertthat             0.2.1      2019-03-21 [1] CRAN (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocParallel           1.38.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n codetools              0.2-20     2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n cowplot                1.1.3      2024-01-22 [1] CRAN (R 4.4.1)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4     2024-03-30 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DESpace              * 1.4.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1      2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggforce                0.4.2      2024-02-19 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggnewscale             0.5.0      2024-07-19 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4     2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10   2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n polyclip               1.10-7     2024-07-23 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0      2023-01-06 [1] CRAN (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tweenr                 2.0.3      2024-02-26 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "03_genelevel_analyses_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}