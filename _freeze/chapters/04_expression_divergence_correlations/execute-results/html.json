{
  "hash": "646fc5a6188d4f5c73c99465ee583a31",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Expression divergence between duplicate pairs\n\nIn this chapter, we will explore expression divergence between duplicate\npairs using different metrics to investigate if there is biased divergence\ndepending on the duplication mechanisms. \n\nLet's start by loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(BioNERO)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(patchwork)\nlibrary(exdiva)\n\nset.seed(123) # for reproducibility\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\nsource(here(\"code\", \"aggregate_spots.R\"))\n\n# Plot background\nbg <- grid::linearGradient(colorRampPalette(c(\"gray90\", \"white\"))(100))\n```\n:::\n\n\nNow, let's load `SpatialExperiment` objects created in chapter 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load `SpatialExperiment` objects\nath_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\"))\ngma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\"))\npap_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\"))\nzma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\"))\nhvu_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\"))\nhvu_spe <- lapply(hvu_spe, function(x) return(x[, !is.na(x$tissue)]))\n```\n:::\n\n\nAnd duplicate pairs for each species, classified by age groups, \nobtained in chapter 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read duplicated gene pairs for each species\ndup_pairs <- readRDS(here(\"products\", \"result_files\", \"dup_list.rds\"))\ndup_pairs <- lapply(dup_pairs, function(x) return(x$pairs))\n\n# Read duplicated gene pairs with age-based group classifications\npairs_age <- readRDS(here(\"products\", \"result_files\", \"pairs_by_age_group.rds\"))\n```\n:::\n\n\nWe will also load gene family assignments from PLAZA, as well as functional\nannotation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load gene family assignments from PLAZA\nfams <- readRDS(here(\"products\", \"result_files\", \"gene_families.rds\"))\ngo_annot <- readRDS(here(\"products\", \"result_files\", \"functional_annotation.rds\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Handling sparsity: aggregating counts in `SpatialExperiment` objects\n\nAs demonstrated by @morabito2023hdwgcna, it is nearly impossible\nto get high gene-gene correlations in single-cell (and, hence, spatial)\ntranscriptomics data because of the inherent sparsity of such data.\nA proposed solution is to aggregate cells/spots into metacells/metaspots, what\nappears to solve the sparsity problem. Another solution that works is to use\npseudobulk (aggregating counts by spatial domains), but this can lead to\na very small number of columns for samples with a small number of identified\nspatial domains, introducing biases to correlations.\n\n\nHere, we will use a helper function `aggregate_spots()` to aggregate counts\ninto metaspots comprised of ~N spots using k-means clustering \n(k = number of spots / N) for each spatial domain separately. \nAfter aggregating counts, `aggregate_spots()` calculates size factors with `scater::computeLibraryFactors()` and generates a *logcounts* assay with\n`scater::logNormCounts()`.\n\n\nIn hdWGCNA [@morabito2023hdwgcna], authors suggest using 7 spots (a spot\nand its neighbors). However, plant cells are much larger than animals cells.\nThus, using metaspots comprised of 7 spots might not sufficiently overcome\nthe challenges of calculating correlations from sparse data. To address that,\nwe will select a sample from each data set, and calculate gene-gene \ncorrelations using metaspots comprised of 10 to 50 spots in intervals of 10.\nThen, we will visualize distributions of gene-gene correlations to choose\na suitable metaspot size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate gene-gene correlations from a sample using increasingly large metaspots\nnum_spots <- seq(10, 50, by = 10)\n\nsim_cor <- lapply(num_spots, function(n) {\n    \n    ## Wrapper function to handle `nspots` greater than spot count for a spatial domain\n    nspots <- function(spe, domain = \"cell_type\") {\n        nmin <- min(table(spe[[domain]]))\n        n <- ifelse(n > nmin, nmin, n)\n        return(n)\n    }\n    \n    # Create metaspot-level counts\n    spes <- list(\n        ath = ath_spe[[1]],\n        gma = gma_spe[[1]],\n        pap = pap_spe[[1]],\n        zma = zma_spe[[1]],\n        hvu = hvu_spe[[1]]\n    )\n    \n    spe_metaspots <- list(\n        ath = aggregate_counts(\n            spes$ath, spatial_domain = \"cell_type\", \n            nspots = nspots(spes$ath, \"cell_type\")\n        ),\n        pap = aggregate_counts(\n            spes$pap, spatial_domain = \"clusters\", \n            nspots = nspots(spes$pap, \"clusters\")\n        ),\n        gma = aggregate_counts(\n            spes$gma, spatial_domain = \"annotation\", \n            nspots = nspots(spes$gma, \"annotation\")\n        ),\n        zma = aggregate_counts(\n            spes$zma, spatial_domain = \"cell_type\", \n            nspots = nspots(spes$zma, \"cell_type\"), iter.max = 100\n        ),\n        hvu = aggregate_counts(\n            spes$hvu, spatial_domain = \"tissue\", \n            nspots = nspots(spes$hvu, \"tissue\")\n        )\n    )\n    \n    # Calculate gene-gene correlations\n    rho_metaspots <- lapply(names(spe_metaspots), function(x) {\n        \n        rho_df <- calculate_cor(\n            spe_metaspots[[x]], dups = dup_pairs[[x]],\n            assay_name = \"logcounts\"\n        ) |>\n            mutate(nspots = n) |>\n            mutate(species = x)\n        \n        return(rho_df)\n    }) |>\n        bind_rows()\n    \n    return(rho_metaspots)\n}) |>\n    bind_rows()\n\n\n# Create a density plot with correlation distros for each number of spots\np_simcor <- sim_cor |>\n    filter(!is.na(cor)) |>\n    mutate(\n        species = str_to_title(species),\n        nspots = as.factor(nspots)\n    ) |>\n    ggplot(aes(x = cor, color = nspots, fill = nspots)) +\n    geom_density(alpha = 0.1) +\n    scale_color_viridis_d() +\n    scale_fill_viridis_d() +\n    facet_wrap(~species, nrow = 1) +\n    xlim(-1, 1) +\n    theme_classic() +\n    labs(\n        title = \"Distribution of gene-gene correlations for increasingly large metaspots\",\n        subtitle = \"Correlations between paralogous gene pairs only\",\n        x = expression(\"Spearman's\" ~ rho),\n        y = \"Density\", fill = \"# spots\", color = \"# spots\"\n    )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-7-1.png){width=2400}\n:::\n:::\n\n\nThe plot shows that metaspots comprised of 30 spots can sufficiently \nreduce the amount of noise in gene-gene correlations arising from sparsity.\nThus, we will now create `SpatialExperiment` objects at the metaspot-level\nusing metaspots of size 30. Exceptions will be made for samples in which\nthe smallest spatial domain has less than 30 spots. In such cases, the size\nof the metaspot will be number of spots in the smallest domain.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregating counts using metaspots\nspe_metaspots <- list(\n    ath = lapply(\n        ath_spe, aggregate_counts, spatial_domain = \"cell_type\", nspots = 30\n    ),\n    gma = lapply(\n        gma_spe, aggregate_counts, spatial_domain = \"annotation\", nspots = 30\n    ),\n    pap = lapply(\n        pap_spe, aggregate_counts, spatial_domain = \"clusters\", nspots = 30\n    ),\n    zma = lapply(\n        zma_spe, aggregate_counts, spatial_domain = \"cell_type\", \n        iter.max = 100, nspots = 30\n    ),\n    hvu = lapply(\n        hvu_spe, aggregate_counts, spatial_domain = \"tissue\", nspots = 30\n    )\n)\n```\n:::\n\n\n## Comparing distributions of gene-gene correlations by duplication mode\n\nHere, we will calculate Spearman's correlations between duplicate pairs and\ncompare the distributions of correlation coefficients by duplication mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate Spearman's correlations\nrho_metaspots <- lapply(names(spe_metaspots), function(x) {\n    \n    rho_df <- lapply(\n        spe_metaspots[[x]], calculate_cor, dups = dup_pairs[[x]],\n        assay_name = \"logcounts\"\n    ) |>\n        dplyr::bind_rows(.id = \"sample\")\n    \n    return(rho_df)\n})\nnames(rho_metaspots) <- names(spe_metaspots)\n\n# Remove missing values\nrho_metaspots <- lapply(rho_metaspots, function(x) {\n    return(x[!is.na(x$cor), ])\n})\n```\n:::\n\n\nNext, for each sample, we will test for significant differences by \nduplication mode using Kruskal-Wallis tests followed by a post-hoc Dunn's test. \nTo account for differences in ages between gene pairs, we will do this \nseparately for each age group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add age group info to pairs\nrho_metaspots_age <- lapply(seq_along(rho_metaspots), function(x) {\n    return(pairs_age[[x]] |> dplyr::inner_join(rho_metaspots[[x]]))\n})\nnames(rho_metaspots_age) <- names(rho_metaspots)\n\n# Compare distros\n#' Wrapper function to compare distros with Kruskal-Wallis + Dunn\ncompare_cors <- function(rho_df) {\n    \n    # Add a variable indicating sample + Ks peak\n    rho_df$id <- paste0(rho_df$sample, \"_\", rho_df$peak)\n    ids <- unique(rho_df$id)\n    \n    # Perform tests and get CLD for each sample-peak\n    cld_df <- Reduce(rbind, lapply(ids, function(x) {\n        \n        fdf <- rho_df[rho_df$id == x, ]\n        \n        # Perform Kruskal-Wallis test followed by a post-hoc Dunn's test\n        cld <- cld_kw_dunn(fdf, value = \"cor\")\n        cld$sample <- unique(fdf$sample)\n        cld$peak <- unique(fdf$peak)\n        \n        return(cld)\n    }))\n    \n    \n    \n    return(cld_df)\n}\n\n# Combine test results into a single data frame\ncomp_metaspots <- bind_rows(\n    compare_cors(rho_metaspots_age$ath) |> mutate(species = \"Ath\"),\n    compare_cors(rho_metaspots_age$gma) |> mutate(species = \"Gma\"),\n    compare_cors(rho_metaspots_age$pap) |> mutate(species = \"Pap\"),\n    compare_cors(rho_metaspots_age$zma) |> mutate(species = \"Zma\"),\n    compare_cors(rho_metaspots_age$hvu) |> mutate(species = \"Hvu\")\n) \n```\n:::\n\n\nNow, we will visualize results with a heatmap showing CLDs for all samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot heatmap with CLDs\np_heatmap_rho <- comp_metaspots |>\n    mutate(\n        Group = factor(\n            Group, levels = rev(c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n        )\n    ) |>\n    ggplot(aes(x = sample, y = Group, fill = Letter)) +\n    geom_tile(color = \"gray90\", linewidth = 0.8, alpha = 0.7) +\n    geom_text(aes(label = Letter), size = 3) +\n    ggh4x::facet_nested(~ species + peak, scales = \"free\", space = \"free\") +\n    theme_classic() +\n    theme(\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank()\n    ) +\n    labs(\n        title = \"Differences in gene-gene correlations by duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P <0.05\",\n        x = \"Samples\", y = \"Mode\"\n    ) +\n    theme(\n        legend.position = \"none\"\n    ) +\n    ggsci::scale_fill_npg()\n\np_heatmap_rho\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-12-1.png){width=2700}\n:::\n:::\n\n\nThe heatmap shows that differences in expression divergence by duplication modes\nvary not only by species, but also by sample (slide). To account for\nvariations across samples, we will repeat the analyses above, but now using the \nmean correlations for each gene pair across samples (so that we have a \nsingle, summarized distribution for each species). Then, we will compare the\ndistributions of gene-gene correlations by duplication mode as done before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get mean Fisher's Z-transformed rho estimates\nzrho_mean <- bind_rows(rho_metaspots_age, .id = \"species\") |>\n    mutate(\n        cor = signif(cor, 1),\n        cor = 0.5 * log((1 + cor) / (1 - cor)),\n        pair = str_c(dup1, dup2, sep = \"_\"),\n        species_peak = str_c(species, peak, sep = \"_\")\n    ) |>\n    group_by(pair, peak) |>\n    mutate(mean_cor = mean(cor)) |>\n    ungroup() |>\n    distinct(pair, peak, .keep_all = TRUE) |>\n    mutate(\n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        peak = as.character(peak)\n    ) |>\n    dplyr::select(-c(sample, cor, pair))\n\n# Compare distributions\nzrho_cld <- lapply(\n    split(zrho_mean, zrho_mean$species_peak),\n    cld_kw_dunn, value = \"mean_cor\"\n) |>\n    bind_rows(.id = \"species_peak\") |>\n    tidyr::separate(species_peak, c(\"species\", \"peak\"), sep = \"_\") |>\n    dplyr::rename(type = Group) |>\n    mutate(\n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        peak = as.character(peak)\n    )\n\n# Plot distributions with CLDs\np_zrho_mean <- ggplot(zrho_mean, aes(x = mean_cor, y = type)) +\n    geom_violin(aes(fill = type), scale = \"width\", show.legend = FALSE) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    geom_label(\n        data = zrho_cld,\n        aes(x = 0.9, y = type, label = Letter)\n    ) +\n    ggh4x::facet_nested(~ species + peak, scales = \"free\", space = \"free\") +\n    labs(\n        x = expression(\"Fisher's z-transformed\" ~ rho), \n        y = NULL,\n        title = \"Gene-gene correlations and duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P <0.05\"\n    ) +\n    scale_x_continuous(limits = c(-0.5, 1)) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-14-1.png){width=2400}\n:::\n:::\n\n\nThe figure shows that differences in gene-gene correlations by duplication mode\nexist, but not for all species. For Arabidopsis, maize, and \nyounger soybean duplicates, segmental and proximal duplicates (and \ntandem duplicates in case of maize) are more similar\nthan duplicates derived from other modes. In *Phalaenopsis sp.*, barley, \nand older soybean duplicates, there are no differences in correlations \nby duplication mode. Interestingly, there seems to be an effect of duplicate \nage on differences. For instance, in soybean, younger duplicates differ in correlations based on their duplication mode, but not older ones. Likewise,\n(young) maize duplicates (originated at ~16 MYA) differ in correlations\nbased on duplication modes, but not barley duplicates, which are much \nolder (originated at ~53 MYA). The age of duplicates could also explain\nwhy orchid duplicates did not display differences in gene-gene correlations.\nAn exception exists for Arabidopsis, whose duplicates display differences\nin correlations by duplication mode despite their old ages (~51 to 72 MYA).\nSuch discrepancies could also be partially explained by tissue-specific \ndifferences in expression divergence. For instance, duplicates\noriginating from different modes might diverge differently in leaves (tissue\nprofiled in the Arabidopsis data set), but not in other tissues.\n\n## Frequency of pairs with significant expression preservation\n\nHere, to assess whether observed correlations are greater than the \nexpected by chance (and, hence, indicating significant expression \npreservation), we will randomly sample 10,000 gene pairs and \ncalculate Spearman's correlations to generate a null distribution. \nThen, we will compare the observed correlations to such a \nnull distribution to determine whether correlations are greater than \nthe expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get genes with preserved expression (rho > 95% quantile)\nspecies <- names(spe_metaspots)\npreserved <- lapply(species, function(x) {\n    \n    df <- lapply(seq_along(spe_metaspots[[x]]), function(i) {\n        \n        ## Get cut-off based on null distribution\n        pairs <- data.frame(\n            dup1 = sample(rownames(spe_metaspots[[x]][[i]]), 1e4, replace = TRUE),\n            dup2 = sample(rownames(spe_metaspots[[x]][[i]]), 1e4, replace = TRUE)\n        )\n        nulls <- calculate_cor(\n            spe_metaspots[[x]][[i]], dups = pairs, assay_name = \"logcounts\"\n        )\n        cutoff <- quantile(nulls$cor, 0.95, na.rm = TRUE)\n        \n        # Get only pairs with rho > `cutoff`\n        sample_id <- names(spe_metaspots[[x]])[i]\n        preserved <- rho_metaspots_age[[x]] |>\n            dplyr::filter(\n                sample == sample_id, \n                cor > cutoff\n            )\n        \n        return(preserved)\n    }) |> dplyr::bind_rows()\n\n    return(df)\n}) |> bind_rows()\n```\n:::\n\n\nNow, we will test for significant associations between duplication modes and\nexpression preservation. The goal here is to find out if pairs originating\nfrom certain duplication modes are more preserved than the expected\nby chance. Then, we will visualize results with a stacked barplot showing\nthe relative frequency of preserved pairs (by mode) for each sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform enrichment of preserved genes by duplication mode\npreserved_list <- preserved |> \n    mutate(\n        pair = str_c(dup1, dup2, sep = \"_\"),\n        sample_peak = str_c(sample, peak, sep = \"_\")\n    ) |>\n    select(pair, sample_peak)\n\npreserved_list <- split(preserved_list, preserved_list$sample_peak)\n\nsea_df <- lapply(preserved_list, function(x) {\n    \n    dups <- bind_rows(rho_metaspots_age, .id = \"species\") |>\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |>\n        left_join(x, by = \"pair\") |>\n        dplyr::select(pair, type)\n        \n    res_df <- HybridExpress::ora(\n        genes = x$pair,\n        annotation <- as.data.frame(dups),\n        background = dups$pair,\n        min_setsize = 5, max_setsize = 1e4, alpha = 0.001\n    )\n    \n    return(res_df)\n}) |>\n    bind_rows(.id = \"sample_peak\")\n\n# Get relative frequency of preserved pairs by mode for each sample\npdata_preserved <- preserved |>\n    dplyr::count(sample, peak, type) |>\n    dplyr::rename(n_preserved = n) |>\n    right_join(\n        bind_rows(rho_metaspots_age) |> \n            dplyr::count(sample) |>\n            dplyr::rename(n_all = n)\n    ) |>\n    mutate(\n        perc_preserved = n_preserved / n_all\n    ) |>\n    select(sample, peak, type, perc_preserved) |>\n    pivot_longer(cols = perc_preserved) |>\n    left_join(\n        bind_rows(rho_metaspots_age, .id = \"species\") |>\n            select(sample, species) |>\n            distinct()\n    ) |>\n    mutate(sample_peak = str_c(sample, peak, sep = \"_\")) |>\n    left_join(\n        sea_df |> dplyr::select(sample_peak, type = term, padj)\n    ) |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = str_to_title(species)\n    ) |>\n    mutate(\n        ltype = ifelse(!is.na(padj), 1, 0),\n        alpha = ifelse(!is.na(padj), 0.9, 0.2)\n    )\n\n\n# Create barplot\np_preserved <- ggplot(\n    pdata_preserved, aes(x = sample, y = value)\n) +\n    geom_bar(\n        aes(fill = type, alpha = alpha),\n        position = \"stack\", stat = \"identity\"\n    ) +\n    scale_alpha_identity() +\n    ggh4x::facet_nested(~ species + peak, scales = \"free\", space = \"free\") +\n    scale_fill_manual(values = palette.colors()) +\n    theme_classic() +\n    scale_y_continuous(\n        limits = c(0, 0.10), \n        breaks = seq(0, 0.10, by = 0.05),\n        expand = expansion(mult = 0.01)\n    ) +\n    theme(\n        panel.background = element_rect(fill = bg),\n        axis.ticks.x = element_blank(),\n        axis.text.x = element_blank()\n    ) +\n    labs(\n        title = \"Relative frequency of duplicates with preserved expression\",\n        subtitle = \"Bright colors indicate significant associations; Fisher's exact test, P <0.001\",\n        x = \"Samples\", y = \"Relative frequency\", \n        fill = \"Mode\"\n    )\n\np_preserved\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-17-1.png){width=2700}\n:::\n:::\n\n\nThe figure shows that the sets of duplicate pairs with preserved expression\nare significantly overrepresented in tandem and proximal duplicates in most\nspecies. An exception is the barley data set, in which there is a significant\noverrepresentation of retrotransposed pairs in most samples, while only one\nsample displays overrepresentation of tandem duplicates. The association\nbetween tandem/proximal duplicates and pairs with preserved expression is\nlikely due to preserved cis-regulatory element between ancestral genes\nand copies in these duplication modes.\n\n## Expression divergence over time\n\nHere, we will explore how gene-gene correlations change over time using\n$K_s$ as a proxy for time. Since there are many samples for some species,\nvisualizing $\\rho$ over time for each sample separately is not feasible.\nA workaround is to, for each gene pair, calculate mean correlations \nacross samples in species S, and then use mean correlations as a summary\nstatistic. However, we first need to make sure that correlations for\nthe same gene pairs do not vary much across samples. To verify that,\nlet's calculate some measure of spread and plot them for each species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate variability of correlations for the same pair across samples\ncor_var <- lapply(rho_metaspots, function(sp) {\n    \n    ## Get a wide matrix with correlations for each gene pair\n    cor_wide <- sp |> \n        dplyr::filter(Ks <3) |>\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |>\n        select(pair, cor, sample) |>\n        mutate(cor = 0.5 * log((1 + cor) / (1 - cor))) |>\n        pivot_wider(names_from = sample, values_from = cor) |>\n        tibble::column_to_rownames(\"pair\") |>\n        as.matrix() \n    \n    ## Calculate metrics\n    df <- data.frame(\n        SD = apply(cor_wide, 1, sd, na.rm = TRUE),\n        IQR = apply(cor_wide, 1, IQR, na.rm = TRUE),\n        Range = apply(cor_wide, 1, function(x) max(x) - min(x))\n    )\n    \n    return(df)\n}) |>\n    bind_rows(.id = \"species\") |>\n    mutate(species = str_to_title(species)) |>\n    pivot_longer(cols = !species, names_to = \"metrics\", values_to = \"value\")\n    \n# Plot CV for each species\np_corvar <- cor_var |>\n    ggplot(aes(x = value, y = species)) +\n    geom_violin(aes(fill = species)) +\n    geom_boxplot(width = 0.05) +\n    facet_wrap(~metrics, scales = \"free_x\", nrow = 1) +\n    scale_fill_manual(values = palette.colors(palette = \"Accent\")) +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg),\n        legend.position = \"none\"\n    ) +\n    labs(\n        title = \"Variability of correlations for the same gene pair across samples\",\n        subtitle = \"Spearman's correlations were transformed with Fisher's z-transformation\",\n        x = \"Estimate\", y = \"Species\"\n    )\n\np_corvar\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-19-1.png){width=2100}\n:::\n:::\n\n\nThe figure shows that correlations for the same pairs across different samples\ndo not vary much, despite some outliers for the *A. thaliana* data set. Hence,\nwe can safely summarize correlations by using the mean correlation across\ndata sets for each species.\n\nNext, we will plot a scatterplot showing mean correlations between gene\npairs as a function of time (here, represented by $K_s$). Following previous\npapers [@gu2002rapid; @makova2003divergence; @ganko2007divergence], \nwe will transform Spearman's rho using Fisher's z-transformation, defined as:\n\n$$\\frac{1}{2} log(\\frac{1+\\rho}{1-\\rho})$$\n\nHowever, we will first check which association is best supported for mean \ncorrelations and $K_s$: linear or exponential. For that, we will fit two\nlinear models for each duplication mode in each species:\n\n1. `lm(zrho ~ Ks)` - linear association\n2. `lm(zrho ~ logks)` - exponential association\n\nThen, we will use AIC and BIC to check which model is best supported.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get mean rho for all duplicates in species\nmean_rho_all <- lapply(rho_metaspots, function(sp) {\n    \n    ## Get mean cor per species\n    mrho <- sp |> \n        dplyr::filter(Ks <3) |>\n        mutate(\n            cor = signif(cor, 1),\n            cor = 0.5 * log((1 + cor) / (1 - cor)),\n            pair = str_c(dup1, dup2, sep = \"_\")\n        ) |>\n        group_by(pair) |>\n        mutate(mean_cor = mean(cor, na.rm = TRUE)) |>\n        ungroup() |>\n        distinct(pair, .keep_all = TRUE) |>\n        mutate(\n            type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n        ) |>\n        dplyr::select(zrho = mean_cor, Ks, Ka, type) |>\n        dplyr::filter(!zrho %in% c(Inf, -Inf)) |>\n        dplyr::filter(!is.na(zrho))\n\n    return(mrho)\n})\nnames(mean_rho_all) <- str_to_title(names(mean_rho_all))\n\n# Fit models\nsp <- names(mean_rho_all)\ndmodes <- c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")\nmodel_comp <- lapply(sp, function(x) {\n    \n    df <- mean_rho_all[[x]] |>\n        mutate(logks = log(Ks))\n    \n    \n    comp <- Reduce(rbind, lapply(dmodes, function(y) {\n        \n        m1 <- lm(zrho ~ Ks, data = df |> dplyr::filter(type == y))\n        m2 <- lm(zrho ~ logks, data = df |> dplyr::filter(type == y))\n        \n        bic <- BIC(m1, m2)\n        aic <- AIC(m1, m2)\n        \n        result <- data.frame(\n            BIC1 = bic$BIC[1],\n            BIC2 = bic$BIC[2],\n            AIC1 = aic$AIC[1],\n            AIC2 = aic$AIC[2],\n            Rsq1 = summary(m1)$r.squared,\n            Rsq2 = summary(m2)$r.squared,\n            species = x, \n            type = y\n        ) |>\n            mutate(\n                best_BIC = ifelse(BIC1 < BIC2, \"m1\", \"m2\"),\n                best_AIC = ifelse(AIC1 < AIC2, \"m1\", \"m2\")\n            )\n        \n        return(result)\n    }))\n}) |> bind_rows()\n```\n:::\n\n\nModel selection metrics indicate that a log-log regression outperforms\na simple linear regression, indicating that the two variables ($K_s$ and \ncorrelations) are exponentially associated. Let's visualize such relationships.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to plot scatterplot of cor ~ Ks\nplot_cor_rates <- function(df, x = \"Ks\", y = \"zrho\", by = \"type\") {\n    \n    pal <- palette.colors(6)\n    pal[5] <- \"#e4d93f\"\n    p <- ggplot(df, aes(x = .data[[x]], y = .data[[y]])) +\n        geom_point(aes(color = .data[[by]]), alpha = 0.5) +\n        scale_color_manual(values = pal) +\n        facet_wrap(vars(.data[[by]]), nrow = 1) +\n        theme_classic() +\n        coord_cartesian(ylim = c(-1, 3)) +\n        theme(\n            legend.position = \"none\",\n            panel.background = element_rect(fill = bg)\n        ) +\n        labs(\n            x = expression(log ~ K[s]),\n            y = expression(\"Spearman's\" ~ rho),\n            title = \"Expression divergence over time\"\n        )\n    \n    return(p)\n}\n\n# Create a scatterplot with cor ~ Ks - all samples from a species combined\np_rho_ks <- lapply(mean_rho_all, function(x) {\n    \n    ## Create a scatterplot\n    p_combined <- x |> \n        mutate(logks = log(Ks)) |>\n        plot_cor_rates(x = \"logks\") +\n        geom_smooth(method = \"lm\", color = \"firebrick3\") +\n        ggpubr::stat_regline_equation(\n            aes(label = ..eq.label..),\n            label.x = -3.7, label.y = 2.5, size = 3\n        ) +\n        scale_x_continuous(limits = c(-4, 1.10)) +\n        labs(title = NULL, y = expression(\"Fisher's z-transformed\" ~ rho))\n    \n    return(p_combined)\n})\n\n# Combine plots into one\np_rho_ks_final <- wrap_plots(\n    p_rho_ks$Ath + labs(subtitle = \"A. thaliana\", x = NULL),\n    p_rho_ks$Gma + labs(subtitle = \"G. max\", x = NULL) +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    p_rho_ks$Pap + labs(subtitle = \"P. aphrodite\", x = NULL) +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    p_rho_ks$Zma + labs(subtitle = \"Z. mays\", x = NULL) +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    p_rho_ks$Hvu + labs(subtitle = \"H. vulgare\") +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    ncol = 1\n) +\n    plot_annotation(title = \"Gene-gene correlations over time\") +\n    plot_layout(axes = \"collect\") &\n    theme(\n        plot.subtitle = element_text(face = \"italic\")\n    )\n\np_rho_ks_final\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-22-1.png){width=2700}\n:::\n:::\n\n\nOverall, the figure shows that expression divergence increases (i.e.,\nparalogous pairs become more different in expression profiles) over time. \nA positive slope ($\\beta_1$) can be observed for retrotransposed\nduplicates in four out of five species (except for *Z. mays*), suggesting\nthat older duplicates tend to have more similar expression profiles for\nthis duplication mode. However, the number of retrotransposed\nduplicates is much smaller than the number of duplicates originating from\nall other mechanisms.\n\n## Expression divergence by gene family\n\nHere, we will explore how duplicates in each gene family diverge, looking\nfor families that tend to have more similar expression profiles (i.e., less\ndivergence), and families with more divergent expression profiles.\nWe will start by assigning families to each pair and ranking families by median\ncorrelations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign families to each pair\nzrho_fams <- zrho_mean |>\n    inner_join(fams |> dplyr::select(dup1 = gene, family)) |>\n    filter(!mean_cor %in% c(Inf, -Inf))\n\n# Get Q1, Q3, median, and rank families by median\nfams_ranked <- zrho_fams |>\n    group_by(species, family) |>\n    summarise(\n        q1 = quantile(mean_cor, 0.25, na.rm = TRUE),\n        median = quantile(mean_cor, 0.5, na.rm = TRUE),\n        q3 = quantile(mean_cor, 0.75, na.rm = TRUE)\n    ) |>\n    arrange(species, -median) |>\n    ungroup()\n```\n:::\n\n\nNext, we will visualize distributions of correlations for each family\nusing boxplots. We will use median correlations calculated above to sort\nboxes from highest to lowest correlation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize IQRs of correlations per family\np_zrho_fam <- fams_ranked |>\n    mutate(\n        species_family = str_c(species, family, sep = \"_\"),\n        species_family = as_factor(species_family)\n    ) |>\n    ggplot(aes(x = species_family)) +\n    geom_linerange(\n        aes(ymin = q1, ymax = q3),\n        color = \"gray20\"\n    ) +\n    geom_point(aes(y = median), color = \"firebrick\", size = 0.5) +\n    facet_wrap(~species, scales = \"free_x\", nrow = 1) +\n    theme_classic() +\n    theme(\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        panel.background = element_rect(fill = bg)\n    ) +\n    labs(\n        title = \"Gene-gene correlations for each gene family\",\n        subtitle = \"Families are ranked by median values (red dots)\",\n        x = \"Ranked gene families\",\n        y = expression(\"IQR of Fisher's z-transformed\" ~ rho)\n    )\n\np_zrho_fam\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](04_expression_divergence_correlations_files/figure-html/unnamed-chunk-25-1.png){width=2400}\n:::\n:::\n\n\nThe figure shows that expression divergence varies by gene family.\nInterestingly, some families contain gene pairs that are highly similar,\nand some other families contain gene pairs that are highly dissimilar, \nsuggesting that there might be selection pressures acting to preserve \nexpression similarity in some paralogs, but not in others.\n\nTo better understand these families with highly similar/dissimilar\ngene pairs, we will perform functional enrichment analyses to profile\ntheir functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select top 10% of the families with highest median correlations\ntop10_high <- fams_ranked |>\n    group_by(species) |>\n    slice_max(median, prop = 0.1) |>\n    ungroup()\n\ntop10_low <- fams_ranked |>\n    group_by(species) |>\n    slice_min(median, prop = 0.1) |>\n    ungroup()\n\n# Perform overrepresentation analyses\nsp <- names(go_annot)\nsea <- lapply(sp, function(x) {\n    \n    ## Get top 10% families (highest and lowest correlations)\n    t10_high <- top10_high |>\n        filter(species == x) |>\n        pull(family)\n    \n    t10_low <- top10_low |>\n        filter(species == x) |>\n        pull(family)\n    \n    ## Get gene sets\n    genes_high <- fams |>\n        filter(family %in% t10_high, species == tolower(x)) |>\n        pull(gene)\n    \n    genes_low <- fams |>\n        filter(family %in% t10_low, species == tolower(x)) |>\n        pull(gene)\n    \n    ## Perform SEA\n    bg <- zrho_fams |>\n        filter(species == x)\n    bg <- unique(bg$dup1, bg$dup2)\n    \n    df_high <- HybridExpress::ora(\n        genes = genes_high,\n        annotation = as.data.frame(go_annot[[x]]),\n        background = bg\n    ) |>\n        mutate(category = \"highcor\")\n    \n    df_low <- HybridExpress::ora(\n        genes = genes_low,\n        annotation = as.data.frame(go_annot[[x]]),\n        background = bg\n    ) |>\n        mutate(category = \"lowcor\")\n    \n    final_df <- bind_rows(df_high, df_low) |>\n        mutate(species = x)\n    \n    return(final_df)\n}) |>\n    bind_rows()\n```\n:::\n\n\nUpon manual inspection and curation of results (in object `sea`), \nwe observed that families with highly similar paralogs are related to basic\ncellular processes, such as \nchromatin assembly, regulation of transcription, translation, splicing, \nsignaling, amino acid and lipid metabolism, etc. Families with highly\ndissimilar paralogs were overrepresented in genes associated with more\nspecific processes, such as defense to symbionts, leaf senescence, \nflower development, detoxification, auxin metabolism and transport, \nABA biosynthesis, sucrose metabolism and transport, and cell wall \nbiogenesis and remodeling.\n\n\n## Saving objects {.unnumbered}\n\nFinally, we will save important objects to reuse later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save objects as .rds files\n## List of data frames with gene-gene correlations for each species\nsaveRDS(\n    rho_metaspots, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"spearman_rho_metaspots.rds\")\n)\n\n## Mean Z-transformed rho estimates per species\nsaveRDS(\n    zrho_mean, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"mean_zrho_metaspots.rds\")\n)\n\n## CLD from Kruskal-Wallis + post-hoc Dunn's test\nsaveRDS(\n    comp_metaspots, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"rho_comp_metaspots.rds\")\n)\n\n# Duplicate pairs with significantly preserved gene expression\nsaveRDS(\n    preserved, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"pairs_preserved_expression.rds\")\n)\n\n# Plots\n## Simulation of gene-gene correlations for increasingly large metaspots\nsaveRDS(\n    p_simcor, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"simulation_rho_metaspots.rds\")\n)\n\n## Heatmaps of CLD for differences in gene-gene correlations\nsaveRDS(\n    p_heatmap_rho, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"rho_comp_heatmap.rds\")\n)\n\n## Distribution of mean Fisher's Z-transformed \\rho estimates \nsaveRDS(\n    p_zrho_mean, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"mean_zrho_comp.rds\")\n)\n\n## Relative frequency of pairs with preserved expression\nsaveRDS(\n    p_preserved, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"pairs_preserved_expression_relfreq.rds\")\n)\n\n## Variability of correlations for the same gene pairs across samples \nsaveRDS(\n    p_corvar, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"rho_variation_across_samples.rds\")\n)\n\n## Expression divergence over time - all samples combined\nsaveRDS(\n    p_rho_ks_final, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"expression_divergence_over_time.rds\")\n)\n\n## IQR of \\rho distros for each gene family\nsaveRDS(\n    p_zrho_fam, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"IQR_rho_per_gene_family.rds\")\n)\n\n## Enrichment results for families with highly similar and dissimilar paralogs\nsaveRDS(\n    sea, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"SEA_highly_similar_dissimilar_fams.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n annotate               1.82.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n AnnotationDbi          1.66.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n base64enc              0.1-3      2015-07-28 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocParallel           1.38.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BioNERO              * 1.12.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1     2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5      2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5      2020-08-30 [1] CRAN (R 4.4.1)\n blob                   1.2.4      2023-03-17 [1] CRAN (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0      2024-05-16 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n checkmate              2.3.1      2023-12-04 [1] CRAN (R 4.4.1)\n circlize               0.4.16     2024-02-20 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n clue                   0.3-65     2023-09-23 [1] CRAN (R 4.4.1)\n cluster                2.1.6      2023-12-01 [1] CRAN (R 4.4.1)\n coda                   0.19-4.1   2024-01-31 [1] CRAN (R 4.4.1)\n codetools              0.2-20     2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n ComplexHeatmap         2.21.1     2024-09-24 [1] Github (jokergoo/ComplexHeatmap@0d273cd)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4     2024-03-30 [1] CRAN (R 4.4.1)\n DBI                    1.2.3      2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n dynamicTreeCut         1.63-1     2016-03-11 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1      2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n exdiva               * 0.99.0     2024-08-21 [1] Bioconductor\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastcluster            1.2.6      2024-01-12 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2      2022-02-02 [1] CRAN (R 4.4.1)\n foreign                0.8-87     2024-06-26 [1] CRAN (R 4.4.1)\n Formula                1.2-5      2023-02-24 [1] CRAN (R 4.4.1)\n genefilter             1.86.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GENIE3                 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n GetoptLong             1.0.5      2020-12-15 [1] CRAN (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggdendro               0.2.0      2024-02-23 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggnetwork              0.5.13     2024-02-14 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5      2024-01-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n GlobalOptions          0.1.2      2020-06-10 [1] CRAN (R 4.4.1)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n GO.db                  3.19.1     2024-07-24 [1] Bioconductor\n gridExtra              2.3        2017-09-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n Hmisc                  5.1-3      2024-05-28 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmlTable              2.4.3      2024-07-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3      2024-03-13 [1] CRAN (R 4.4.1)\n impute                 1.78.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n intergraph             2.0-4      2024-02-01 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14     2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1     2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4     2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10   2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n memoise                2.0.1      2021-11-26 [1] CRAN (R 4.4.1)\n mgcv                   1.9-1      2023-12-21 [1] CRAN (R 4.4.1)\n minet                  3.62.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n NetRep                 1.2.7      2023-08-19 [1] CRAN (R 4.4.1)\n network                1.18.2     2023-12-05 [1] CRAN (R 4.4.1)\n nlme                   3.1-165    2024-06-06 [1] CRAN (R 4.4.1)\n nnet                   7.3-19     2023-05-03 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n plyr                   1.8.9      2023-10-02 [1] CRAN (R 4.4.1)\n png                    0.1-8      2022-11-29 [1] CRAN (R 4.4.1)\n polynom                1.4-1      2022-04-11 [1] CRAN (R 4.4.1)\n preprocessCore         1.66.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.4.1)\n RhpcBLASctl            0.23-42    2023-02-11 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rpart                  4.1.23     2023-12-05 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n RSQLite                2.3.7      2024-05-27 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n shape                  1.4.6.1    2024-02-23 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0      2023-01-06 [1] CRAN (R 4.4.1)\n statnet.common         4.9.0      2023-05-24 [1] CRAN (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n survival               3.7-0      2024-06-05 [1] CRAN (R 4.4.1)\n sva                    3.52.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n viridisLite            0.4.2      2023-05-02 [1] CRAN (R 4.4.1)\n WGCNA                  1.72-5     2023-12-07 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XML                    3.99-0.17  2024-06-25 [1] CRAN (R 4.4.1)\n xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "04_expression_divergence_correlations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}