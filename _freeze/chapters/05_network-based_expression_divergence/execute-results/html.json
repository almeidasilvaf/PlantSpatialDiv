{
  "hash": "7ff31712352461a34e829ddb97c8e835",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Network-based expression divergence\n\nIn this chapter, we will explore how duplicated genes diverge at\nthe expression level using gene coexpression networks (GCNs).\n\nWe will start by loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load packages\nlibrary(here)\nlibrary(BioNERO)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(exdiva)\n\n# Load helper functions\nsource(here(\"code\", \"aggregate_spots.R\"))\nsource(here(\"code\", \"utils.R\"))\n\n# Plot background\nbg <- grid::linearGradient(colorRampPalette(c(\"gray90\", \"white\"))(100))\n```\n:::\n\n\nNow, let's load `SpatialExperiment` objects created in chapter 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load `SpatialExperiment` objects\nath_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\"))\ngma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\"))\npap_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\"))\nzma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\"))\nhvu_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\"))\nhvu_spe <- lapply(hvu_spe, function(x) return(x[, !is.na(x$tissue)]))\n```\n:::\n\n\nAnd duplicate pairs for each species, classified by age groups, \nobtained in chapter 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read duplicated gene pairs for each species\ndup_pairs <- readRDS(here(\"products\", \"result_files\", \"dup_list.rds\"))\n\n# Read duplicated gene pairs with age-based group classifications\npairs_age <- readRDS(here(\"products\", \"result_files\", \"pairs_by_age_group.rds\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Inferring gene coexpression networks (GCNs)\n\nWe will use *[BioNERO](https://bioconductor.org/packages/3.19/BioNERO)* to infer signed hybrid GCNs \nusing Spearman's $\\rho$ as a correlation method. We will infer a single GCN\nfor each species by pseudobulking and combining different slides. Let's\nstart with this aggregation step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to pseudobulk and combine count data\npseudobulk_and_combine <- function(spe_list, domain = \"cell_type\") {\n    \n    # Create a single matrix with pseudobulk counts for all samples\n    ccounts <- lapply(seq_along(spe_list), function(x) {\n        \n        ag <- counts(scuttle::aggregateAcrossCells(\n            spe_list[[x]], ids = spe_list[[x]][[domain]], statistics = \"sum\"\n        ))\n        colnames(ag) <- paste0(colnames(ag), \"_S\", x)\n        ag <- cbind(gene = rownames(ag), as.data.frame(ag))\n        \n        return(ag)\n    })\n    ccounts <- Reduce(function(x, y) merge(x, y, by = \"gene\", all.x = TRUE), ccounts)\n    ccounts <- ccounts |>\n        tibble::column_to_rownames(\"gene\") |>\n        as.matrix()\n    ccounts[is.na(ccounts)] <- 0\n    \n    # Recreate SpatialExperiment object and get log-norm counts\n    spe <- SpatialExperiment::SpatialExperiment(\n        assays = list(counts = ccounts),\n        colData = data.frame(\n            row.names = colnames(ccounts),\n            domain = gsub(\"_S.*\", \"\", colnames(ccounts)),\n            slide = gsub(\".*_S\", \"S\", colnames(ccounts))\n        )\n    )\n    spe <- scuttle::computeLibraryFactors(spe)\n    spe <- scuttle::logNormCounts(spe)\n    \n    return(spe)\n}\n\n# Get combined pseudobulked counts for each species\nspe_all <- list(\n    Ath = pseudobulk_and_combine(ath_spe, \"cell_type\"),\n    Gma = pseudobulk_and_combine(gma_spe, \"annotation\"),\n    Pap = pseudobulk_and_combine(pap_spe, \"clusters\"),\n    Zma = pseudobulk_and_combine(zma_spe, \"cell_type\"),\n    Hvu = pseudobulk_and_combine(hvu_spe, \"tissue\")\n)\n```\n:::\n\n\nNext, we will infer the gene coexpression networks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWGCNA::allowWGCNAThreads(nThreads = 16)\n\n# For each species, infer a GCN for each sample based on metaspot aggregation\ngcns <- lapply(spe_all, function(sp) {\n    \n    ## Infer signed hybrid GCN based on Spearman's correlations\n    mat <- as.matrix(assay(sp, \"logcounts\"))\n    power <- SFT_fit(mat, net_type = \"signed hybrid\", cor_method = \"spearman\")\n    gcn <- exp2gcn(\n        mat, net_type = \"signed hybrid\", SFTpower = power$power,\n        cor_method = \"spearman\", return_cormat = FALSE, verbose = TRUE\n    )\n    \n    ## Extract hubs\n    hubs <- get_hubs_gcn(mat, gcn)\n    \n    ## Create a list with relevant elements\n    result_list <- list(\n        SFTplot = power$plot,\n        MEs = gcn$MEs,\n        genes_and_modules = gcn$genes_and_modules,\n        k = gcn$kIN,\n        hubs = hubs\n    )\n    \n    return(result_list)\n})\n```\n:::\n\n\n## Duplicate co-occurrence in coexpression modules\n\nNow, for each species, we will count the frequencies of genes in each module\npreservation class identified \nby *[exdiva](https://github.com/almeidasilvaf/exdiva)*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get module preservation classes with {exdiva}\nsp <- names(gcns)\nmod_comps <- lapply(sp, function(x) {\n    \n    ## Get duplicate pairs and ages for species `x`\n    dup_df <- pairs_age[[tolower(x)]]\n    ## Get comparison classes\n    comps <- compare_coex_modules(dup_df, gcns[[x]]$genes_and_modules)\n    \n    return(comps)\n}) |>\n    purrr::set_names(sp) |>\n    bind_rows(.id = \"species\")\n```\n:::\n\n\nNext, we will get the proportion of diverged gene pairs (i.e., 'diverged'\nand 'only one' category together), and compare the observed frequency to\na null distribution of frequencies obtained from 10,000 degree-preserving \nsimulated networks (through node label permutation).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get proportion of diverged pairs\nprop_div <- mod_comps |>\n    filter(module_preservation != \"both_absent\") |>\n    mutate(species_peak = str_c(species, peak, sep = \"_\")) |>\n    mutate(\n        module_preservation = str_replace_all(\n            module_preservation, \"one_absent\", \"diverged\"\n        )\n    ) |>\n    group_by(species_peak, type) |>\n    dplyr::count(module_preservation) |>\n    mutate(prop_div = n / sum(n)) |>\n    ungroup() |>\n    filter(module_preservation == \"diverged\")\n\n# Get simulated proportions\nsp <- names(gcns)\nprop_sim <- lapply(sp, function(x) {\n    \n    message(\"Working on \", x)\n    \n    ## Get duplicates and ages\n    dup_df <- pairs_age[[tolower(x)]] \n    \n    ## Perform node label permutation 10k times and get frequency of diverged pairs\n    sim_prop <- lapply(seq_len(1e4), function(z) {\n        \n        ### Simulate modules\n        sm <- gcns[[x]]$genes_and_modules\n        sm$Genes <- sample(sm$Genes, replace = FALSE)\n        \n        ### Get frequency of diverged pairs in simulated modules\n        sprop <- compare_coex_modules(dup_df, sm) |>\n            filter(module_preservation != \"both_absent\") |>\n            mutate(species = x) |>\n            mutate(species_peak = str_c(species, peak, sep = \"_\")) |>\n            mutate(\n                module_preservation = str_replace_all(\n                    module_preservation, \"one_absent\", \"diverged\"\n                )\n            ) |>\n            group_by(species_peak, type) |>\n            dplyr::count(module_preservation) |>\n            mutate(prop_div = n / sum(n)) |>\n            ungroup() |>\n            filter(module_preservation == \"diverged\") |>\n            mutate(sim = z)\n        \n        ### Combine results\n        res_list <- setNames(\n            sprop$prop_div,\n            paste0(sprop$species_peak, \"_\", sprop$type)\n        )\n\n        return(res_list)\n    }) |> unlist()\n    \n    return(sim_prop)\n})\nnames(prop_sim) <- sp\n\n\n# Calculate P-values from null distros\ndnames <- lapply(prop_sim, function(x) names(x) |> unique()) |> unlist()\nobserved <- prop_div |>\n    mutate(dnames = str_c(species_peak, type, sep = \"_\")) |>\n    dplyr::select(dnames, prop_div)\n\npvals <- lapply(dnames, function(x) {\n    \n    ## Get null distribution and observed value\n    nulls <- prop_sim |> purrr::pluck(gsub(\"_.*\", \"\", x))\n    nulls <- nulls[names(nulls) == x]\n    obs <- observed |>\n        dplyr::filter(dnames == x) |>\n        dplyr::pull(prop_div)\n    \n    # Compare observed to null and get a P-value\n    p_greater <- mean(nulls >= obs)\n    p_twosided <- mean(abs(nulls - mean(nulls)) >= abs(obs - mean(nulls)))\n    p_less <- mean(nulls <= obs)\n    \n    final_stats <- data.frame(\n        group = x,\n        p_greater = p_greater,\n        p_less = p_less,\n        p_twosided = p_twosided\n    )\n    \n    return(final_stats)\n}) |>\n    bind_rows() |>\n    mutate(\n        signif = case_when(p_greater <0.05 | p_less <0.05 ~ \"*\", TRUE ~ \"\")\n    )\n\npvals$smallest <- names(pvals[, c(2,3)])[apply(pvals[, c(2,3)], 1, which.min)]\npvals <- pvals |>\n    mutate(\n        slabel = case_when(\n            signif == \"*\" & smallest == \"p_less\" ~ \"-\",\n            signif == \"*\" & smallest == \"p_greater\" ~ \"+\",\n            TRUE ~ \"\"\n        )\n    )\n```\n:::\n\n\nNext, we will visualize frequencies of diverged duplicates by mode\nfor each species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot frequency of diverged pairs\npdata <-  prop_div |>\n    mutate(group = str_c(species_peak, type, sep = \"_\")) |>\n    separate_wider_delim(species_peak, delim = \"_\", names = c(\"species\", \"peak\")) |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    ) |>\n    left_join(pvals, by = \"group\") |>\n    dplyr::select(species, peak, type, prop_div, slabel) |>\n    mutate(\n        prop = signif(prop_div, 2),\n        lab = case_when(\n            slabel == \"\" ~ as.character(prop),\n            TRUE ~ paste0(prop, \" (\", slabel, \")\")\n        )\n    ) |>\n    dplyr::select(-prop)\n\np_diverged_gcn <- pdata |>\n    ggplot(aes(x = prop_div, y = type, fill = type)) +\n    geom_bar(stat = \"identity\", color = \"gray20\") +\n    ggh4x::facet_nested(~species + peak, scales = \"free_x\") +\n    geom_text(aes(x = 0.1, label = lab, color = type), hjust = 0, size = 4) +\n    scale_color_manual(values = c(\"gray90\", rep(\"gray10\", 4), \"gray90\")) +\n    scale_fill_manual(values = palette.colors()) +\n    theme_classic() +\n    labs(\n        title = \"Network-based expression divergence and duplication mode\",\n        subtitle = \"(-): observed values are smaller than expected\",\n        x = \"Relative frequency of diverged pairs\", y = \"Duplication mode\"\n    ) +\n    scale_x_continuous(\n        breaks = seq(0, 1, by = 0.5), labels = c(0, 0.5, 1)\n    ) +\n    theme(legend.position = \"none\")\n\np_diverged_gcn\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_network-based_expression_divergence_files/figure-html/unnamed-chunk-10-1.png){width=2400}\n:::\n:::\n\n\nThe figure shows that, for paralog pairs for which both genes are expressed,\nmost pairs diverge in expression, as they are either in different coexpression\nmodules or only one gene is expressed. Importantly, despite the high \nproportions of diverged pairs, some proportions are still lower than the\nexpected by chance in degree-preserving simulated networks, indicating\na significantly higher proportion of preserved pairs. However, there is no\nconsistent association between duplication modes and significantly higher\nproportion of preservation across species.\n\n## Distances between module eigengenes\n\nSince the classification system in `exdiva::compare_coex_modules()` is binary\n(i.e., genes in a paralog pair eitheir co-occur or do not co-occur\nin the same module), we will also explore quantitatively how different\ngenes in different modules are. For that, we for genes in different modules,\nwe will calculate distances between module eigengenes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distances between module eigengenes\nsp <- names(gcns)\nme_dist <- lapply(sp, function(x) {\n    \n    d <- compare_coex_me(\n        mod_comps |> \n            dplyr::relocate(species, .after = last_col()) |>\n            dplyr::filter(species == x),\n        gcns[[x]]$MEs\n    )\n    \n    return(d)\n    \n}) |>\n    bind_rows() |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    )\n\n# Plot distances\np_medist <- ggplot(me_dist, aes(x = ME_cor, y = type)) +\n    ggbeeswarm::geom_quasirandom(aes(color = type), alpha = 0.4) +\n    scale_color_manual(values = palette.colors()) +\n    ggh4x::facet_nested(~species + peak) +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg),\n        legend.position = \"none\"\n    ) +\n    scale_x_continuous(\n        limits = c(-1, 1),\n        breaks = seq(-1, 1, by = 0.5), \n        labels = c(-1, -0.5, 0, 0.5, 1)\n    ) +\n    labs(\n        x = expression(\"Spearman's\" ~ rho ~ \"between module eigengenes\"),\n        y = NULL,\n        title = \"Gene-gene similarities for pairs in different modules\",\n        subtitle = \"Similarities are measured by correlations between module eigengenes\"\n    )\n\np_medist\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_network-based_expression_divergence_files/figure-html/unnamed-chunk-12-1.png){width=2400}\n:::\n:::\n\n\nThe plot shows that, of the paralog pairs for which genes are in different \nmodules, such different modules are actually not so different, with mostly \nmoderate correlations between module eigengenes. Besides, for some\nspecies and duplication types, there was no or very few pairs classified\nas 'diverged', but most of the diverged pairs were included in the 'only one'\ncategory (i.e., only one gene was in the network, also indicating divergence).\nFor such category, the correlation between eigengenes would be non-existent,\nsince one of the genes is not in any module.\n\n## Node degree and duplication mode\n\nHere, we will test whether genes originating from different duplication\nmodes have significantly different degrees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get degree and duplication mode for each gene\nsp <- names(gcns)\ndegree_dup <- lapply(sp, function(x) {\n    \n    df <- gcns[[x]]$k |>\n        tibble::rownames_to_column(\"gene\") |>\n        dplyr::select(gene, k = kWithin) |>\n        inner_join(dup_pairs[[tolower(x)]]$gene, by = \"gene\") |>\n        mutate(species = x)\n    \n    return(df)\n}) |> \n    bind_rows() |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    )\n\n# Test for significant differences\ndegree_clds <- lapply(\n    split(degree_dup, degree_dup$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"k\"\n) |>\n    bind_rows(.id = \"species\") |>\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(50, 30, 150, 400, 40)\n        )\n    ) |>\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |>\n    dplyr::rename(type = Group)\n\n# Plot distributions\np_degree <- ggplot(degree_dup, aes(x = k, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_label(\n        data = degree_clds,\n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    labs(\n        title = \"Degree distributions and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P <0.05\",\n        x = \"Intramodular degree\", y = NULL\n    ) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n\np_degree\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_network-based_expression_divergence_files/figure-html/unnamed-chunk-14-1.png){width=2400}\n:::\n:::\n\n\nThe figure shows that genes originating from some duplication modes (e.g.,\nDNA tranposons, tandem, and segmental) tend to have overall higher\ndegree. However, there is no universal pattern across species. For instance,\nthere are no differences in degree by duplication mode in soybean. Likewise,\ngenes originating from tandem duplications have higher degree in orchid flowers\nand barley seeds, but not in other data sets.\n\nNext, we will test if hubs are overrepresented in genes from any\nparticular duplication mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Test for associations between hubs and genes from particular dup modes\n## Define helper function to perform ORA for duplication modes\nora_dupmode <- function(genes, dup_df) {\n    \n    df <- HybridExpress::ora(\n        genes = genes,\n        annotation = as.data.frame(dup_df),\n        background = dup_df$gene,\n        min_setsize = 2,\n        max_setsize = 1e8,\n        alpha = 1 # to get all P-values (and plot)\n    )\n    \n    return(df)\n}\n\n# Perform overrepresentation analysis for duplication modes\nsp <- names(gcns)\nhubs_dup <- lapply(sp, function(x) {\n    \n    df <- ora_dupmode(\n        genes = gcns[[x]]$hubs$Gene, \n        dup_df = dup_pairs[[tolower(x)]]$genes\n    ) |>\n        mutate(species = x)\n    \n    return(df)\n}) |>\n    bind_rows() |>\n    dplyr::select(species, type = term, genes, all, padj) |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    )\n\n# Plot results\np_ora_hubs_dup <- hubs_dup |>\n    mutate(\n        logP = -log10(padj),\n        significant = ifelse(padj < 0.05, TRUE, FALSE),\n        symbol = case_when(\n            padj <=0.05 & padj >0.01 ~ \"*\",\n            padj <=0.01 & padj >0.001 ~ \"**\",\n            padj <=0.001 ~ \"***\",\n            TRUE ~ \"\"\n        )\n    ) |>\n    ggplot(aes(x = genes, y = type)) +\n    geom_point(\n        aes(fill = type, size = logP, alpha = significant), \n        color = \"gray20\", pch = 21\n    ) +\n    scale_size(range = c(2, 7)) +\n    scale_alpha_manual(values = c(0.3, 1)) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_text(aes(label = symbol), vjust = -0.3, size = 5) +\n    facet_wrap(~species, nrow = 1) +\n    scale_x_continuous(limits = c(0, 800)) +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg)\n    ) +\n    guides(fill = \"none\", alpha = \"none\") +\n    labs(\n        title = \"Duplication mode of hub genes in coexpression networks\",\n        subtitle = \"Bright dots with asterisks indicate significant overrepresentation; P <0.05\",\n        x = \"Number of hub genes\", y = NULL,\n        size = expression(-Log[10] ~ italic(P))\n    )\n\np_ora_hubs_dup\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_network-based_expression_divergence_files/figure-html/unnamed-chunk-16-1.png){width=2400}\n:::\n:::\n\n\nThe figure shows that hubs are enriched in genes originating from\nsegmental duplications (in three out of five species) and transposed duplication\n(in one out of five species), suggesting that these duplication mechanisms\ntend to create genes with central roles.\n\n## Saving important objects {.unnumbered}\n\nLastly, we will save important objects and plots to be reused later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R objects\n## GCNs from pseudobulk data - one per species\nsaveRDS(\n    gcns, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"gcns_pseudobulk.rds\")\n)\n\n# Plots\n## Network-based expression divergence and duplication mode (barplot)\nsaveRDS(\n    p_diverged_gcn, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"network_based_divergence.rds\")\n)\n\n## Distribution of similarities between eigengenes for diverged pairs\nsaveRDS(\n    p_medist, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"ME_similarities_diverged_pairs.rds\")\n)\n\n## Degree distribution and duplication mode\nsaveRDS(\n    p_degree, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"degree_distro_by_duplication_mode.rds\")\n)\n\n## GCN hubs and duplication mode\nsaveRDS(\n    p_ora_hubs_dup, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"GCN_hubs_by_duplication_mode.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n annotate               1.82.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n AnnotationDbi          1.66.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n base64enc              0.1-3      2015-07-28 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23    2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1     2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n BioNERO              * 1.12.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1     2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5      2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5      2020-08-30 [1] CRAN (R 4.4.1)\n blob                   1.2.4      2023-03-17 [1] CRAN (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0      2024-05-16 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n checkmate              2.3.1      2023-12-04 [1] CRAN (R 4.4.1)\n circlize               0.4.16     2024-02-20 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n clue                   0.3-65     2023-09-23 [1] CRAN (R 4.4.1)\n cluster                2.1.6      2023-12-01 [1] CRAN (R 4.4.1)\n coda                   0.19-4.1   2024-01-31 [1] CRAN (R 4.4.1)\n codetools              0.2-20     2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n ComplexHeatmap         2.21.1     2024-09-24 [1] Github (jokergoo/ComplexHeatmap@0d273cd)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4     2024-03-30 [1] CRAN (R 4.4.1)\n DBI                    1.2.3      2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n dynamicTreeCut         1.63-1     2016-03-11 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1      2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n exdiva               * 0.99.0     2024-08-21 [1] Bioconductor\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastcluster            1.2.6      2024-01-12 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2      2022-02-02 [1] CRAN (R 4.4.1)\n foreign                0.8-87     2024-06-26 [1] CRAN (R 4.4.1)\n Formula                1.2-5      2023-02-24 [1] CRAN (R 4.4.1)\n genefilter             1.86.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GENIE3                 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n GetoptLong             1.0.5      2020-12-15 [1] CRAN (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggdendro               0.2.0      2024-02-23 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggnetwork              0.5.13     2024-02-14 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5      2024-01-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n GlobalOptions          0.1.2      2020-06-10 [1] CRAN (R 4.4.1)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n GO.db                  3.19.1     2024-07-24 [1] Bioconductor\n gridExtra              2.3        2017-09-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n Hmisc                  5.1-3      2024-05-28 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmlTable              2.4.3      2024-07-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3      2024-03-13 [1] CRAN (R 4.4.1)\n impute                 1.78.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n intergraph             2.0-4      2024-02-01 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14     2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1     2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4     2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10   2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n memoise                2.0.1      2021-11-26 [1] CRAN (R 4.4.1)\n mgcv                   1.9-1      2023-12-21 [1] CRAN (R 4.4.1)\n minet                  3.62.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n NetRep                 1.2.7      2023-08-19 [1] CRAN (R 4.4.1)\n network                1.18.2     2023-12-05 [1] CRAN (R 4.4.1)\n nlme                   3.1-165    2024-06-06 [1] CRAN (R 4.4.1)\n nnet                   7.3-19     2023-05-03 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n plyr                   1.8.9      2023-10-02 [1] CRAN (R 4.4.1)\n png                    0.1-8      2022-11-29 [1] CRAN (R 4.4.1)\n preprocessCore         1.66.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.4.1)\n RhpcBLASctl            0.23-42    2023-02-11 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rpart                  4.1.23     2023-12-05 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n RSQLite                2.3.7      2024-05-27 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n shape                  1.4.6.1    2024-02-23 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0      2023-01-06 [1] CRAN (R 4.4.1)\n statnet.common         4.9.0      2023-05-24 [1] CRAN (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n survival               3.7-0      2024-06-05 [1] CRAN (R 4.4.1)\n sva                    3.52.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n WGCNA                  1.72-5     2023-12-07 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XML                    3.99-0.17  2024-06-25 [1] CRAN (R 4.4.1)\n xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "05_network-based_expression_divergence_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}