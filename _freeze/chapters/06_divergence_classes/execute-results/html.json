{
  "hash": "9e48f0c738a3377486ff3199d9f773a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Classifying paralogs into divergence classes\n\nHere, we will compare relative expression breadths (i.e.,\nfrequency of cell types/spatial domains in which genes in a pair is expressed),\nas in @casneuf2006nonrandom, to assign paralogs to divergence classes.\n\nWe will start by loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(tidyverse)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e6) # to download large data files\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\n\n# Plot background\nbg <- grid::linearGradient(colorRampPalette(c(\"gray90\", \"white\"))(100))\n```\n:::\n\n\nWe will also load some required objects created in previous chapters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load `SpatialExperiment` objects\nath_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\"))\ngma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\"))\npap_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\"))\nzma_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\"))\nhvu_spe <- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\"))\nhvu_spe <- lapply(hvu_spe, function(x) return(x[, !is.na(x$tissue)]))\n\nspe_all <- list(\n    ath = ath_spe,\n    gma = gma_spe,\n    pap = pap_spe,\n    zma = zma_spe, \n    hvu = hvu_spe\n)\n\n# Read duplicated gene pairs with age-based group classifications\npairs_age <- readRDS(here(\"products\", \"result_files\", \"pairs_by_age_group.rds\"))\n```\n:::\n\n\n## Calculating relative expression breadths\n\nNow, we will calculate relative expression breadths. For a gene pair p,\nthe relative expression breadth of each gene g will be the number\nof spatial domains in which gene g is expressed, divided by the total number\nof domains in which either one of the genes in pair p is expressed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to calculate relative expression breadth\n\n#' Calculate relative expression breadth for each gene in each gene pair\n#' \n#' @param spe A SpatialExperiment object.\n#' @param pairs \n#' @param cell_type Character, name of the column with cell type information.\n#' @param min_prop Numeric, minimum proportion of non-zero spots to classify\n#' gene as detected. Default: 0.01.\n#' \n#' @return A data as in \\strong{pairs}, but with two extra variables \n#' named \\strong{reb1}, \\strong{reb2}.\n#'\ncalculate_reb <- function(spe, pairs, cell_type = \"cell_type\", min_prop = 0.01) {\n    \n    # Get cell types in which each gene is detected\n    prop_detected <- scuttle::aggregateAcrossCells(\n        spe, statistics = \"prop.detected\",\n        ids = spe[[cell_type]]\n    ) |>\n        assay()\n    \n    detected <- apply(prop_detected, 1, function(x) {\n        return(names(x[x >= min_prop]))\n    })\n\n    # Calculate relative expression breadth for each gene in each pair\n    rebs <- Reduce(rbind, lapply(seq_len(nrow(pairs)), function(x) {\n        \n        ct1 <- detected[[pairs$dup1[x]]]\n        ct2 <- detected[[pairs$dup2[x]]]\n        \n        n <- length(union(ct1, ct2))\n        eb_df <- data.frame(\n            reb1 = length(ct1) / n, \n            reb2 = length(ct2) / n\n        )\n        \n        return(eb_df)\n    }))\n    \n    final_pairs <- cbind(pairs, rebs)\n    \n    return(final_pairs)\n}\n\n# For each gene of a duplicate pair, calculate relative expression breadth\nrebs <- list(\n    Ath = lapply(spe_all$ath, calculate_reb, pairs = pairs_age$ath) |> \n        bind_rows(.id = \"sample\"),\n    Gma = lapply(spe_all$gma, calculate_reb, pairs = pairs_age$gma, cell_type = \"annotation\") |>\n        bind_rows(.id = \"sample\"),\n    Pap = lapply(spe_all$pap, calculate_reb, pairs = pairs_age$pap, cell_type = \"clusters\") |>\n        bind_rows(.id = \"sample\"),\n    Zma = lapply(spe_all$zma, calculate_reb, pairs = pairs_age$zma, cell_type = \"cell_type\") |>\n        bind_rows(.id = \"sample\"),\n    Hvu = lapply(spe_all$hvu, calculate_reb, pairs = pairs_age$hvu, cell_type = \"tissue\") |>\n        bind_rows(.id = \"sample\")\n)\nrebs <- bind_rows(rebs, .id = \"species\")\n\n# Get mean reb for each gene in a pair across samples\nmean_rebs <- rebs |>\n    mutate(pair = str_c(dup1, dup2, sep = \"_\")) |>\n    group_by(pair) |>\n    mutate(\n        mean_reb1 = mean(reb1, na.rm = TRUE),\n        mean_reb2 = mean(reb2, na.rm = TRUE)\n    ) |>\n    ungroup() |>\n    dplyr::select(-c(sample, reb1, reb2)) |>\n    distinct() |>\n    dplyr::select(-pair) |>\n    mutate(\n        species_peak = str_c(species, peak, sep = \" - peak \"),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    )\n```\n:::\n\n\nNext, we will visualize relative expression breadths for each gene pair by\nduplication mode using smoothed density representations of scatterplots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot smoother density representations of scatterplots\np_mean_reb <- ggplot(mean_rebs, aes(x = mean_reb1, y = mean_reb2)) +\n    stat_density_2d(\n        geom = \"raster\",\n        aes(fill = after_stat(density)),\n        contour = FALSE\n    ) +\n    scale_fill_gradient(low = \"#F7FBFF\", high = \"#08519C\") +\n    ggh4x::facet_nested(\n        cols = vars(type),\n        rows = vars(species, peak)\n    ) +\n    scale_x_continuous(\n        limits = c(0, 1), breaks = seq(0, 1, 0.5), labels = c(0, 0.5, 1), expand = c(0, 0)\n    ) +\n    scale_y_continuous(\n        limits = c(0, 1), breaks = seq(0, 1, 0.5), labels = c(0, 0.5, 1), expand = c(0, 0)\n    ) +\n    theme_classic() +\n    theme(panel.spacing = unit(0.2, \"cm\")) +\n    labs(\n        x = \"REB of gene 1\", y = \"REB of gene 2\", fill = \"Density\",\n        title = \"Relative expression breadth of paralogs\",\n        subtitle = \"Scatterplots are represented by their smoothed densities\"\n    )\n```\n:::\n\n\nThe figure shows that most duplicates diverge asymmetrically. However, for\nsome species (e.g., orchid and maize), a large fraction of segmental \nduplicates display redundancy at the expression level.\n\n## Comparing relative expression breadth by mode\n\nNext, we will classify gene pairs in three classes based on their\nrelative expression breadths, and then compare the number of genes in each\nclass by duplication mode. The classes and their definitions are:\n\n1. **Redundancy:** both pairs with REB >0.70.\n2. **Assymetric divergence:** one gene with REB >0.7, and the other gene\nwith REB <0.3.\n3. **Symmetric divergence:** both genes with REB between 0.3 and 0.7.\n\nWe will with the classification per se.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Classify pairs based on REB\nreb_classes <- mean_rebs |>\n    filter(\n        !is.nan(mean_reb1), \n        !is.na(mean_reb1), \n        !is.nan(mean_reb2), \n        !is.na(mean_reb2) \n    ) |>\n    mutate(\n        class = case_when(\n            mean_reb1 >0.7 & mean_reb2 >0.7 ~ \"Redundancy\",\n            mean_reb1 >0.7 & mean_reb2 <0.3 ~ \"Asymmetric\",\n            mean_reb2 >0.7 & mean_reb1 <0.3 ~ \"Asymmetric\",\n            mean_reb1 >0.3 & mean_reb1 <0.7 &\n                mean_reb2 > 0.3 & mean_reb2 <0.7 ~ \"Symmetric\",\n            TRUE ~ \"Undefined\"\n        )\n    ) |>\n    filter(class != \"Undefined\") |>\n    as.data.frame()\n```\n:::\n\n\nThen, we will test for significant associations between each class\nand duplication modes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Test for overrepresentation of REB classes in duplicates from each dup mode\nreb_classes_split <- split(reb_classes, reb_classes$species_peak)\nora_dupmode_class <- lapply(reb_classes_split, function(x) {\n    \n    # Get list of all duplicate pairs\n    dups <- x |>\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |>\n        select(pair, type)\n    \n    # Get a list of genes for each class\n    classes_list <- x |>\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |>\n        select(pair, class)\n    classes_list <- split(classes_list, classes_list$class)\n    \n    # Perform ORA\n    ora_dfs <- lapply(classes_list, function(y) {\n        \n        df <- HybridExpress::ora(\n            genes = unique(y$pair),\n            annotation = dups,\n            background = dups$pair,\n            min_setsize = 2,\n            max_setsize = 1e8,\n            alpha = 1\n        )\n        \n        return(df)\n    }) |>\n        bind_rows(.id = \"class\")\n    \n    return(ora_dfs)\n}) |>\n    bind_rows(.id = \"species_peak\")\n```\n:::\n\n\nNext, we will plot the frequencies of duplicates in each class by mode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot frequency of duplicates (by mode) in each class\np_reb_classes <- ora_dupmode_class |>\n    mutate(\n        genes = log10(genes + 1),\n        symbol = case_when(\n            padj > 0.05 ~ \"\",\n            padj > 0.01 ~ \"*\",\n            padj > 0.001 ~ \"**\",\n            !is.na(padj) ~ \"***\",\n            TRUE ~ NA_character_\n        ),\n        peak = str_replace_all(species_peak, \".* - peak \", \"\"),\n        species = str_replace_all(species_peak, \" - .*\", \"\"),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        term = factor(term, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        class = factor(class, levels = c(\"Redundancy\", \"Symmetric\", \"Asymmetric\"))\n    ) |>\n    ggplot(aes(x = term, y = class)) +\n    geom_tile(aes(fill = genes)) +\n    scale_fill_gradient(low = \"#E5F5E0\", high = \"#006D2C\") +\n    geom_text(aes(label = symbol)) +\n    ggh4x::facet_nested(\n        cols = vars(species, peak)\n    ) +\n    theme_classic() +\n    labs(\n        title = \"Expression divergence pattern and duplication mode\",\n        subtitle = \"Asterisks indicate significant overrepresentation; P <0.05\",\n        x = \"Duplication mode\", y = \"Divergence class\",\n        fill = expression(Log[10] ~ N)\n    ) +\n    theme(legend.position = \"bottom\")\n```\n:::\n\n\nThe figure shows that most pairs derived from small-scale duplications (TD, PD,\nTRD, and DD) are overrepresented in pairs with asymmetric divergence. Segmental\nduplicates (and sometimes transposed duplicates) are mostly overrepresented\nin pairs that display redundancy and symmetric divergence.\n\n## Saving objects {.unnumbered}\n\nFinally, we will save important objects to reuse later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Objects\n## Relative expression breadths\nsaveRDS(\n    rebs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"relative_expression_breadth.rds\")\n)\n\n# Plots\n## Smoothed densities of relative expression breadths\nsaveRDS(\n    p_mean_reb, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"smoothed_densities_relative_expression_breadth.rds\")\n)\n\n## ORA - duplication mode and divergence classes\nsaveRDS(\n    p_reb_classes, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"ORA_dupmode_and_divergence_class.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2025-03-01\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version date (UTC) lib source\n abind                  1.4-5   2016-07-21 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n cli                    3.6.3   2024-06-21 [1] CRAN (R 4.4.1)\n colorspace             2.1-0   2023-01-23 [1] CRAN (R 4.4.1)\n crayon                 1.5.3   2024-06-20 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1  2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36  2024-06-23 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4   2023-11-17 [1] CRAN (R 4.4.1)\n evaluate               0.24.0  2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6   2023-12-08 [1] CRAN (R 4.4.1)\n fastmap                1.2.0   2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0   2023-01-29 [1] CRAN (R 4.4.1)\n generics               0.1.3   2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1  2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12  2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1  2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggplot2              * 3.5.1   2024-04-23 [1] CRAN (R 4.4.1)\n glue                   1.7.0   2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5   2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1   2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3   2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1 2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4   2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7   2023-08-15 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1  2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8   2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48    2024-07-07 [1] CRAN (R 4.4.1)\n lattice                0.22-6  2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4   2023-11-07 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3   2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4   2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3   2022-03-30 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0   2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0   2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1   2024-04-01 [1] CRAN (R 4.4.1)\n pillar                 1.9.0   2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3   2019-09-22 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2   2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1   2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13  2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5   2024-01-10 [1] CRAN (R 4.4.1)\n rjson                  0.2.21  2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4   2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27    2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4   2023-11-05 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0  2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1   2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1  2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0   2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2   2021-12-06 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8   2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0  2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n stringi                1.8.4   2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1   2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0  2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1   2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1   2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1   2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0   2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0   2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0   2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4   2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5   2023-12-01 [1] CRAN (R 4.4.1)\n withr                  3.0.0   2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46    2024-07-18 [1] CRAN (R 4.4.1)\n XVector                0.44.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9   2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}