{
  "hash": "1700d00f056687eaa9481bbbec819755",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Obtaining duplicate genes and gene pairs\n\nIn this chapter, we will obtain duplicated gene pairs (classified by \nduplication mode) in the genomes of each species used in this project. \nIf duplicates are avaiable on doubletroubledb [@almeida2024doubletrouble],\nwe will simply download them, otherwise we will infer them *de novo*.\n\nTo start, let's load required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(doubletrouble)\nlibrary(syntenet)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e6)\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Retrieving duplicate pairs\n\nFirst, we will download duplicate pairs for species that are present\nin doubletroubledb.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A. thaliana ----\ndup_file <- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44689777\",\n    destfile = dup_file\n)\n\n## Genes\nath_dups <- readr::read_tsv(\n    unzip(dup_file, \"arabidopsis_thaliana_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |>\n    mutate(gene = str_replace_all(gene, \"ara_\", \"\")) |>\n    filter(!str_detect(gene, \"^ATC|^ATM\")) |>\n    as.data.frame()\n\n## Pairs\nath_pairs <- readr::read_tsv(\n    unzip(dup_file, \"arabidopsis_thaliana_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |>\n    mutate(\n        dup1 = str_replace_all(dup1, \"ara_\", \"\"),\n        dup2 = str_replace_all(dup2, \"ara_\", \"\")\n    ) |>\n    filter(!str_detect(dup1, \"^ATC|^ATM\")) |>\n    filter(!str_detect(dup2, \"^ATC|^ATM\")) |>\n    as.data.frame()\n    \n# Z. mays ----\ndup_file <- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44690185\",\n    destfile = dup_file\n)\n\n## Genes\nzma_dups <- readr::read_tsv(\n    unzip(dup_file, \"zea_mays_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |>\n    mutate(gene = str_replace_all(gene, \"zea_\", \"\")) |>\n    as.data.frame()\n\n## Pairs\nzma_pairs <- readr::read_tsv(\n    unzip(dup_file, \"zea_mays_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |>\n    mutate(\n        dup1 = str_replace_all(dup1, \"zea_\", \"\"),\n        dup2 = str_replace_all(dup2, \"zea_\", \"\")\n    ) |>\n    as.data.frame()\n    \n# G. max ----\ndup_file <- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44689888\",\n    destfile = dup_file\n)\n\n## Genes\ngma_dups <- readr::read_tsv(\n    unzip(dup_file, \"glycine_max_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |>\n    mutate(gene = str_replace_all(gene, \"^gly_\", \"\")) |>\n    as.data.frame()\n\n## Pairs\ngma_pairs <- readr::read_tsv(\n    unzip(dup_file, \"glycine_max_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |>\n    mutate(\n        dup1 = str_replace_all(dup1, \"^gly_\", \"\"),\n        dup2 = str_replace_all(dup2, \"^gly_\", \"\")\n    ) |>\n    as.data.frame()\n```\n:::\n\n\nNow, let's identify and classify duplicate pairs *de novo* for \nthe *P. aphrodite* genome using doubletrouble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get sequence and annotation for P. aphrodite and Amborella trichopoda (outgroup)\n## P. aphrodite\npap_annot <- rtracklayer::import(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_gene.gff.gz\"\n)\npap_annot$gene_id <- pap_annot$ID\n\npap_seq <- Biostrings::readAAStringSet(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_protein.fa.gz\"\n)\nnames(pap_seq) <- gsub(\".* gene=\", \"\", names(pap_seq))\ngenes <- intersect(names(pap_seq), pap_annot$gene_id[pap_annot$type == \"gene\"])\npap_seq <- pap_seq[genes]\n\n## A. trichopoda\natr_annot <- rtracklayer::import(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/gff3/amborella_trichopoda/Amborella_trichopoda.AMTR1.0.57.gff3.gz\"\n)\n\natr_seq <- Biostrings::readAAStringSet(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/fasta/amborella_trichopoda/pep/Amborella_trichopoda.AMTR1.0.pep.all.fa.gz\"\n)\nnames(atr_seq) <- gsub(\" .*\", \"\", gsub(\".*gene:\", \"\", names(atr_seq)))\n\natr_seq <- atr_seq[order(Biostrings::width(atr_seq), decreasing = TRUE), ]\natr_seq <- atr_seq[!duplicated(names(atr_seq)), ]\n\n# Create seq and annotation lists\nseq <- list(pap = pap_seq, atr = atr_seq)\nannot <- list(pap = pap_annot, atr = atr_annot)\n\n# Process input data\npdata <- syntenet::process_input(seq, annot, filter_annotation = TRUE)\n\n# Run DIAMOND to get whole paranome\ndiamond_intra <- syntenet::run_diamond(\n    seq = pdata$seq[\"pap\"],\n    compare = \"intraspecies\",\n    threads = 4,\n    ... = \"--sensitive\"\n)\n\n# Run DIAMOND search between orchid and outgroup\ndiamond_inter <- syntenet::run_diamond(\n    seq = pdata$seq,\n    compare = data.frame(query = \"pap\", outgroup = \"atr\"),\n    threads = 4,\n    ... = \"--sensitive\"\n)[\"pap_atr\"]\n\n# Get intron counts\ntxdb_list <- lapply(annot, GenomicFeatures::makeTxDbFromGRanges)\nic <- lapply(txdb_list, get_intron_counts)\n\n# Classify duplicate pairs\norchid_pairs <- classify_gene_pairs(\n    blast_list = diamond_intra,\n    annotation = pdata$annotation,\n    blast_inter = diamond_inter,\n    intron_counts = ic,\n    scheme = \"full\",\n    collinearity_dir = here(\"products\", \"result_files\")\n)[[1]]\n\norchid_dups <- classify_genes(list(pap = orchid_pairs))[[\"pap\"]]\n\n# Remove species IDs\npap_pairs <- orchid_pairs |>\n    mutate(\n        dup1 = str_replace_all(dup1, \"^pap_\", \"\"),\n        dup2 = str_replace_all(dup2, \"^pap_\", \"\")\n    )\n\npap_dups <- orchid_dups |>\n    mutate(gene = str_replace_all(gene, \"^pap_\", \"\"))\n```\n:::\n\n\n## Calculating substitution rates\n\nNext, we will also calculate substitution rates (Ks, Ka, and Ka/Ks) for \nduplicate pairs using *[doubletrouble](https://bioconductor.org/packages/3.19/doubletrouble)*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define function to clean (remove redundancy) in ENSEMBL-derived CDS\nensembl_longest_isoform <- function(proteome = NULL) {\n\n    pnames <- gsub(\".*gene:\", \"\", names(proteome))\n    pnames <- gsub(\" .*\", \"\", pnames)\n\n    names(proteome) <- pnames\n    proteome <- proteome[order(Biostrings::width(proteome), decreasing = TRUE),]\n    proteome <- proteome[!duplicated(names(proteome)), ]\n    return(proteome)\n}\n\n# A. thaliana ----\n## Get CDS\nath_cds <- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/arabidopsis_thaliana/cds/Arabidopsis_thaliana.TAIR10.cds.all.fa.gz\") |>\n    ensembl_longest_isoform()\nath_cds <- ath_cds[names(ath_cds) %in% unique(c(ath_pairs$dup1, ath_pairs$dup2))]\n\n## Calculate rates\nath_kaks <- pairs2kaks(\n    list(Ath = ath_pairs), list(Ath = ath_cds), threads = 4\n)$Ath\n\n# Glycine max ----\n## Get CDS\ngma_cds <- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/glycine_max/cds/Glycine_max.Glycine_max_v2.1.cds.all.fa.gz\") |>\n    ensembl_longest_isoform()\ngma_cds <- gma_cds[names(gma_cds) %in% unique(c(gma_pairs$dup1, gma_pairs$dup2))]\n\n## Calculate rates\ngma_kaks <- pairs2kaks(\n    gene_pairs_list = list(\n        gma = gma_pairs |>\n            mutate(\n                dup1 = str_c(\"gma_\", dup1), \n                dup2 = str_c(\"gma_\", dup2),\n            )\n    ),\n    cds = list(gma = gma_cds), \n    threads = 4\n)$gma\n\n\n# Z. mays ----\n## Get CDS\nzma_cds <- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/zea_mays/cds/Zea_mays.Zm-B73-REFERENCE-NAM-5.0.cds.all.fa.gz\") |>\n    ensembl_longest_isoform()\nzma_cds <- zma_cds[names(zma_cds) %in% unique(c(zma_pairs$dup1, zma_pairs$dup2))]\n\n## Calculate rates\nzma_kaks <- pairs2kaks(\n    gene_pairs_list = list(\n        zma = zma_pairs |>\n            mutate(\n                dup1 = str_c(\"zma_\", dup1), \n                dup2 = str_c(\"zma_\", dup2),\n            )\n    ),\n    cds = list(zma = zma_cds), \n    threads = 2\n)$zma\n\n# P. aphrodite ----\n## Get CDS\npap_cds <- Biostrings::readDNAStringSet(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_gene.fa.gz\"\n)\nnames(pap_cds) <- gsub(\".* gene=\", \"\", names(pap_cds))\nnames(pap_cds) <- gsub(\" .*\", \"\", names(pap_cds))\npap_cds <- pap_cds[order(Biostrings::width(pap_cds), decreasing = TRUE)]\npap_cds <- pap_cds[!duplicated(names(pap_cds))]\n\n## Calculate rates\npap_kaks <- pairs2kaks(\n    gene_pairs_list = list(\n        pap = pap_pairs |>\n            mutate(\n                dup1 = str_c(\"pap_\", dup1), \n                dup2 = str_c(\"pap_\", dup2),\n            )\n    ),\n    cds = list(pap = pap_cds), \n    threads = 4\n)$pap\n```\n:::\n\n\nFinally, we will use Ks values to split gene pairs by age groups, so that\nage is not a confounder when performing comparisons between duplication modes.\nHere, we will not use pairs with $K_s>2$ to avoid saturation at greater\n$K_s$ values. Based on previous literature, we will set pre-defined \nnumbers of $K_s$ peaks, which are:\n\n1. *Glycine max*: 2 peaks at $K_s$ ~0.1 and ~0.56.\n2. *Zea mays*: 1 peak at $K_s$ ~0.16.\n3. *Arabidopsis thaliana*: 1 peak at $K_s$ ~0.73.\n4. *Phalaenopsis aphrodite*: 1 peak at $K_s$ ~1.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First inspection to validate the number of peaks and where they are\nplot_ks_distro(gma_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\nplot_ks_distro(zma_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\nplot_ks_distro(ath_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\nplot_ks_distro(pap_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\n\n# Classify gene pairs by age groups\n## G. max - 2 peaks\ngma_peaks <- gma_kaks |>\n    filter(Ks <=2) |>\n    pull(Ks) |>\n    find_ks_peaks(npeaks = 2, max_ks = 1)\n\ngma_spairs <- split_pairs_by_peak(gma_kaks, peaks = gma_peaks) |>\n    purrr::pluck(1) |>\n    dplyr::select(1, 2, type = 6, 7)\n\n## Z. mays - 1 peak\nzma_peaks <- zma_kaks |>\n    filter(Ks <=2) |>\n    pull(Ks) |>\n    find_ks_peaks(npeaks = 1, max_ks = 1)\n\nzma_spairs <- split_pairs_by_peak(zma_kaks, peaks = zma_peaks) |>\n    purrr::pluck(1) |>\n    dplyr::select(1, 2, type = 6, 7)\n\n## A. thaliana - 1 peak\nath_peaks <- ath_kaks |>\n    filter(Ks <=2) |>\n    pull(Ks) |>\n    find_ks_peaks(npeaks = 1, max_ks = 1.5)\n\nath_spairs <- split_pairs_by_peak(ath_kaks, peaks = ath_peaks) |>\n    purrr::pluck(1) |>\n    dplyr::select(1, 2, type = 6, 7)\n\n## P. aphrodite\npap_peaks <- pap_kaks |>\n    filter(Ks <=2, type == \"SD\") |>\n    pull(Ks) |>\n    find_ks_peaks(npeaks = 1, max_ks = 2)\n\npap_spairs <- split_pairs_by_peak(pap_kaks, peaks = pap_peaks) |>\n    purrr::pluck(1) |>\n    dplyr::select(1, 2, type = 6, 7)\n\n# Create a single list with all classified duplicates and their age groups\npairs_byage <- list(\n    Gmax = gma_spairs,\n    Zmays = zma_spairs,\n    Athaliana = ath_spairs,\n    Paphrodite = pap_spairs\n)\n```\n:::\n\n\n## Saving objects to .rds files\n\nNow that we have classified duplicate gene pairs and genes, we will save them\nto separate .rds files for each species. Each .rds file will contain a list\nwith elements `pairs` and `genes` containing the duplicate pairs and genes,\nrespectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Store data frames in a list\nath_d <- list(pairs = ath_pairs, genes = ath_dups)\nzma_d <- list(pairs = zma_pairs, genes = zma_dups)\ngma_d <- list(pairs = gma_pairs, genes = gma_dups)\npap_d <- list(pairs = pap_pairs, genes = pap_dups)\n\n# Save objects to files\nsaveRDS(ath_d, compress = \"xz\", file = here(\"data\", \"ath_duplicates.rds\"))\nsaveRDS(zma_d, compress = \"xz\", file = here(\"data\", \"zma_duplicates.rds\"))\nsaveRDS(gma_d, compress = \"xz\", file = here(\"data\", \"gma_duplicates.rds\"))\nsaveRDS(pap_d, compress = \"xz\", file = here(\"data\", \"pap_duplicates.rds\"))\n\n# Save objects with rates\nsaveRDS(\n    ath_kaks, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"kaks_ath.rds\")\n)\n\nsaveRDS(\n    gma_kaks, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"kaks_gma.rds\")\n)\n\nsaveRDS(\n    zma_kaks, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"kaks_zma.rds\")\n)\n\nsaveRDS(\n    pap_kaks, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"kaks_pap.rds\")\n)\n\n# Save list of pairs classified by age groups\nsaveRDS(\n    pairs_byage, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"pairs_by_age_group.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2024-09-17\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.4.1)\n ade4                   1.7-22    2023-02-06 [1] CRAN (R 4.4.1)\n AnnotationDbi          1.66.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n ape                    5.8       2024-04-11 [1] CRAN (R 4.4.1)\n Biobase                2.64.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics           0.50.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocIO                 1.14.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23   2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1    2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1    2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.4.1)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.4.1)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0     2024-05-16 [1] CRAN (R 4.4.1)\n cli                    3.6.3     2024-06-21 [1] CRAN (R 4.4.1)\n coda                   0.19-4.1  2024-01-31 [1] CRAN (R 4.4.1)\n codetools              0.2-20    2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.4.1)\n crayon                 1.5.3     2024-06-20 [1] CRAN (R 4.4.1)\n curl                   5.2.1     2024-03-01 [1] CRAN (R 4.4.1)\n DBI                    1.2.3     2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1    2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36    2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.4.1)\n doubletrouble        * 1.4.1     2024-07-25 [1] Bioconductor\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.4.1)\n evaluate               0.24.0    2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.4.1)\n fastmap                1.2.0     2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.4.1)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb           1.40.1    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12    2024-07-24 [1] Bioconductor\n GenomicAlignments      1.40.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomicFeatures        1.56.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomicRanges          1.56.1    2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggnetwork              0.5.13    2024-02-14 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1     2024-04-23 [1] CRAN (R 4.4.1)\n glue                   1.7.0     2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5     2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1   2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7     2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3     2024-03-13 [1] CRAN (R 4.4.1)\n intergraph             2.0-4     2024-02-01 [1] CRAN (R 4.4.1)\n IRanges                2.38.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1    2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48      2024-07-07 [1] CRAN (R 4.4.1)\n lattice                0.22-6    2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.4.1)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61    2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0     2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics         1.16.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats            1.3.0     2024-04-11 [1] CRAN (R 4.4.1)\n mclust                 6.1.1     2024-04-29 [1] CRAN (R 4.4.1)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.4.1)\n MSA2dist               1.8.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n munsell                0.5.1     2024-04-01 [1] CRAN (R 4.4.1)\n network                1.18.2    2023-12-05 [1] CRAN (R 4.4.1)\n networkD3              0.4       2017-03-18 [1] CRAN (R 4.4.1)\n nlme                   3.1-165   2024-06-06 [1] CRAN (R 4.4.1)\n pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.4.1)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.4.1)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.4.1)\n pwalign                1.0.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13    2024-07-17 [1] CRAN (R 4.4.1)\n RCurl                  1.98-1.16 2024-07-11 [1] CRAN (R 4.4.1)\n readr                * 2.1.5     2024-01-10 [1] CRAN (R 4.4.1)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.4.1)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4     2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27      2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.4.1)\n Rsamtools              2.20.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n RSQLite                2.3.7     2024-05-27 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0    2024-03-24 [1] CRAN (R 4.4.1)\n rtracklayer            1.64.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n S4Arrays               1.4.1     2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors              0.42.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.4.1)\n seqinr                 4.2-36    2023-12-08 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.4.1)\n SparseArray            1.4.8     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n statnet.common         4.9.0     2023-05-24 [1] CRAN (R 4.4.1)\n stringi                1.8.4     2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment   1.34.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n syntenet             * 1.6.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1     2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1     2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0     2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.4.1)\n withr                  3.0.0     2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46      2024-07-18 [1] CRAN (R 4.4.1)\n XML                    3.99-0.17 2024-06-25 [1] CRAN (R 4.4.1)\n XVector                0.44.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9     2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}