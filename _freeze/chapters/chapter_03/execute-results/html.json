{
  "hash": "c2ccec2b3d2d02be89024b0dfc5c00bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Identification of spatially variable genes (SVGs)\n\nIn this chapter, we will identify spatially variable genes (SVGs)\nand investigate a potential association between duplication mode and spatial\ngene expression variability.\n\nTo start, let's load required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SpatialExperiment)\nlibrary(SummarizedExperiment)\nlibrary(DESpace)\nlibrary(patchwork)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e6) # to download large data files\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\n```\n:::\n\n\nLet's also load the `SpatialExperiment` objects created in chapter 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load `SpatialExperiment` objects\nath_spe <- readRDS(here(\"products\", \"result_files\", \"spe_ath.rds\"))\ngma_spe <- readRDS(here(\"products\", \"result_files\", \"spe_gma.rds\"))\npap_spe <- readRDS(here(\"products\", \"result_files\", \"spe_pap.rds\"))\nzma_spe <- readRDS(here(\"products\", \"result_files\", \"spe_zma.rds\"))\n```\n:::\n\n\nWe will also need the duplicate pairs and genes obtained in chapter 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load duplicate pairs and genes\nath_dups <- readRDS(here(\"data\", \"ath_duplicates.rds\"))\ngma_dups <- readRDS(here(\"data\", \"gma_duplicates.rds\"))\npap_dups <- readRDS(here(\"data\", \"pap_duplicates.rds\"))\nzma_dups <- readRDS(here(\"data\", \"zma_duplicates.rds\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Inferring SVGs\n\nNow, we will identify SVGs using DESpace [@cai2024despace] using cell types\nas spatial clusters. Genes will be considered SVGs if FDR <0.05.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to identify SVGs with DESpace\nget_svg <- function(spe, spatial_cluster = \"clusters\") {\n    \n    # Get gene-wise test statistics\n    res <- DESpace_test(\n        spe = spe,\n        spatial_cluster = spatial_cluster,\n        replicates = FALSE,\n        min_counts = 1,\n        min_non_zero_spots = 5\n    )\n    gc()\n    \n    # Get a data frame of test statistics for significant SVGs\n    res_df <- res$gene_results |>\n        as.data.frame() |>\n        dplyr::filter(!is.na(FDR), FDR <= 0.05)\n    \n    return(res_df)\n}\n\n# Identify SVGs\nath_svg <- lapply(ath_spe, get_svg, spatial_cluster = \"cell_type\")\npap_svg <- lapply(pap_spe, get_svg, spatial_cluster = \"clusters\")\ngma_svg <- lapply(gma_spe, get_svg, spatial_cluster = \"Tissue\")\nzma_svg <- lapply(zma_spe, get_svg, spatial_cluster = \"cell_type\")\n```\n:::\n\n\n## Duplication mode of SVGs\n\nNow, we will test if SVGs are enriched in duplicated genes from a particular\nduplication mode (as in the 'full' classification scheme \nof *[doubletrouble](https://bioconductor.org/packages/3.19/doubletrouble)*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to perform ORA for duplication modes\nora_dupmode <- function(svg_df, dup_df) {\n    \n    df <- HybridExpress::ora(\n        genes = svg_df$gene_id,\n        annotation = as.data.frame(dup_df),\n        background = dup_df$gene,\n        min_setsize = 2,\n        max_setsize = 1e8\n    )\n    \n    return(df)\n}\n\n# Perform overrepresentation analysis for duplication modes\nora_ath <- lapply(ath_svg, ora_dupmode, ath_dups$genes)\nora_pap <- lapply(pap_svg, ora_dupmode, pap_dups$genes)\nora_gma <- lapply(gma_svg, ora_dupmode, gma_dups$genes)\nora_zma <- lapply(zma_svg, ora_dupmode, zma_dups$genes)\n\n# Combine results into a single data frame\nora_svg_dup <- bind_rows(\n    bind_rows(ora_ath, .id = \"sample\") |> mutate(species = \"A. thaliana\"),\n    bind_rows(ora_pap, .id = \"sample\") |> mutate(species = \"P. aphrodite\"),\n    bind_rows(ora_gma, .id = \"sample\") |> mutate(species = \"G. max\"),\n    bind_rows(ora_zma, .id = \"sample\") |> mutate(species = \"Z. mays\")\n) |>\n    dplyr::select(species, sample, type = term, genes, all, padj)\n\nora_svg_dup\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        species         sample type genes   all          padj\n1   A. thaliana S1-1_stereoseq   SD   224  7465  2.664747e-11\n2   A. thaliana S1-2_stereoseq   SD   190  7465  6.207483e-08\n3   A. thaliana S1-3_stereoseq   SD    96  7465  4.434730e-03\n4   A. thaliana S1-4_stereoseq dTRD    56  3354  1.737485e-02\n5   A. thaliana S1-4_stereoseq   SD   111  7465  1.737485e-02\n6   A. thaliana S1-6_stereoseq   SD   116  7465  1.773350e-02\n7   A. thaliana S2-1_stereoseq   SD   261  7465  3.752886e-06\n8   A. thaliana S2-4_stereoseq dTRD    60  3354  2.036169e-02\n9   A. thaliana S2-5_stereoseq   SD    87  7465  2.693219e-03\n10  A. thaliana S2-6_stereoseq   SD   224  7465  3.668721e-06\n11  A. thaliana S2-7_stereoseq   SD   143  7465  1.370326e-04\n12  A. thaliana S3-1_stereoseq   SD   122  7465  2.410767e-03\n13  A. thaliana S3-3_stereoseq   SD   131  7465  6.362764e-04\n14  A. thaliana S3-5_stereoseq   SD    90  7465  2.363598e-02\n15  A. thaliana S3-6_stereoseq   SD   126  7465  1.008518e-02\n16  A. thaliana S3-7_stereoseq   SD   124  7465  6.757708e-04\n17  A. thaliana S4-1_stereoseq   SD   108  7465  4.753633e-03\n18  A. thaliana S4-2_stereoseq   SD   163  7465  3.796526e-03\n19  A. thaliana S4-3_stereoseq dTRD    51  3354  3.007211e-02\n20  A. thaliana S4-4_stereoseq   SD   136  7465  3.519290e-02\n21  A. thaliana S4-5_stereoseq dTRD    67  3354  3.877747e-03\n22  A. thaliana S4-6_stereoseq   SD   172  7465  3.973434e-05\n23  A. thaliana S4-7_stereoseq dTRD    95  3354  6.914069e-03\n24  A. thaliana S4-7_stereoseq   SD   203  7465  1.273392e-04\n25 P. aphrodite     GSM5939574   SD   968  1306 3.500838e-120\n26 P. aphrodite     GSM5939574 rTRD   456   677  8.396234e-38\n27 P. aphrodite     GSM5939574 dTRD  3159  4046  0.000000e+00\n28 P. aphrodite     GSM5939575   SD   860  1306  6.341079e-94\n29 P. aphrodite     GSM5939575 rTRD   396   677  1.356357e-26\n30 P. aphrodite     GSM5939575 dTRD  2850  4046  0.000000e+00\n31 P. aphrodite     GSM5939576   SD   964  1306 7.850945e-121\n32 P. aphrodite     GSM5939576 rTRD   450   677  2.402648e-36\n33 P. aphrodite     GSM5939576 dTRD  3172  4046  0.000000e+00\n34       G. max  OMIX002290-01   SD  8235 36994  0.000000e+00\n35      Z. mays  MaizeEar_rep3 dTRD  1338  3234  4.230074e-07\n36      Z. mays  MaizeEar_rep3   SD  6552 12270  0.000000e+00\n37      Z. mays  MaizeEar_rep4 dTRD  1630  3234  7.406471e-14\n38      Z. mays  MaizeEar_rep4   SD  7657 12270  0.000000e+00\n```\n\n\n:::\n:::\n\n\nInterestingly, SVGs are enriched in SD-derived genes in most of the samples\nand in TRD-derived genes in some samples, revealing an association between \nthese duplication modes and spatial variability in expression. \n\nNext, let's create a data frame summarizing the frequency of SVGs per \nduplication mode, highlighting overrepresented results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to get frequency of SVGs per duplication mode\nget_dup_freqs <- function(svg_list, dup_df, ora_df) {\n    \n    freq_df <- lapply(svg_list, function(x) {\n        \n        df <- left_join(x, dup_df, by = c(\"gene_id\" = \"gene\")) |>\n            drop_na(type) |>\n            group_by(type) |>\n            summarise(n = n()) |>\n            as.data.frame()\n        \n        return(df)\n    }) |>\n        bind_rows(.id = \"sample\") |>\n        left_join(ora_df |> select(sample, type, padj)) |>\n        mutate(\n            symbol = case_when(\n                padj > 0.05 ~ \"\",\n                padj > 0.01 ~ \"*\",\n                padj > 0.001 ~ \"**\",\n                !is.na(padj) ~ \"***\",\n                TRUE ~ NA_character_\n            )\n        )\n    \n    return(freq_df)\n}\n\n# Get frequency of SVGs per duplication mode\nsvg_dupmode_freqs <- bind_rows(\n    get_dup_freqs(ath_svg, ath_dups$genes, ora_svg_dup) |> \n        mutate(species = \"ath\"),\n    get_dup_freqs(pap_svg, pap_dups$genes, ora_svg_dup) |>\n        mutate(species = \"pap\"),\n    get_dup_freqs(gma_svg, gma_dups$genes, ora_svg_dup) |>\n        mutate(species = \"gma\"),\n    get_dup_freqs(zma_svg, zma_dups$genes, ora_svg_dup) |>\n        mutate(species = \"zma\")\n) |>\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    ) |>\n    distinct()\n```\n:::\n\n\nNow, let's visualize results as a heatmap with cells colored by scaled\ncounts (by mode) and significance asterisks highlighted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a wide matrix with dup modes in rows and samples in columns\npdata_freq <- svg_dupmode_freqs |>\n    mutate(sample = str_c(species, sample, sep = \"_\")) |>\n    select(sample, type, n) |>\n    pivot_wider(names_from = sample, values_from = n) |>\n    tibble::column_to_rownames(\"type\") |>\n    as.matrix()\npdata_freq[is.na(pdata_freq)] <- 0\n\n# Create a character matrix (wide format) with significance (*) by mode\npdata_sig <- svg_dupmode_freqs |>\n    mutate(\n        sample = str_c(species, sample, sep = \"_\"),\n        symbol = replace_na(symbol, \"\")\n    ) |>\n    select(sample, type, symbol) |>\n    pivot_wider(names_from = sample, values_from = symbol) |>\n    tibble::column_to_rownames(\"type\") |>\n    as.matrix()\npdata_sig[is.na(pdata_sig)] <- \"\"\n\n# Create colors lists\ncoldata <- svg_dupmode_freqs |>\n    select(sample, species) |>\n    mutate(\n        species = str_replace_all(\n            species,\n            c(\n                \"ath\" = \"A. thaliana\", \n                \"pap\" = \"P. aphrodite\", \n                \"gma\" = \"G. max\",\n                \"zma\" = \"Z. mays\"\n            )\n        )\n    ) |>\n    distinct() |>\n    tibble::column_to_rownames(\"sample\") |>\n    dplyr::rename(Species = species)\n\ncols <- list(\n    Species = setNames(\n        ggsci::pal_jama()(length(unique(coldata$Species))),\n        unique(coldata$Species)\n    )\n)\n\n# Plot heatmap\npal <- colorRampPalette(RColorBrewer::brewer.pal(9, \"Blues\")[1:7])(100)\np_heatmap <- ComplexHeatmap::pheatmap(\n    pdata_freq,\n    display_numbers = pdata_sig,\n    color = pal,\n    annotation_col = coldata,\n    annotation_colors = cols,\n    name = \"Scaled counts\", # note: column scaled\n    main = \"Frequency of SVGs by duplication mode\",\n    show_colnames = FALSE,\n    border_color = \"white\",\n    cluster_rows = FALSE, cluster_cols = FALSE,\n    scale = \"column\"\n)\n\np_heatmap\n```\n\n::: {.cell-output-display}\n![](chapter_03_files/figure-html/unnamed-chunk-7-1.png){width=2400}\n:::\n:::\n\n\n\n## Saving objects {.unnumbered}\n\nFinally, we will save important objects to reuse later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save objects as .rds files\n## SVGs\nsaveRDS(\n    ath_svg, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"svgs_ath.rds\")\n)\n\nsaveRDS(\n    pap_svg, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"svgs_pap.rds\")\n)\n\nsaveRDS(\n    gma_svg, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"svgs_gma.rds\")\n)\n\nsaveRDS(\n    zma_svg, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"svgs_zma.rds\")\n)\n\n## Data frame with ORA results - duplication mode and SVGs\nsaveRDS(\n    ora_svg_dup, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"ORA_svg_and_duplication_mode.rds\")\n)\n\n## Frequency of SVGs per duplication mode in each sample and species\nsaveRDS(\n    svg_dupmode_freqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"svg_frequency_by_dupmode.rds\")\n)\n\n# Save plots\nsaveRDS(\n    p_heatmap, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"heatmap_svgs_by_dupmode.rds\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2024-09-17\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n abind                  1.4-5    2016-07-21 [1] CRAN (R 4.4.1)\n assertthat             0.2.1    2019-03-21 [1] CRAN (R 4.4.1)\n backports              1.5.0    2024-05-23 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23  2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1   2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n broom                  1.0.6    2024-05-17 [1] CRAN (R 4.4.1)\n Cairo                  1.6-2    2023-11-28 [1] CRAN (R 4.4.1)\n car                    3.1-2    2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5    2022-01-06 [1] CRAN (R 4.4.1)\n circlize               0.4.16   2024-02-20 [1] CRAN (R 4.4.1)\n cli                    3.6.3    2024-06-21 [1] CRAN (R 4.4.1)\n clue                   0.3-65   2023-09-23 [1] CRAN (R 4.4.1)\n cluster                2.1.6    2023-12-01 [1] CRAN (R 4.4.1)\n codetools              0.2-20   2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0    2023-01-23 [1] CRAN (R 4.4.1)\n ComplexHeatmap         2.20.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n cowplot                1.1.3    2024-01-22 [1] CRAN (R 4.4.1)\n crayon                 1.5.3    2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4   2024-03-30 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1   2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DESeq2                 1.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n DESpace              * 1.4.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36   2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17   2022-02-07 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4    2023-11-17 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1    2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0   2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6    2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2    2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0    2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0    2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2    2022-02-02 [1] CRAN (R 4.4.1)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1   2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12   2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1   2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n GetoptLong             1.0.5    2020-12-15 [1] CRAN (R 4.4.1)\n ggforce                0.4.2    2024-02-19 [1] CRAN (R 4.4.1)\n ggnewscale             0.5.0    2024-07-19 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1    2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0    2023-02-10 [1] CRAN (R 4.4.1)\n ggsci                  3.2.0    2024-06-18 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4    2022-10-13 [1] CRAN (R 4.4.1)\n GlobalOptions          0.1.2    2020-06-10 [1] CRAN (R 4.4.1)\n glue                   1.7.0    2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5    2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3    2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1  2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4    2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7    2023-08-15 [1] CRAN (R 4.4.1)\n HybridExpress          1.0.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n IRanges              * 2.38.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14   2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8    2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48     2024-07-07 [1] CRAN (R 4.4.1)\n lattice                0.22-6   2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4    2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4   2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10 2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3    2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4    2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61   2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0    2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0    2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1    2024-04-01 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0    2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0    2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.4.1)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.4.1)\n polyclip               1.10-7   2024-07-23 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2    2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3    2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13   2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5    2024-01-10 [1] CRAN (R 4.4.1)\n rjson                  0.2.21   2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4    2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27     2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4    2023-11-05 [1] CRAN (R 4.4.1)\n rstatix                0.7.2    2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0   2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1    2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0    2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.4.1)\n shape                  1.4.6.1  2024-02-23 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0    2023-01-06 [1] CRAN (R 4.4.1)\n stringi                1.8.4    2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1    2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1    2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1    2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1    2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0    2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0    2024-01-18 [1] CRAN (R 4.4.1)\n tweenr                 2.0.3    2024-02-26 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0    2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4    2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5    2023-12-01 [1] CRAN (R 4.4.1)\n withr                  3.0.0    2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46     2024-07-18 [1] CRAN (R 4.4.1)\n XVector                0.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9    2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "chapter_03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}