---
execute: 
  echo: true
  eval: false
  warning: false
---

# Spatial transcriptomic data acquisition

In this chapter, we will describe the code used to obtain the data sets 
used in this project. The data sets are:

1. Arabidopsis leaves [@xia2022single]. In this study,
authors obtained 26 samples of cauline leaves from *Arabidopsis thaliana*.

2. Orchid flowers [@liu2022spatiotemporal]. In this study, authors obtained
three samples from different sections of developing flowers from 
*Phalaenopsis aphrodite*.

3. Maize ear primordia (STOmics DB, STDS0000236). In this study, authors
obtained four samples from developing maize ear primordia.

4. Soybean nodules [@liu2023integrated]. In this study, authors
obtained a sample from soybean nodules

To start, let's load required packages.

```{r here}
#| message: false
#| eval: true

library(here)
library(SpatialExperiment)
library(SummarizedExperiment)
library(DropletUtils)
library(BayesSpace)
library(tidyverse)

set.seed(123) # for reproducibility
options(timeout = 1e10) # to download large data files

# Load helper functions
source(here("code", "utils.R"))
```

## Data acquisition

Now, we will download data as H5AD files and store them in a local directory.
Each data set will be stored in a separate subdirectory. Then, we will create
*.rds* files for each data set containing lists of `SpatialExperiment` 
objects.

### Arabidopsis leaves (Xia et al. 2022. *Developmental Cell*)

Data will be obtained from the ftp repository of STOmics DB.

```{r}
#| eval: false

# Create a vector with file names
base_url <- "https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000104/stomics"
samples <- c(
    "S1-1_stereoseq.h5ad", "S1-2_stereoseq.h5ad", "S1-3_stereoseq.h5ad", 
    "S1-4_stereoseq.h5ad", "S1-5_stereoseq.h5ad", "S1-6_stereoseq.h5ad", 
    "S1-7_stereoseq.h5ad", "S2-1_stereoseq.h5ad", "S2-3_stereoseq.h5ad", 
    "S2-4_stereoseq.h5ad", "S2-5_stereoseq.h5ad", "S2-6_stereoseq.h5ad", 
    "S2-7_stereoseq.h5ad", "S3-1_stereoseq.h5ad", "S3-2_stereoseq.h5ad", 
    "S3-3_stereoseq.h5ad", "S3-5_stereoseq.h5ad", "S3-6_stereoseq.h5ad", 
    "S3-7_stereoseq.h5ad", "S4-1_stereoseq.h5ad", "S4-2_stereoseq.h5ad", 
    "S4-3_stereoseq.h5ad", "S4-4_stereoseq.h5ad", "S4-5_stereoseq.h5ad", 
    "S4-6_stereoseq.h5ad", "S4-7_stereoseq.h5ad"
)
names(samples) <- gsub("\\.h5ad", "", basename(samples))

# Download files
outdir <- "~/Documents/PlantSpatialDiv_data/arabidopsis"
downloads <- unlist(lapply(samples, function(x) {
    
    fpath <- file.path(base_url, x)
    d <- tryCatch(
        download.file(url = fpath, destfile = file.path(outdir, x)),
        error = function(e) NA
    )

    return(d)
}))
```

Now, creating `SpatialExperiment` objects.

```{r}
# List files
files <- list.files(outdir, full.names = TRUE)
names(files) <- gsub("\\.h5ad", "", basename(files))

# Create and preprocess `SpatialExperiment` objects
ath_spe <- lapply(files, stomics2spe)
ath_spe <- lapply(ath_spe, process_spe, min_exp = c(1, 0.1))

# Save object to RDS file
saveRDS(
    ath_spe, compress = "xz", 
    file = here("products", "result_files", "spe_ath.rds")
)
```

### Orchid flowers (Liu et al. 2022. *Nucleic Acids Research*)

We will download data from STOmics DB.

```{r}
#| eval: false

# Create a vector with file URLs
base_url <- "https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000149/stomics"
samples <- c(
    "STSP0000011/GSM5939574.h5ad",
    "STSP0000012/GSM5939575.h5ad",
    "STSP0000013/GSM5939576.h5ad",
    "STSP0000011/GSM5939574_processed.h5ad",
    "STSP0000012/GSM5939575_processed.h5ad",
    "STSP0000013/GSM5939576_processed.h5ad"
)
names(samples) <- gsub("\\.h5ad", "", basename(samples))

# Download files
outdir <- "~/Documents/PlantSpatialDiv_data/orchid"
downloads <- unlist(lapply(samples, function(x) {
    
    fpath <- file.path(base_url, x)
    d <- tryCatch(
        download.file(url = fpath, destfile = file.path(outdir, x)),
        error = function(e) NA
    )

    return(d)
}))
```

Now, creating `SpatialExperiment` objects.

```{r}
# List files
files <- list.files(outdir, full.names = TRUE)
names(files) <- gsub("\\.h5ad", "", basename(files))

# Create and preprocess `SpatialExperiment` objects
processed <- files[grepl("processed", files)]
unprocessed <- files[!grepl("processed", files)]

pap_spe <- lapply(seq_along(processed), function(x) {
    
    un <- stomics2spe(unprocessed[x], remote = FALSE)
    proc <- stomics2spe(processed[x], remote = FALSE)
    
    # Add column `clusters` to unprocessed data
    un$clusters <- proc$clusters
    
    return(un)
})
names(pap_spe) <- gsub("\\.h5ad", "", basename(unprocessed))

pap_spe <- lapply(
    pap_spe, process_spe, 
    min_exp = c(1, 0.1), domain_col = "clusters"
)

# Save object to RDS file
saveRDS(
    pap_spe, compress = "xz", 
    file = here("products", "result_files", "spe_pap.rds")
)
```

### Maize ear primordia (Wang et al. 2024. *Nature Plants*)

First, we will download H5AD files from STOmics DB.

```{r}
# Create a vector with file URLs
burl <- "https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000236/stomics"
samples <- c(
    "STSP0007368/MaizeEar_rep3_Impute.h5ad",
    "STSP0007369/MaizeEar_rep4_Impute.h5ad"
)
names(samples) <- gsub("\\.h5ad", "", basename(samples))

# Download files
outdir <- "~/Documents/PlantSpatialDiv_data/maize_ear"
downloads <- unlist(lapply(samples, function(x) {
    
    fpath <- file.path(burl, x)
    d <- tryCatch(
        download.file(url = fpath, destfile = file.path(outdir, x)),
        error = function(e) NA
    )

    return(d)
}))
```

Now, downloading raw .gem files from STOmicsDB to obtain raw (i.e., 
non-normalized) counts.

```{r}
# Create a vector with file URLs
samples <- c(
    "STSP0007368/MaizeEar_rep3_Raw_bin50.gem",
    "STSP0007369/MaizeEar_rep4_Raw_bin50.gem"
)
names(samples) <- gsub("\\.gem", "", basename(samples))

downloads <- unlist(lapply(samples, function(x) {
    
    fpath <- file.path(burl, x)
    d <- tryCatch(
        download.file(url = fpath, destfile = file.path(outdir, basename(x))),
        error = function(e) NA
    )

    return(d)
}))
```

Next, creating `SpatialExperiment` objects.

```{r}
# Create a data frame with paths to H5AD and .gem files
f <- list.files("~/Documents/PlantSpatialDiv_data/maize_ear", full.names = TRUE)
maize_paths <- data.frame(
    Sample = c("MaizeEar_rep3", "MaizeEar_rep4"),
    H5AD = f[endsWith(f, "h5ad")],
    gem = f[endsWith(f, "gem")]
)

### For each sample, read processed and unprocessed data, and combine them
zma_spe <- lapply(seq_len(nrow(maize_paths)), function(x) {
    
    # Read H5AD file as `SpatialExperiment`
    spe <- stomics2spe(maize_paths$H5AD[x], remote = FALSE)
    assay(spe, "logcounts") <- NULL
    
    # Read .gem file with raw counts and match spots to cols of `un`
    coords <- spatialCoords(spe) |>
        as.data.frame() |>
        tibble::rownames_to_column("spot_id")
    
    gem <- readr::read_tsv(
        maize_paths$gem[x], 
        show_col_types = FALSE
    ) |>
        dplyr::right_join(coords, by = c("x" = "x_coord", "y" = "y_coord")) |>
        dplyr::arrange(spot_id) |>
        dplyr::select(geneID, spot_id, MIDCount) |>
        tidyr::pivot_wider(
            names_from = spot_id, values_from = MIDCount, values_fill = 0
        ) |>
        tibble::column_to_rownames("geneID") |>
        as.matrix()
        
    gem <- as(gem, "dgCMatrix")
    gem <- gem[, colnames(spe)]
    gem <- gem[rownames(spe), ]
    
    # Replace the 'counts' assay of `spe` with new matrix
    assay(spe, "counts") <- gem
    
    # Add 'logcounts' assay
    spe <- scater::computeLibraryFactors(spe)
    spe <- scater::logNormCounts(spe)
    
    return(spe)
})
names(zma_spe) <- maize_paths$Sample

zma_spe <- lapply(
    zma_spe, process_spe, 
    min_exp = c(1, 0.1), domain_col = "cell_type"
)

# Save object to RDS file
saveRDS(
    zma_spe, compress = "xz", 
    file = here("products", "result_files", "spe_zma.rds")
)
```


### Soybean nodules (Liu et al. 2023. *Nature Plants*)

First, we will download H5AD files from OMIX.

```{r}
# Download H5AD files
sample_urls <- c(
    "https://download.cncb.ac.cn/OMIX/OMIX002290/OMIX002290-01.h5ad"
)
names(sample_urls) <- gsub("\\.h5ad", "", basename(sample_urls))

lapply(seq_along(sample_urls), function(x) {
    
    url <- sample_urls[x]
    outfile <- file.path(
        "~/Documents/PlantSpatialDiv_data/soybean", basename(url)
    )
    
    d <- tryCatch(
        download.file(url = url, destfile = outfile),
        error = function(e) NA
    )
    
    return(d)
})
```

Now, creating `SpatialExperiment` objects.

```{r}
# List files
files <- list.files("~/Documents/PlantSpatialDiv_data/soybean", full.names = TRUE)
names(files) <- gsub("\\.h5ad", "", basename(files))

# Create and preprocess `SpatialExperiment` objects
gma_spe <- lapply(files, function(x) {
    
    ### Read H5AD file as a SingleCellExperiment object
    sce <- zellkonverter::readH5AD(x)
    
    ### Convert SingleCellExperiment to SpatialExperiment
    coords <- as.matrix(SingleCellExperiment::reducedDim(sce, "spatial"))
    colnames(coords) <- c("x_coord", "y_coord")
    
    spe <- SpatialExperiment::SpatialExperiment(
        assays = list(counts = assay(sce, "raw")),
        colData = SummarizedExperiment::colData(sce),
        rowData = SummarizedExperiment::rowData(sce),
        spatialCoords = coords
    )
    
    ### Add 'logcounts' assay
    spe <- scater::computeLibraryFactors(spe)
    spe <- scater::logNormCounts(spe)
    
    ### Process the `SpatialExperiment` object
    spe <- process_spe(spe, min_exp = c(1, 0.1), domain_col = "Tissue")
    
    return(spe)
})

# Saving objects to RDS files
saveRDS(
    gma_spe, compress = "xz", 
    file = here("products", "result_files", "spe_gma.rds")
)
```


### Germinating barley seeds (Peirats-Llobet et al. 2023. *NAR*)

First, let's obtain data from GEO (accession *GSE218970*).

```{bash}
#| eval: false

# Download .tar file from GEO
wget https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE218970&format=file
tar -zxvf GSE218970_RAW.tar

# Extract all files in subdirectory
cd GSE218970_RAW
for file in *.tar.gz; do 
    mkdir -p "${file%.tar.gz}/outs" && 
    tar -xzf "$file" -C "${file%.tar.gz}/outs" --strip-components=1; 
done
```

Now, let's read all files as `SpatialExperiment` objects.

```{r}
# List directories with `spatial/` subdir (some don't have it)
dirs <- list.dirs(
    path = "~/Downloads/GSE218970_RAW", full.names = TRUE, recursive = FALSE
)
dirs <- dirs[!grepl("test", dirs)]

keep_idx <- which(sapply(dirs, function(x) {
    file.exists(file.path(x, "outs/spatial", "tissue_positions_list.csv"))
}) == TRUE)
dirs <- dirs[keep_idx]

# Define function to read SpaceRanger output as a `SpatialExperiment` obj
spaceranger2spe <- function(dir) {
    
    # Create `SpatialExperiment` and add 'spatialCoords' slot
    spe <- SpatialExperiment::read10xVisium(
        samples = dir,
        type = "sparse", data = "filtered",
        images = "lowres", load = FALSE
    )
    coords <- as.matrix(colData(spe)[, c("array_col", "array_row")])
    colnames(coords) <- c("x_coord", "y_coord")    
    spatialCoords(spe) <- coords
    
    # Add per-spot QC metrics
    spe <- scuttle::addPerCellQC(spe)
    
    # Prefiltering: remove spots with sum of counts too low (<10)
    spe <- spe[, spe$detected >= 10]

    # Add logcounts
    spe <- scater::computeLibraryFactors(spe)
    spe <- scater::logNormCounts(spe)
    
    return(spe)
}

# Create objects
hvu_spe <- lapply(dirs, spaceranger2spe)
names(hvu_spe) <- basename(dirs)

# Process `SpatialExperiment` objects
hvu_spe <- lapply(hvu_spe, process_spe, min_exp = c(1, 0.1), remove_missing = FALSE)
```

Next, because we don't have spatial domain info for this data set, we will
infer it using `r BiocStyle::Biocpkg("BayesSpace")`.

```{r}
test <- lapply(hvu_spe, function(x) {
    
    # Pre-process data (get HVGs and extract PCs)
    p <- spatialPreprocess(
        x, 
        platform = "Visium", 
        n.PCs = 10,
        log.normalize = FALSE
    )
    
    # Add 'row' and 'col' variables (required for BayesSpace)
    p$row <- p$array_row
    p$col <- p$array_col
    
    p <- qTune(p, qs = seq(3, 12), platform = "Visium", d = 10)
    qPlot(p)
    
    # Clustering
    p <- spatialCluster(
        p, platform = "Visium", q = 10, d = 8, # 7 clusters, 10 PCs
        init.method = "mclust", model = "t",
        nrep = 50000, gamma = 3,
        save.chain = TRUE
    )
    
    clusterPlot(p)
    
    
})

```


## Session info {.unnumbered}

This document was created under the following conditions:

```{r sessioninfo}
#| eval: true
#| echo: false
sessioninfo::session_info()
```

## References {.unnumbered}

