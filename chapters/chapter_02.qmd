---
execute: 
  echo: true
  eval: false
  warning: false
---

# Obtaining duplicate gene pairs

In this chapter, we will obtain duplicated gene pairs (classified by 
duplication mode) in the genomes of each species used in this project. 
If duplicates are avaiable on doubletroubledb [@almeida2024doubletrouble],
we will simply download them, otherwise we will infer them *de novo*.

To start, let's load required packages.

```{r here}
#| message: false
#| eval: true

library(here)
library(tidyverse)
library(doubletrouble)
library(syntenet)

set.seed(123) # for reproducibility
options(timeout = 1e6)

# Load helper functions
source(here("code", "utils.R"))
```

## Obtaining duplicate gene pairs

First, we will download duplicate pairs for species that are present
in doubletroubledb.

```{r}
# A. thaliana ----
dup_file <- tempfile(fileext = ".zip")
download.file(
    "https://figshare.com/ndownloader/files/44689777",
    destfile = dup_file
)

## Genes
ath_dups <- readr::read_tsv(
    unzip(dup_file, "arabidopsis_thaliana_genes.tsv.gz"),
    show_col_types = FALSE
) |>
    mutate(gene = str_replace_all(gene, "ara_", "")) |>
    filter(!str_detect(gene, "^ATC|^ATM")) |>
    as.data.frame()

## Pairs
ath_pairs <- readr::read_tsv(
    unzip(dup_file, "arabidopsis_thaliana_pairs.tsv.gz"),
    show_col_types = FALSE
) |>
    mutate(
        dup1 = str_replace_all(dup1, "ara_", ""),
        dup2 = str_replace_all(dup2, "ara_", "")
    ) |>
    filter(!str_detect(dup1, "^ATC|^ATM")) |>
    filter(!str_detect(dup2, "^ATC|^ATM")) |>
    as.data.frame()
    
# Z. mays ----
dup_file <- tempfile(fileext = ".zip")
download.file(
    "https://figshare.com/ndownloader/files/44690185",
    destfile = dup_file
)

## Genes
zma_dups <- readr::read_tsv(
    unzip(dup_file, "zea_mays_genes.tsv.gz"),
    show_col_types = FALSE
) |>
    mutate(gene = str_replace_all(gene, "zea_", "")) |>
    as.data.frame()

## Pairs
zma_pairs <- readr::read_tsv(
    unzip(dup_file, "zea_mays_pairs.tsv.gz"),
    show_col_types = FALSE
) |>
    mutate(
        dup1 = str_replace_all(dup1, "zea_", ""),
        dup2 = str_replace_all(dup2, "zea_", "")
    ) |>
    as.data.frame()
    
# G. max ----
dup_file <- tempfile(fileext = ".zip")
download.file(
    "https://figshare.com/ndownloader/files/44689888",
    destfile = dup_file
)

## Genes
gma_dups <- readr::read_tsv(
    unzip(dup_file, "glycine_max_genes.tsv.gz"),
    show_col_types = FALSE
) |>
    mutate(gene = str_replace_all(gene, "^gly_", "")) |>
    as.data.frame()

## Pairs
gma_pairs <- readr::read_tsv(
    unzip(dup_file, "glycine_max_pairs.tsv.gz"),
    show_col_types = FALSE
) |>
    mutate(
        dup1 = str_replace_all(dup1, "^gly_", ""),
        dup2 = str_replace_all(dup2, "^gly_", "")
    ) |>
    as.data.frame()
```

Now, let's identify and classify duplicate pairs *de novo* for 
the *P. aphrodite* genome using doubletrouble.

```{r}
# Get sequence and annotation for P. aphrodite and Amborella trichopoda (outgroup)
## P. aphrodite
pap_annot <- rtracklayer::import(
    "https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_gene.gff.gz"
)
pap_annot$gene_id <- pap_annot$ID

pap_seq <- Biostrings::readAAStringSet(
    "https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_protein.fa.gz"
)
names(pap_seq) <- gsub(".* gene=", "", names(pap_seq))
genes <- intersect(names(pap_seq), pap_annot$gene_id[pap_annot$type == "gene"])
pap_seq <- pap_seq[genes]

## A. trichopoda
atr_annot <- rtracklayer::import(
    "http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/gff3/amborella_trichopoda/Amborella_trichopoda.AMTR1.0.57.gff3.gz"
)

atr_seq <- Biostrings::readAAStringSet(
    "http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/fasta/amborella_trichopoda/pep/Amborella_trichopoda.AMTR1.0.pep.all.fa.gz"
)
names(atr_seq) <- gsub(" .*", "", gsub(".*gene:", "", names(atr_seq)))

atr_seq <- atr_seq[order(Biostrings::width(atr_seq), decreasing = TRUE), ]
atr_seq <- atr_seq[!duplicated(names(atr_seq)), ]

# Create seq and annotation lists
seq <- list(pap = pap_seq, atr = atr_seq)
annot <- list(pap = pap_annot, atr = atr_annot)

# Process input data
pdata <- syntenet::process_input(seq, annot, filter_annotation = TRUE)

# Run DIAMOND to get whole paranome
diamond_intra <- syntenet::run_diamond(
    seq = pdata$seq["pap"],
    compare = "intraspecies",
    threads = 4,
    ... = "--sensitive"
)

# Run DIAMOND search between orchid and outgroup
diamond_inter <- syntenet::run_diamond(
    seq = pdata$seq,
    compare = data.frame(query = "pap", outgroup = "atr"),
    threads = 4,
    ... = "--sensitive"
)["pap_atr"]

# Get intron counts
txdb_list <- lapply(annot, GenomicFeatures::makeTxDbFromGRanges)
ic <- lapply(txdb_list, get_intron_counts)

# Classify duplicate pairs
orchid_pairs <- classify_gene_pairs(
    blast_list = diamond_intra,
    annotation = pdata$annotation,
    blast_inter = diamond_inter,
    intron_counts = ic,
    scheme = "full",
    collinearity_dir = here("products", "result_files")
)[[1]]

orchid_dups <- classify_genes(list(pap = orchid_pairs))[["pap"]]

# Remove species IDs
pap_pairs <- orchid_pairs |>
    mutate(
        dup1 = str_replace_all(dup1, "^pap_", ""),
        dup2 = str_replace_all(dup2, "^pap_", "")
    )

pap_dups <- orchid_dups |>
    mutate(gene = str_replace_all(gene, "^pap_", ""))
```

## Saving objects to .rds files

Now that we have classified duplicate gene pairs and genes, we will save them
to separate .rds files for each species. Each .rds file will contain a list
with elements `pairs` and `genes` containing the duplicate pairs and genes,
respectively.

```{r}
# Store data frames in a list
ath_d <- list(pairs = ath_pairs, genes = ath_dups)
zma_d <- list(pairs = zma_pairs, genes = zma_dups)
gma_d <- list(pairs = gma_pairs, genes = gma_dups)
pap_d <- list(pairs = pap_pairs, genes = pap_dups)

# Save objects to files
saveRDS(ath_d, compress = "xz", file = here("data", "ath_duplicates.rds"))
saveRDS(zma_d, compress = "xz", file = here("data", "zma_duplicates.rds"))
saveRDS(gma_d, compress = "xz", file = here("data", "gma_duplicates.rds"))
saveRDS(pap_d, compress = "xz", file = here("data", "pap_duplicates.rds"))
```

## Session info {.unnumbered}

This document was created under the following conditions:

```{r sessioninfo}
#| eval: true
#| echo: false
sessioninfo::session_info()
```

## References {.unnumbered}
