---
execute: 
  echo: true
  eval: false
  warning: false
---

# Identification of spatially variable genes (SVGs)

In this chapter, we will identify spatially variable genes (SVGs)
and investigate a potential association between duplication mode and spatial
gene expression variability.

To start, let's load required packages.

```{r here}
#| message: false
#| eval: true

library(here)
library(tidyverse)
library(SpatialExperiment)
library(SummarizedExperiment)
library(DESpace)
library(patchwork)

set.seed(123) # for reproducibility
options(timeout = 1e6) # to download large data files

# Load helper functions
source(here("code", "utils.R"))
```

Let's also load the `SpatialExperiment` objects created in chapter 1.

```{r}
# Load `SpatialExperiment` objects
ath_spe <- readRDS(here("products", "result_files", "spe_ath.rds"))
gma_spe <- readRDS(here("products", "result_files", "spe_gma.rds"))
pap_spe <- readRDS(here("products", "result_files", "spe_pap.rds"))
zma_spe <- readRDS(here("products", "result_files", "spe_zma.rds"))
```

We will also need the duplicate pairs and genes obtained in chapter 2.

```{r}
#| eval: true

# Load duplicate pairs and genes
ath_dups <- readRDS(here("data", "ath_duplicates.rds"))
gma_dups <- readRDS(here("data", "gma_duplicates.rds"))
pap_dups <- readRDS(here("data", "pap_duplicates.rds"))
zma_dups <- readRDS(here("data", "zma_duplicates.rds"))
```

```{r}
#| eval: true
#| echo: false

# Load data that were generated in this document to avoid long runtimes
ath_svg <- readRDS(here("products", "result_files", "svgs_ath.rds"))
pap_svg <- readRDS(here("products", "result_files", "svgs_pap.rds"))
gma_svg <- readRDS(here("products", "result_files", "svgs_gma.rds"))
zma_svg <- readRDS(here("products", "result_files", "svgs_zma.rds"))
```

## Inferring SVGs

Now, we will identify SVGs using DESpace [@cai2024despace] using cell types
as spatial clusters. Genes will be considered SVGs if FDR <0.05.

```{r}
# Define helper function to identify SVGs with DESpace
get_svg <- function(spe, spatial_cluster = "clusters") {
    
    # Get gene-wise test statistics
    res <- DESpace_test(
        spe = spe,
        spatial_cluster = spatial_cluster,
        replicates = FALSE,
        min_counts = 1,
        min_non_zero_spots = 5
    )
    gc()
    
    # Get a data frame of test statistics for significant SVGs
    res_df <- res$gene_results |>
        as.data.frame() |>
        dplyr::filter(!is.na(FDR), FDR <= 0.05)
    
    return(res_df)
}

# Identify SVGs
ath_svg <- lapply(ath_spe, get_svg, spatial_cluster = "cell_type")
pap_svg <- lapply(pap_spe, get_svg, spatial_cluster = "clusters")
gma_svg <- lapply(gma_spe, get_svg, spatial_cluster = "Tissue")
zma_svg <- lapply(zma_spe, get_svg, spatial_cluster = "cell_type")
```

## Duplication mode of SVGs

Now, we will test if SVGs are enriched in duplicated genes from a particular
duplication mode (as in the 'full' classification scheme 
of `r BiocStyle::Biocpkg("doubletrouble")`).

```{r}
#| eval: true

# Define helper function to perform ORA for duplication modes
ora_dupmode <- function(svg_df, dup_df) {
    
    df <- HybridExpress::ora(
        genes = svg_df$gene_id,
        annotation = as.data.frame(dup_df),
        background = dup_df$gene,
        min_setsize = 2,
        max_setsize = 1e8
    )
    
    return(df)
}

# Perform overrepresentation analysis for duplication modes
ora_ath <- lapply(ath_svg, ora_dupmode, ath_dups$genes)
ora_pap <- lapply(pap_svg, ora_dupmode, pap_dups$genes)
ora_gma <- lapply(gma_svg, ora_dupmode, gma_dups$genes)
ora_zma <- lapply(zma_svg, ora_dupmode, zma_dups$genes)

# Combine results into a single data frame
ora_svg_dup <- bind_rows(
    bind_rows(ora_ath, .id = "sample") |> mutate(species = "A. thaliana"),
    bind_rows(ora_pap, .id = "sample") |> mutate(species = "P. aphrodite"),
    bind_rows(ora_gma, .id = "sample") |> mutate(species = "G. max"),
    bind_rows(ora_zma, .id = "sample") |> mutate(species = "Z. mays")
) |>
    dplyr::select(species, sample, type = term, genes, all, padj)

ora_svg_dup
```

Interestingly, SVGs are enriched in SD-derived genes in most of the samples
and in TRD-derived genes in some samples, revealing an association between 
these duplication modes and spatial variability in expression. 

Next, let's create a data frame summarizing the frequency of SVGs per 
duplication mode, highlighting overrepresented results.

```{r}
#| eval: true

# Define helper function to get frequency of SVGs per duplication mode
get_dup_freqs <- function(svg_list, dup_df, ora_df) {
    
    freq_df <- lapply(svg_list, function(x) {
        
        df <- left_join(x, dup_df, by = c("gene_id" = "gene")) |>
            drop_na(type) |>
            group_by(type) |>
            summarise(n = n()) |>
            as.data.frame()
        
        return(df)
    }) |>
        bind_rows(.id = "sample") |>
        left_join(ora_df |> select(sample, type, padj)) |>
        mutate(
            symbol = case_when(
                padj > 0.05 ~ "",
                padj > 0.01 ~ "*",
                padj > 0.001 ~ "**",
                !is.na(padj) ~ "***",
                TRUE ~ NA_character_
            )
        )
    
    return(freq_df)
}

# Get frequency of SVGs per duplication mode
svg_dupmode_freqs <- bind_rows(
    get_dup_freqs(ath_svg, ath_dups$genes, ora_svg_dup) |> 
        mutate(species = "ath"),
    get_dup_freqs(pap_svg, pap_dups$genes, ora_svg_dup) |>
        mutate(species = "pap"),
    get_dup_freqs(gma_svg, gma_dups$genes, ora_svg_dup) |>
        mutate(species = "gma"),
    get_dup_freqs(zma_svg, zma_dups$genes, ora_svg_dup) |>
        mutate(species = "zma")
) |>
    mutate(
        type = factor(type, levels = c("SD", "TD", "PD", "rTRD", "dTRD", "DD"))
    ) |>
    distinct()
```

Now, let's visualize results as a heatmap with cells colored by scaled
counts (by mode) and significance asterisks highlighted.

```{r}
#| eval: true
#| fig-width: 8
#| fig-height: 3
#| fig-dpi: 300

# Create a wide matrix with dup modes in rows and samples in columns
pdata_freq <- svg_dupmode_freqs |>
    mutate(sample = str_c(species, sample, sep = "_")) |>
    select(sample, type, n) |>
    pivot_wider(names_from = sample, values_from = n) |>
    tibble::column_to_rownames("type") |>
    as.matrix()
pdata_freq[is.na(pdata_freq)] <- 0

# Create a character matrix (wide format) with significance (*) by mode
pdata_sig <- svg_dupmode_freqs |>
    mutate(
        sample = str_c(species, sample, sep = "_"),
        symbol = replace_na(symbol, "")
    ) |>
    select(sample, type, symbol) |>
    pivot_wider(names_from = sample, values_from = symbol) |>
    tibble::column_to_rownames("type") |>
    as.matrix()
pdata_sig[is.na(pdata_sig)] <- ""

# Create colors lists
coldata <- svg_dupmode_freqs |>
    select(sample, species) |>
    mutate(
        species = str_replace_all(
            species,
            c(
                "ath" = "A. thaliana", 
                "pap" = "P. aphrodite", 
                "gma" = "G. max",
                "zma" = "Z. mays"
            )
        )
    ) |>
    distinct() |>
    tibble::column_to_rownames("sample") |>
    dplyr::rename(Species = species)

cols <- list(
    Species = setNames(
        ggsci::pal_jama()(length(unique(coldata$Species))),
        unique(coldata$Species)
    )
)

# Plot heatmap
pal <- colorRampPalette(RColorBrewer::brewer.pal(9, "Blues")[1:7])(100)
p_heatmap <- ComplexHeatmap::pheatmap(
    pdata_freq,
    display_numbers = pdata_sig,
    color = pal,
    annotation_col = coldata,
    annotation_colors = cols,
    name = "Scaled counts", # note: column scaled
    main = "Frequency of SVGs by duplication mode",
    show_colnames = FALSE,
    border_color = "white",
    cluster_rows = FALSE, cluster_cols = FALSE,
    scale = "column"
)

p_heatmap
```


## Saving objects {.unnumbered}

Finally, we will save important objects to reuse later.

```{r}
# Save objects as .rds files
## SVGs
saveRDS(
    ath_svg, compress = "xz", 
    file = here("products", "result_files", "svgs_ath.rds")
)

saveRDS(
    pap_svg, compress = "xz", 
    file = here("products", "result_files", "svgs_pap.rds")
)

saveRDS(
    gma_svg, compress = "xz", 
    file = here("products", "result_files", "svgs_gma.rds")
)

saveRDS(
    zma_svg, compress = "xz", 
    file = here("products", "result_files", "svgs_zma.rds")
)

## Data frame with ORA results - duplication mode and SVGs
saveRDS(
    ora_svg_dup, compress = "xz",
    file = here("products", "result_files", "ORA_svg_and_duplication_mode.rds")
)

## Frequency of SVGs per duplication mode in each sample and species
saveRDS(
    svg_dupmode_freqs, compress = "xz",
    file = here("products", "result_files", "svg_frequency_by_dupmode.rds")
)

# Save plots
saveRDS(
    p_heatmap, compress = "xz",
    file = here("products", "plots", "heatmap_svgs_by_dupmode.rds")
)
```

## Session info {.unnumbered}

This document was created under the following conditions:

```{r sessioninfo}
#| eval: true
#| echo: false
sessioninfo::session_info()
```

## References {.unnumbered}
