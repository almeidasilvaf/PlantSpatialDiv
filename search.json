[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code and data for “Gene expression divergence following gene and genome duplications in spatially resolved plant transcriptomes”",
    "section": "",
    "text": "Preface\nThis book contains all code and data used in the paper Gene expression divergence following gene and genome duplications in spatially resolved plant transcriptomes, and it is intended to make all analyses fully reproducible.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/01_creating_spe.html",
    "href": "chapters/01_creating_spe.html",
    "title": "1  Spatial transcriptomic data acquisition",
    "section": "",
    "text": "1.1 Data acquisition\nNow, we will download data as H5AD files and store them in a local directory. Each data set will be stored in a separate subdirectory. Then, we will create .rds files for each data set containing lists of SpatialExperiment objects.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial transcriptomic data acquisition</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_spe.html#data-acquisition",
    "href": "chapters/01_creating_spe.html#data-acquisition",
    "title": "1  Spatial transcriptomic data acquisition",
    "section": "",
    "text": "1.1.1 Arabidopsis leaves (Xia et al. 2022. Developmental Cell)\nData will be obtained from the ftp repository of STOmics DB.\n\n# Create a vector with file names\nbase_url &lt;- \"https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000104/stomics\"\nsamples &lt;- c(\n    \"S1-1_stereoseq.h5ad\", \"S1-2_stereoseq.h5ad\", \"S1-3_stereoseq.h5ad\", \n    \"S1-4_stereoseq.h5ad\", \"S1-5_stereoseq.h5ad\", \"S1-6_stereoseq.h5ad\", \n    \"S1-7_stereoseq.h5ad\", \"S2-1_stereoseq.h5ad\", \"S2-3_stereoseq.h5ad\", \n    \"S2-4_stereoseq.h5ad\", \"S2-5_stereoseq.h5ad\", \"S2-6_stereoseq.h5ad\", \n    \"S2-7_stereoseq.h5ad\", \"S3-1_stereoseq.h5ad\", \"S3-2_stereoseq.h5ad\", \n    \"S3-3_stereoseq.h5ad\", \"S3-5_stereoseq.h5ad\", \"S3-6_stereoseq.h5ad\", \n    \"S3-7_stereoseq.h5ad\", \"S4-1_stereoseq.h5ad\", \"S4-2_stereoseq.h5ad\", \n    \"S4-3_stereoseq.h5ad\", \"S4-4_stereoseq.h5ad\", \"S4-5_stereoseq.h5ad\", \n    \"S4-6_stereoseq.h5ad\", \"S4-7_stereoseq.h5ad\"\n)\nnames(samples) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(samples))\n\n# Download files\noutdir &lt;- \"~/Documents/PlantSpatialDiv_data/arabidopsis\"\ndownloads &lt;- unlist(lapply(samples, function(x) {\n    \n    fpath &lt;- file.path(base_url, x)\n    d &lt;- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, x)),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n\nNow, creating SpatialExperiment objects.\n\n# List files\nfiles &lt;- list.files(outdir, full.names = TRUE)\nnames(files) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(files))\n\n# Create and preprocess `SpatialExperiment` objects\nath_spe &lt;- lapply(files, stomics2spe)\nath_spe &lt;- lapply(ath_spe, process_spe, min_exp = c(1, 0.1))\n\n# Save object to RDS file\nsaveRDS(\n    ath_spe, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\")\n)\n\n\n\n1.1.2 Orchid flowers (Liu et al. 2022. Nucleic Acids Research)\nWe will download data from STOmics DB.\n\n# Create a vector with file URLs\nbase_url &lt;- \"https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000149/stomics\"\nsamples &lt;- c(\n    \"STSP0000011/GSM5939574.h5ad\",\n    \"STSP0000012/GSM5939575.h5ad\",\n    \"STSP0000013/GSM5939576.h5ad\",\n    \"STSP0000011/GSM5939574_processed.h5ad\",\n    \"STSP0000012/GSM5939575_processed.h5ad\",\n    \"STSP0000013/GSM5939576_processed.h5ad\"\n)\nnames(samples) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(samples))\n\n# Download files\noutdir &lt;- \"~/Documents/PlantSpatialDiv_data/orchid\"\ndownloads &lt;- unlist(lapply(samples, function(x) {\n    \n    fpath &lt;- file.path(base_url, x)\n    d &lt;- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, x)),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n\nNow, creating SpatialExperiment objects.\n\n# List files\nfiles &lt;- list.files(outdir, full.names = TRUE)\nnames(files) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(files))\n\n# Create and preprocess `SpatialExperiment` objects\nprocessed &lt;- files[grepl(\"processed\", files)]\nunprocessed &lt;- files[!grepl(\"processed\", files)]\n\npap_spe &lt;- lapply(seq_along(processed), function(x) {\n    \n    un &lt;- stomics2spe(unprocessed[x], remote = FALSE)\n    proc &lt;- stomics2spe(processed[x], remote = FALSE)\n    \n    # Add column `clusters` to unprocessed data\n    un$clusters &lt;- proc$clusters\n    \n    return(un)\n})\nnames(pap_spe) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(unprocessed))\n\npap_spe &lt;- lapply(\n    pap_spe, process_spe, \n    min_exp = c(1, 0.1), domain_col = \"clusters\"\n)\n\n# Save object to RDS file\nsaveRDS(\n    pap_spe, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\")\n)\n\n\n\n1.1.3 Maize ear primordia (Wang et al. 2024. Nature Plants)\nFirst, we will download H5AD files from STOmics DB.\n\n# Create a vector with file URLs\nburl &lt;- \"https://ftp.cngb.org/pub/SciRAID/stomics/STDS0000236/stomics\"\nsamples &lt;- c(\n    \"STSP0007368/MaizeEar_rep3_Impute.h5ad\",\n    \"STSP0007369/MaizeEar_rep4_Impute.h5ad\"\n)\nnames(samples) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(samples))\n\n# Download files\noutdir &lt;- \"~/Documents/PlantSpatialDiv_data/maize_ear\"\ndownloads &lt;- unlist(lapply(samples, function(x) {\n    \n    fpath &lt;- file.path(burl, x)\n    d &lt;- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, x)),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n\nNow, downloading raw .gem files from STOmicsDB to obtain raw (i.e., non-normalized) counts.\n\n# Create a vector with file URLs\nsamples &lt;- c(\n    \"STSP0007368/MaizeEar_rep3_Raw_bin50.gem\",\n    \"STSP0007369/MaizeEar_rep4_Raw_bin50.gem\"\n)\nnames(samples) &lt;- gsub(\"\\\\.gem\", \"\", basename(samples))\n\ndownloads &lt;- unlist(lapply(samples, function(x) {\n    \n    fpath &lt;- file.path(burl, x)\n    d &lt;- tryCatch(\n        download.file(url = fpath, destfile = file.path(outdir, basename(x))),\n        error = function(e) NA\n    )\n\n    return(d)\n}))\n\nNext, creating SpatialExperiment objects.\n\n# Create a data frame with paths to H5AD and .gem files\nf &lt;- list.files(\"~/Documents/PlantSpatialDiv_data/maize_ear\", full.names = TRUE)\nmaize_paths &lt;- data.frame(\n    Sample = c(\"MaizeEar_rep3\", \"MaizeEar_rep4\"),\n    H5AD = f[endsWith(f, \"h5ad\")],\n    gem = f[endsWith(f, \"gem\")]\n)\n\n### For each sample, read processed and unprocessed data, and combine them\nzma_spe &lt;- lapply(seq_len(nrow(maize_paths)), function(x) {\n    \n    # Read H5AD file as `SpatialExperiment`\n    spe &lt;- stomics2spe(maize_paths$H5AD[x], remote = FALSE)\n    assay(spe, \"logcounts\") &lt;- NULL\n    \n    # Read .gem file with raw counts and match spots to cols of `un`\n    coords &lt;- spatialCoords(spe) |&gt;\n        as.data.frame() |&gt;\n        tibble::rownames_to_column(\"spot_id\")\n    \n    gem &lt;- readr::read_tsv(\n        maize_paths$gem[x], \n        show_col_types = FALSE\n    ) |&gt;\n        dplyr::right_join(coords, by = c(\"x\" = \"x_coord\", \"y\" = \"y_coord\")) |&gt;\n        dplyr::arrange(spot_id) |&gt;\n        dplyr::select(geneID, spot_id, MIDCount) |&gt;\n        tidyr::pivot_wider(\n            names_from = spot_id, values_from = MIDCount, values_fill = 0\n        ) |&gt;\n        tibble::column_to_rownames(\"geneID\") |&gt;\n        as.matrix()\n        \n    gem &lt;- as(gem, \"dgCMatrix\")\n    gem &lt;- gem[, colnames(spe)]\n    gem &lt;- gem[rownames(spe), ]\n    \n    # Replace the 'counts' assay of `spe` with new matrix\n    assay(spe, \"counts\") &lt;- gem\n    \n    # Add 'logcounts' assay\n    spe &lt;- scater::computeLibraryFactors(spe)\n    spe &lt;- scater::logNormCounts(spe)\n    \n    return(spe)\n})\nnames(zma_spe) &lt;- maize_paths$Sample\n\nzma_spe &lt;- lapply(\n    zma_spe, process_spe, \n    min_exp = c(1, 0.1), domain_col = \"cell_type\"\n)\n\n# Save object to RDS file\nsaveRDS(\n    zma_spe, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\")\n)\n\n\n\n1.1.4 Soybean nodules (Liu et al. 2023. Nature Plants)\nFirst, we will download H5AD files from OMIX.\n\n# Download H5AD files\nsample_urls &lt;- c(\n    \"https://download.cncb.ac.cn/OMIX/OMIX002290/OMIX002290-01.h5ad\"\n)\nnames(sample_urls) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(sample_urls))\n\nlapply(seq_along(sample_urls), function(x) {\n    \n    url &lt;- sample_urls[x]\n    outfile &lt;- file.path(\n        \"~/Documents/PlantSpatialDiv_data/soybean\", basename(url)\n    )\n    \n    d &lt;- tryCatch(\n        download.file(url = url, destfile = outfile),\n        error = function(e) NA\n    )\n    \n    return(d)\n})\n\nNow, creating SpatialExperiment objects.\n\n# List files\nfiles &lt;- list.files(\"~/Documents/PlantSpatialDiv_data/soybean\", full.names = TRUE)\nnames(files) &lt;- gsub(\"\\\\.h5ad\", \"\", basename(files))\n\n# Create and preprocess `SpatialExperiment` objects\ngma_spe &lt;- lapply(files, function(x) {\n    \n    ### Read H5AD file as a SingleCellExperiment object\n    sce &lt;- zellkonverter::readH5AD(x)\n    \n    ### Convert SingleCellExperiment to SpatialExperiment\n    coords &lt;- as.matrix(SingleCellExperiment::reducedDim(sce, \"spatial\"))\n    colnames(coords) &lt;- c(\"x_coord\", \"y_coord\")\n    \n    spe &lt;- SpatialExperiment::SpatialExperiment(\n        assays = list(counts = assay(sce, \"raw\")),\n        colData = SummarizedExperiment::colData(sce),\n        rowData = SummarizedExperiment::rowData(sce),\n        spatialCoords = coords\n    )\n    \n    ### Add 'logcounts' assay\n    spe &lt;- scater::computeLibraryFactors(spe)\n    spe &lt;- scater::logNormCounts(spe)\n    \n    ### Process the `SpatialExperiment` object\n    spe &lt;- process_spe(spe, min_exp = c(1, 0.1), domain_col = \"Tissue\")\n    \n    return(spe)\n})\n\nThe original H5AD file contains 4 different slides combined into a single file. Hence, the SpatialExperiment object we created contains 4 sections that must be split into separate objects. Information on slides are available as suffixes in spot IDs as &lt;spot&gt;-&lt;slide&gt;.\n\n# Splitting slides into separate `SpatialExperiment` objects\nslide_ids &lt;- unique(gsub(\".*-\", \"\", colnames(gma_spe$`OMIX002290-01`)))\ngma_spe_final &lt;- lapply(slide_ids, function(x) {\n    spe &lt;- gma_spe[[1]]\n    spe &lt;- spe[, grepl(x, colnames(spe))]\n    \n    return(spe)\n})\nnames(gma_spe_final) &lt;- slide_ids\n\n# Saving objects to RDS files\nsaveRDS(\n    gma_spe_final, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\")\n)\n\n\n\n1.1.5 Germinating barley seeds (Peirats-Llobet et al. 2023. NAR)\nFirst, let’s obtain data from GEO (accession GSE218970).\n\n# Download .tar file from GEO\nwget https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE218970&format=file\ntar -zxvf GSE218970_RAW.tar\n\n# Extract all files in subdirectory\ncd GSE218970_RAW\nfor file in *.tar.gz; do \n    mkdir -p \"${file%.tar.gz}/outs\" && \n    tar -xzf \"$file\" -C \"${file%.tar.gz}/outs\" --strip-components=1; \ndone\n\nNow, let’s read all files as SpatialExperiment objects.\n\n# List directories with `spatial/` subdir (some don't have it)\ndirs &lt;- list.dirs(\n    path = \"~/Downloads/GSE218970_RAW\", full.names = TRUE, recursive = FALSE\n)\ndirs &lt;- dirs[!grepl(\"test\", dirs)]\n\nkeep_idx &lt;- which(sapply(dirs, function(x) {\n    file.exists(file.path(x, \"outs/spatial\", \"tissue_positions_list.csv\"))\n}) == TRUE)\ndirs &lt;- dirs[keep_idx]\n\n# Define function to read SpaceRanger output as a `SpatialExperiment` obj\nspaceranger2spe &lt;- function(dir) {\n    \n    # Create `SpatialExperiment` and add 'spatialCoords' slot\n    spe &lt;- SpatialExperiment::read10xVisium(\n        samples = dir,\n        type = \"sparse\", data = \"filtered\",\n        images = \"lowres\", load = FALSE\n    )\n    coords &lt;- as.matrix(colData(spe)[, c(\"array_col\", \"array_row\")])\n    colnames(coords) &lt;- c(\"x_coord\", \"y_coord\")    \n    spatialCoords(spe) &lt;- coords\n    \n    # Add per-spot QC metrics\n    spe &lt;- scuttle::addPerCellQC(spe)\n    \n    # Prefiltering: remove spots with sum of counts too low (&lt;10)\n    spe &lt;- spe[, spe$detected &gt;= 10]\n\n    # Add logcounts\n    spe &lt;- scater::computeLibraryFactors(spe)\n    spe &lt;- scater::logNormCounts(spe)\n    \n    return(spe)\n}\n\n# Create objects\nhvu_spe &lt;- lapply(dirs, spaceranger2spe)\nnames(hvu_spe) &lt;- basename(dirs)\n\n# Process `SpatialExperiment` objects\nhvu_spe &lt;- lapply(hvu_spe, process_spe, min_exp = c(1, 0.1), remove_missing = FALSE)\n\nNext, we will add spatial domain annotation to spots using data obtained from the authors (sent by email).\n\nhvu_domains &lt;- read.csv(here(\"data\", \"hvu_spot_identity.csv\"), row.names = 1)\n\n# Add domain annotation to spots\nhvu_spe &lt;- lapply(names(hvu_spe), function(x) {\n    \n    meta &lt;- unlist(strsplit(x, \"_\"))\n    sa &lt;- hvu_domains |&gt;\n        dplyr::filter(\n            slide_number == meta[2], \n            time == meta[3],\n            section == meta[4]\n        ) |&gt;\n        tibble::remove_rownames() |&gt;\n        tibble::column_to_rownames(\"barcode\")\n    \n    # Update `SpatialExperiment` object\n    new_spe &lt;- hvu_spe[[x]]\n    colData(new_spe) &lt;- merge(\n        as.data.frame(colData(new_spe)), sa, by = \"row.names\", all.x = TRUE\n    ) |&gt;\n        tibble::column_to_rownames(\"Row.names\") |&gt;\n        DataFrame()\n    \n    return(new_spe)\n})\nnames(hvu_spe) &lt;- basename(dirs)\n\n# Remove `ge10` samples - no domain annotation\nhvu_spe &lt;- hvu_spe[!grepl(\"ge10\", names(hvu_spe))]\n\nFinally, we will replace gene IDs with the most recent assembly available on Ensembl Plants. For that, we will use Ensembl Plants’ ID History Converter.\n\n# Create a file with barley gene IDs and export it\ngene_ids &lt;- lapply(hvu_spe, rownames) |&gt; unlist() |&gt; unique()\n\nwrite_tsv(data.frame(Gene = gene_ids), file = \"~/Downloads/hvulgare_ids.tsv\")\n\nThe file hvulgare_ids.tsv was used as input to ID History Converter in Ensembl Plants release 60, and correspondence between IDs were saved to products/tables/hvu_id_correspondence.csv. Let’s read it and use it to convert old IDs to new IDs.\n\nhvu_ids &lt;- read_csv(\n    here(\"products\", \"tables\", \"hvu_id_correspondence.csv\"),\n    show_col_types = FALSE\n) |&gt;\n    janitor::clean_names() |&gt;\n    dplyr::filter(release != \"Release\") |&gt;\n    mutate(\n        mapping_score = as.numeric(mapping_score),\n        old_stable_id = str_replace_all(old_stable_id, \"\\\\.[0-9]$\", \"\"),\n        new_stable_id = str_replace_all(new_stable_id, \"\\\\.[0-9]$\", \"\")\n    ) |&gt;\n    arrange(-mapping_score) |&gt;\n    select(old_stable_id, new_stable_id) |&gt;\n    distinct(old_stable_id, .keep_all = TRUE) |&gt;\n    distinct(new_stable_id, .keep_all = TRUE)\n\nWe will now use this ID correspondence data frame to convert gene IDs in the SpatialExperiment objects.\n\n# Replace old IDs with new ones\nhvu_spe_final &lt;- lapply(hvu_spe, function(x) {\n    \n    y &lt;- x[rownames(x) %in% hvu_ids$old_stable_id, ]\n    idx &lt;- match(rownames(y), hvu_ids$old_stable_id)\n    rownames(y) &lt;- hvu_ids$new_stable_id[idx]\n    \n    return(y)\n})\n\n# Saving objects to RDS files\nsaveRDS(\n    hvu_spe_final, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial transcriptomic data acquisition</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_spe.html#summary-statistics",
    "href": "chapters/01_creating_spe.html#summary-statistics",
    "title": "1  Spatial transcriptomic data acquisition",
    "section": "1.2 Summary statistics",
    "text": "1.2 Summary statistics\nNext, we will explore and visualize summary statistics (number of expressed genes, number of spots, spatial domains, etc) for each SpatialExperiment object.\nWe will start by loading the SpatialExperiment objects created in the previous section.\n\n# Load `SpatialExperiment` objects\nath_spe &lt;- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_ath.rds\"))\npap_spe &lt;- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_pap.rds\"))\nzma_spe &lt;- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_zma.rds\"))\ngma_spe &lt;- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_gma.rds\"))\nhvu_spe &lt;- readRDS(here(\"products\", \"result_files\", \"spe\", \"spe_hvu.rds\"))\n\n\n1.2.1 Dimensions and spatial domains\nHere, we will explore the dimensions (genes x spots) and number of spatial domains of each object.\n\n# Define helper function to get number of genes, spots, and domains\ncount_dims &lt;- function(spe, domain = \"cell_type\") {\n    df &lt;- data.frame(\n        Genes = nrow(spe), \n        Spots = ncol(spe), \n        Domains = length(unique(spe[[domain]]))\n    )\n    return(df)\n}\n\n# Get summary stats for each object\nspe_stats &lt;- bind_rows(\n    ## Ath\n    lapply(ath_spe, count_dims, domain = \"cell_type\") |&gt; \n        bind_rows(.id = \"sample\") |&gt;\n        mutate(species = \"Ath\"),\n    ## Gma\n    lapply(gma_spe, count_dims, domain = \"annotation\") |&gt; \n        bind_rows(.id = \"sample\") |&gt;\n        mutate(species = \"Gma\"),\n    ## Pap\n    lapply(pap_spe, count_dims, domain = \"clusters\") |&gt; \n        bind_rows(.id = \"sample\") |&gt;\n        mutate(species = \"Pap\"),\n    ## Zma\n    lapply(zma_spe, count_dims, domain = \"cell_type\") |&gt; \n        bind_rows(.id = \"sample\") |&gt;\n        mutate(species = \"Zma\"),\n    ## Hvu\n    lapply(hvu_spe, count_dims, domain = \"tissue\") |&gt; \n        bind_rows(.id = \"sample\") |&gt;\n        mutate(species = \"Hvu\")\n)\n\nWe can visualize such statistics grouped by species.\n\n# Plot number of genes, spots, and domains per species\np_spestats &lt;- spe_stats |&gt;\n    pivot_longer(cols = c(Genes, Spots, Domains)) |&gt;\n    mutate(name = factor(name, levels = c(\"Genes\", \"Spots\", \"Domains\"))) |&gt;\n    ggplot(aes(x = value, y = species, color = species)) +\n    ggbeeswarm::geom_quasirandom(alpha = 0.7, size = 2.5) +\n    ggsci::scale_color_jama() +\n    facet_wrap(~name, scales = \"free_x\") +\n    theme_classic() +\n    theme(\n        legend.position = \"none\",\n        panel.grid = element_blank(),\n        panel.background = element_rect(fill = bg)\n    ) +\n    ggh4x::facetted_pos_scales(x = list(\n        scale_x_continuous(\n            limits = c(0, 3e4),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 1e4),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(limits =  c(0, 20))\n    )) +\n    labs(\n        title = \"Summary sample statistics across species\",\n        subtitle = \"Only genes with &gt;1 count in at least 0.1% of the spots\",\n        x = \"Absolute frequency\",\n        y = \"Species\"\n    )\n\np_spestats\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.2 Spots and domains\nNext, we will plot spots colored by spatial for all slides.\n\n# Plot spots colored by domains\np_spots &lt;- list(\n    Ath = lapply(\n        ath_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"cell_type\", pal = \"Okabe-Ito\"\n    ),\n    Gma = lapply(\n        gma_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"annotation\", pal = \"Okabe-Ito\"\n    ),\n    Pap = lapply(\n        pap_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"clusters\", pal = ggsci::pal_d3(\"category20\")(20)\n    ),\n    Zma = lapply(\n        zma_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"cell_type\", pal = ggsci::pal_d3(\"category20\")(20)\n    ),\n    Hvu = lapply(\n        hvu_spe, ggspavis::plotSpots, in_tissue = NULL, \n        annotate = \"tissue\", pal = ggsci::pal_d3(\"category20\")(20)\n    )\n)\n\nNow, we will create a plot with one slide for each species to use as a summary of the data sets in this study.\n\n# Plot one slide per species\np_spot_species &lt;- wrap_plots(\n    p_spots$Ath[[12]] + ggtitle(\"A. thaliana\"),\n    wrap_plots(\n        p_spots$Gma[[4]] + ggtitle(\"G. max\"),\n        p_spots$Pap[[1]] + ggtitle(\"P. aphrodite\"),\n        ncol = 2\n    ),\n    wrap_plots(\n        p_spots$Zma[[1]] + coord_fixed(ratio = 1.1) + ggtitle(\"Z. mays\"),\n        p_spots$Hvu[[13]] + ggtitle(\"H. vulgare\"),\n        ncol = 2\n    ),\n    nrow = 3,\n    heights = c(0.3, 1, 0.8)\n) &\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5, face = \"italic\")\n    )\n\np_spot_species",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial transcriptomic data acquisition</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_spe.html#saving-objects",
    "href": "chapters/01_creating_spe.html#saving-objects",
    "title": "1  Spatial transcriptomic data acquisition",
    "section": "1.3 Saving objects",
    "text": "1.3 Saving objects\nFinally, we will save important objects and plots created in this document for future reuse.\n\n# Objects\nsaveRDS(\n    spe_stats, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"spe_summary_stats.rds\")\n)\n\n# Plots\nsaveRDS(\n    p_spestats, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_spe_summary_stats.rds\")\n)\n\nsaveRDS(\n    p_spot_species, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_spots_one_slide_per_species.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial transcriptomic data acquisition</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_spe.html#session-info",
    "href": "chapters/01_creating_spe.html#session-info",
    "title": "1  Spatial transcriptomic data acquisition",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n abind                  1.4-5    2016-07-21 [1] CRAN (R 4.4.1)\n beachmat               2.20.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n beeswarm               0.4.0    2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocParallel           1.38.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n cli                    3.6.3    2024-06-21 [1] CRAN (R 4.4.1)\n codetools              0.2-20   2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0    2023-01-23 [1] CRAN (R 4.4.1)\n crayon                 1.5.3    2024-06-20 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1   2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DelayedMatrixStats     1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36   2024-06-23 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4    2023-11-17 [1] CRAN (R 4.4.1)\n dqrng                  0.4.1    2024-05-28 [1] CRAN (R 4.4.1)\n DropletUtils         * 1.24.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n edgeR                  4.2.1    2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0   2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6    2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2    2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0    2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0    2023-01-29 [1] CRAN (R 4.4.1)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1   2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12   2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1   2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggbeeswarm             0.7.2    2023-04-29 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8    2024-01-23 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1    2024-04-23 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5    2024-01-10 [1] CRAN (R 4.4.1)\n ggside                 0.3.1    2024-03-01 [1] CRAN (R 4.4.1)\n ggspavis               1.10.0   2024-05-16 [1] Bioconductor 3.19 (R 4.4.1)\n glue                   1.7.0    2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5    2024-04-22 [1] CRAN (R 4.4.1)\n HDF5Array              1.32.1   2024-08-11 [1] Bioconductor 3.19 (R 4.4.1)\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3    2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1  2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4    2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7    2023-08-15 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8    2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48     2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3    2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6   2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4    2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4   2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10 2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3    2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4    2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0    2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0    2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1    2024-04-01 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0    2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0    2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2    2023-08-10 [1] CRAN (R 4.4.1)\n R.methodsS3            1.8.2    2022-06-13 [1] CRAN (R 4.4.1)\n R.oo                   1.26.0   2024-01-24 [1] CRAN (R 4.4.1)\n R.utils                2.12.3   2023-11-18 [1] CRAN (R 4.4.1)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3    2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13   2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5    2024-01-10 [1] CRAN (R 4.4.1)\n rhdf5                  2.48.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n rhdf5filters           1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Rhdf5lib               1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n rjson                  0.2.21   2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4    2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27     2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4    2023-11-05 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0   2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1    2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0    2023-11-28 [1] CRAN (R 4.4.1)\n scuttle                1.14.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n sparseMatrixStats      1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0    2023-01-06 [1] CRAN (R 4.4.1)\n stringi                1.8.4    2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1    2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1    2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1    2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1    2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0    2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0    2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0    2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4    2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5    2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7    2023-12-18 [1] CRAN (R 4.4.1)\n withr                  3.0.0    2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51     2025-02-19 [1] CRAN (R 4.4.1)\n XVector                0.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9    2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial transcriptomic data acquisition</span>"
    ]
  },
  {
    "objectID": "chapters/01_creating_spe.html#references",
    "href": "chapters/01_creating_spe.html#references",
    "title": "1  Spatial transcriptomic data acquisition",
    "section": "References",
    "text": "References\n\n\n\n\nLiu, Chang, Jing Leng, Yonglong Li, Tingting Ge, Jinglong Li, Yamao Chen, Chunce Guo, and Ji Qi. 2022. “A Spatiotemporal Atlas of Organogenesis in the Development of Orchid Flowers.” Nucleic Acids Research 50 (17): 9724–37.\n\n\nLiu, Zhijian, Xiangying Kong, Yanping Long, Sirui Liu, Hong Zhang, Jinbu Jia, Wenhui Cui, et al. 2023. “Integrated Single-Nucleus and Spatial Transcriptomics Captures Transitional States in Soybean Nodule Maturation.” Nature Plants 9 (4): 515–24.\n\n\nPeirats-Llobet, Marta, Changyu Yi, Lim Chee Liew, Oliver Berkowitz, Reena Narsai, Mathew G Lewsey, and James Whelan. 2023. “Spatially Resolved Transcriptomic Analysis of the Germinating Barley Grain.” Nucleic Acids Research 51 (15): 7798–7819.\n\n\nXia, Keke, Hai-Xi Sun, Jie Li, Jiming Li, Yu Zhao, Lichuan Chen, Chao Qin, et al. 2022. “The Single-Cell Stereo-Seq Reveals Region-Specific Cell Subtypes and Transcriptome Profiling in Arabidopsis Leaves.” Developmental Cell 57 (10): 1299–1310.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Spatial transcriptomic data acquisition</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html",
    "href": "chapters/02_obtaining_duplicates_and_rates.html",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "",
    "text": "2.1 Retrieving duplicate pairs\nFirst, we will download duplicate pairs for species that are present in doubletroubledb.\n# A. thaliana ----\ndup_file &lt;- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44689777\",\n    destfile = dup_file\n)\n\n## Genes\nath_dups &lt;- readr::read_tsv(\n    unzip(dup_file, \"arabidopsis_thaliana_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(gene = str_replace_all(gene, \"ara_\", \"\")) |&gt;\n    filter(!str_detect(gene, \"^ATC|^ATM\")) |&gt;\n    as.data.frame()\n\n## Pairs\nath_pairs &lt;- readr::read_tsv(\n    unzip(dup_file, \"arabidopsis_thaliana_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(\n        dup1 = str_replace_all(dup1, \"ara_\", \"\"),\n        dup2 = str_replace_all(dup2, \"ara_\", \"\")\n    ) |&gt;\n    filter(!str_detect(dup1, \"^ATC|^ATM\")) |&gt;\n    filter(!str_detect(dup2, \"^ATC|^ATM\")) |&gt;\n    as.data.frame()\n    \n# Z. mays ----\ndup_file &lt;- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44690185\",\n    destfile = dup_file\n)\n\n## Genes\nzma_dups &lt;- readr::read_tsv(\n    unzip(dup_file, \"zea_mays_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(gene = str_replace_all(gene, \"zea_\", \"\")) |&gt;\n    as.data.frame()\n\n## Pairs\nzma_pairs &lt;- readr::read_tsv(\n    unzip(dup_file, \"zea_mays_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(\n        dup1 = str_replace_all(dup1, \"zea_\", \"\"),\n        dup2 = str_replace_all(dup2, \"zea_\", \"\")\n    ) |&gt;\n    as.data.frame()\n    \n# G. max ----\ndup_file &lt;- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44689888\",\n    destfile = dup_file\n)\n\n## Genes\ngma_dups &lt;- readr::read_tsv(\n    unzip(dup_file, \"glycine_max_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(gene = str_replace_all(gene, \"^gly_\", \"\")) |&gt;\n    as.data.frame()\n\n## Pairs\ngma_pairs &lt;- readr::read_tsv(\n    unzip(dup_file, \"glycine_max_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(\n        dup1 = str_replace_all(dup1, \"^gly_\", \"\"),\n        dup2 = str_replace_all(dup2, \"^gly_\", \"\")\n    ) |&gt;\n    as.data.frame()\n\n\n# H. vulgare ----\ndup_file &lt;- tempfile(fileext = \".zip\")\ndownload.file(\n    \"https://figshare.com/ndownloader/files/44689900\",\n    destfile = dup_file\n)\n\n## Genes\nhvu_dups &lt;- readr::read_tsv(\n    unzip(dup_file, \"hordeum_vulgare_genes.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(gene = str_replace_all(gene, \"^hor_\", \"\")) |&gt;\n    as.data.frame()\n\n## Pairs\nhvu_pairs &lt;- readr::read_tsv(\n    unzip(dup_file, \"hordeum_vulgare_pairs.tsv.gz\"),\n    show_col_types = FALSE\n) |&gt;\n    mutate(\n        dup1 = str_replace_all(dup1, \"^hor_\", \"\"),\n        dup2 = str_replace_all(dup2, \"^hor_\", \"\")\n    ) |&gt;\n    as.data.frame()\nNext, let’s identify and classify duplicate pairs de novo for the P. aphrodite genome using doubletrouble.\n# Get sequence and annotation for P. aphrodite and Amborella trichopoda (outgroup)\n## P. aphrodite\npap_annot &lt;- rtracklayer::import(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_gene.gff.gz\"\n)\npap_annot$gene_id &lt;- pap_annot$ID\n\npap_seq &lt;- Biostrings::readAAStringSet(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_protein.fa.gz\"\n)\nnames(pap_seq) &lt;- gsub(\".* gene=\", \"\", names(pap_seq))\ngenes &lt;- intersect(names(pap_seq), pap_annot$gene_id[pap_annot$type == \"gene\"])\npap_seq &lt;- pap_seq[genes]\n\n## A. trichopoda\natr_annot &lt;- rtracklayer::import(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/gff3/amborella_trichopoda/Amborella_trichopoda.AMTR1.0.57.gff3.gz\"\n)\n\natr_seq &lt;- Biostrings::readAAStringSet(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/fasta/amborella_trichopoda/pep/Amborella_trichopoda.AMTR1.0.pep.all.fa.gz\"\n)\nnames(atr_seq) &lt;- gsub(\" .*\", \"\", gsub(\".*gene:\", \"\", names(atr_seq)))\n\natr_seq &lt;- atr_seq[order(Biostrings::width(atr_seq), decreasing = TRUE), ]\natr_seq &lt;- atr_seq[!duplicated(names(atr_seq)), ]\n\n# Create seq and annotation lists\nseq &lt;- list(pap = pap_seq, atr = atr_seq)\nannot &lt;- list(pap = pap_annot, atr = atr_annot)\n\n# Process input data\npdata &lt;- syntenet::process_input(seq, annot, filter_annotation = TRUE)\n\n# Run DIAMOND to get whole paranome\ndiamond_intra &lt;- syntenet::run_diamond(\n    seq = pdata$seq[\"pap\"],\n    compare = \"intraspecies\",\n    threads = 4,\n    ... = \"--sensitive\"\n)\n\n# Run DIAMOND search between orchid and outgroup\ndiamond_inter &lt;- syntenet::run_diamond(\n    seq = pdata$seq,\n    compare = data.frame(query = \"pap\", outgroup = \"atr\"),\n    threads = 4,\n    ... = \"--sensitive\"\n)[\"pap_atr\"]\n\n# Get intron counts\ntxdb_list &lt;- lapply(annot, GenomicFeatures::makeTxDbFromGRanges)\nic &lt;- lapply(txdb_list, get_intron_counts)\n\n# Classify duplicate pairs\norchid_pairs &lt;- classify_gene_pairs(\n    blast_list = diamond_intra,\n    annotation = pdata$annotation,\n    blast_inter = diamond_inter,\n    intron_counts = ic,\n    scheme = \"full\",\n    collinearity_dir = here(\"products\", \"result_files\")\n)[[1]]\n\norchid_dups &lt;- classify_genes(list(pap = orchid_pairs))[[\"pap\"]]\n\n# Remove species IDs\npap_pairs &lt;- orchid_pairs |&gt;\n    mutate(\n        dup1 = str_replace_all(dup1, \"^pap_\", \"\"),\n        dup2 = str_replace_all(dup2, \"^pap_\", \"\")\n    )\n\npap_dups &lt;- orchid_dups |&gt;\n    mutate(gene = str_replace_all(gene, \"^pap_\", \"\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html#calculating-substitution-rates",
    "href": "chapters/02_obtaining_duplicates_and_rates.html#calculating-substitution-rates",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "2.2 Calculating substitution rates",
    "text": "2.2 Calculating substitution rates\nNext, we will also calculate substitution rates (Ks, Ka, and Ka/Ks) for duplicate pairs using doubletrouble.\n\n# Define function to clean (remove redundancy) in ENSEMBL-derived CDS\nensembl_longest_isoform &lt;- function(proteome = NULL) {\n\n    pnames &lt;- gsub(\".*gene:\", \"\", names(proteome))\n    pnames &lt;- gsub(\" .*\", \"\", pnames)\n\n    names(proteome) &lt;- pnames\n    proteome &lt;- proteome[order(Biostrings::width(proteome), decreasing = TRUE),]\n    proteome &lt;- proteome[!duplicated(names(proteome)), ]\n    return(proteome)\n}\n\n# A. thaliana ----\n## Get CDS\nath_cds &lt;- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/arabidopsis_thaliana/cds/Arabidopsis_thaliana.TAIR10.cds.all.fa.gz\") |&gt;\n    ensembl_longest_isoform()\nath_cds &lt;- ath_cds[names(ath_cds) %in% unique(c(ath_pairs$dup1, ath_pairs$dup2))]\n\n## Calculate rates\nath_kaks &lt;- pairs2kaks(\n    list(Ath = ath_pairs), list(Ath = ath_cds), threads = 4\n)$Ath\n\n# Glycine max ----\n## Get CDS\ngma_cds &lt;- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/glycine_max/cds/Glycine_max.Glycine_max_v2.1.cds.all.fa.gz\") |&gt;\n    ensembl_longest_isoform()\ngma_cds &lt;- gma_cds[names(gma_cds) %in% unique(c(gma_pairs$dup1, gma_pairs$dup2))]\n\n## Calculate rates\ngma_kaks &lt;- pairs2kaks(\n    gene_pairs_list = list(\n        gma = gma_pairs |&gt;\n            mutate(\n                dup1 = str_c(\"gma_\", dup1), \n                dup2 = str_c(\"gma_\", dup2),\n            )\n    ),\n    cds = list(gma = gma_cds), \n    threads = 4\n)$gma\n\n\n# Z. mays ----\n## Get CDS\nzma_cds &lt;- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/zea_mays/cds/Zea_mays.Zm-B73-REFERENCE-NAM-5.0.cds.all.fa.gz\") |&gt;\n    ensembl_longest_isoform()\nzma_cds &lt;- zma_cds[names(zma_cds) %in% unique(c(zma_pairs$dup1, zma_pairs$dup2))]\n\n## Calculate rates\nzma_kaks &lt;- pairs2kaks(\n    gene_pairs_list = list(\n        zma = zma_pairs |&gt;\n            mutate(\n                dup1 = str_c(\"zma_\", dup1), \n                dup2 = str_c(\"zma_\", dup2),\n            )\n    ),\n    cds = list(zma = zma_cds), \n    threads = 2\n)$zma\n\n# H. vulgare ----\n## Get CDS\nhvu_cds &lt;- Biostrings::readDNAStringSet(\"https://ftp.ebi.ac.uk/ensemblgenomes/pub/release-59/plants/fasta/hordeum_vulgare/cds/Hordeum_vulgare.MorexV3_pseudomolecules_assembly.cds.all.fa.gz\") |&gt;\n    ensembl_longest_isoform()\nhvu_cds &lt;- hvu_cds[names(hvu_cds) %in% unique(c(hvu_pairs$dup1, hvu_pairs$dup2))]\n\n## Calculate rates\nhvu_kaks &lt;- pairs2kaks(\n    gene_pairs_list = list(hvu = hvu_pairs),\n    cds = list(hvu = hvu_cds), \n    threads = 2\n)$hvu\n\n\n# P. aphrodite ----\n## Get CDS\npap_cds &lt;- Biostrings::readDNAStringSet(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_gene.fa.gz\"\n)\nnames(pap_cds) &lt;- gsub(\".* gene=\", \"\", names(pap_cds))\nnames(pap_cds) &lt;- gsub(\" .*\", \"\", names(pap_cds))\npap_cds &lt;- pap_cds[order(Biostrings::width(pap_cds), decreasing = TRUE)]\npap_cds &lt;- pap_cds[!duplicated(names(pap_cds))]\n\n## Calculate rates\npap_kaks &lt;- pairs2kaks(\n    gene_pairs_list = list(\n        pap = pap_pairs |&gt;\n            mutate(\n                dup1 = str_c(\"pap_\", dup1), \n                dup2 = str_c(\"pap_\", dup2),\n            )\n    ),\n    cds = list(pap = pap_cds), \n    threads = 4\n)$pap\n\nFinally, we will use Ks values to split gene pairs by age groups, so that age is not a confounder when performing comparisons between duplication modes. Here, we will not use pairs with \\(K_s&gt;2\\) to avoid saturation at greater \\(K_s\\) values. Based on previous literature, we will set pre-defined numbers of \\(K_s\\) peaks, which are:\n\nGlycine max: 2 peaks at \\(K_s\\) ~0.1 and ~0.56.\nZea mays: 1 peak at \\(K_s\\) ~0.16.\nArabidopsis thaliana: 1 peak at \\(K_s\\) ~0.73.\nPhalaenopsis aphrodite: 1 peak at \\(K_s\\) ~1.5.\nHordeum vulgare: 1 peak at \\(K_s\\) ~0.8.\n\n\n# First inspection to validate the number of peaks and where they are\nplot_ks_distro(gma_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\nplot_ks_distro(zma_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\nplot_ks_distro(ath_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\nplot_ks_distro(pap_kaks, bytype = TRUE, type_levels = c(\"SD\", \"All\"))\n\n# Classify gene pairs by age groups\n## G. max - 2 peaks\ngma_peaks &lt;- gma_kaks |&gt;\n    filter(Ks &lt;=2) |&gt;\n    pull(Ks) |&gt;\n    find_ks_peaks(npeaks = 2, max_ks = 1)\n\ngma_spairs &lt;- split_pairs_by_peak(gma_kaks, peaks = gma_peaks) |&gt;\n    purrr::pluck(1) |&gt;\n    dplyr::select(1, 2, type = 6, 7)\n\n## Z. mays - 1 peak\nzma_peaks &lt;- zma_kaks |&gt;\n    filter(Ks &lt;=2) |&gt;\n    pull(Ks) |&gt;\n    find_ks_peaks(npeaks = 1, max_ks = 1)\n\nzma_spairs &lt;- split_pairs_by_peak(zma_kaks, peaks = zma_peaks) |&gt;\n    purrr::pluck(1) |&gt;\n    dplyr::select(1, 2, type = 6, 7)\n\n## A. thaliana - 1 peak\nath_peaks &lt;- ath_kaks |&gt;\n    filter(Ks &lt;=2) |&gt;\n    pull(Ks) |&gt;\n    find_ks_peaks(npeaks = 1, max_ks = 1.5)\n\nath_spairs &lt;- split_pairs_by_peak(ath_kaks, peaks = ath_peaks) |&gt;\n    purrr::pluck(1) |&gt;\n    dplyr::select(1, 2, type = 6, 7)\n\n## P. aphrodite\npap_peaks &lt;- pap_kaks |&gt;\n    filter(Ks &lt;=2, type == \"SD\") |&gt;\n    pull(Ks) |&gt;\n    find_ks_peaks(npeaks = 1, max_ks = 2)\n\npap_spairs &lt;- split_pairs_by_peak(pap_kaks, peaks = pap_peaks) |&gt;\n    purrr::pluck(1) |&gt;\n    dplyr::select(1, 2, type = 6, 7)\n\n## H. vulgare - 1 peak\nhvu_peaks &lt;- hvu_kaks |&gt;\n    filter(Ks &lt;=2, type == \"SD\") |&gt; \n    pull(Ks) |&gt;\n    find_ks_peaks(npeaks = 1, max_ks = 2)\n\nhvu_spairs &lt;- split_pairs_by_peak(hvu_kaks, peaks = hvu_peaks) |&gt;\n    purrr::pluck(1) |&gt;\n    dplyr::select(1, 2, type = 6, 7)\n\n# Create a single list with all classified duplicates and their age groups\npairs_byage &lt;- list(\n    ath = ath_spairs,\n    gma = gma_spairs,\n    pap = pap_spairs,\n    zma = zma_spairs,\n    hvu = hvu_spairs\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html#obtaining-gene-family-information",
    "href": "chapters/02_obtaining_duplicates_and_rates.html#obtaining-gene-family-information",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "2.3 Obtaining gene family information",
    "text": "2.3 Obtaining gene family information\nWe will also obtain gene family assignments for each gene using data from PLAZA 5.0 (Van Bel et al. 2022). Let’s start with species that are included in PLAZA. These are A. thaliana, G. max, and Z. mays.\n\n# Get gene family assignment from PLAZA\nfams_dicots &lt;- read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", show_col_types = FALSE, comment = \"# \"\n)\n\nfams_monocots &lt;- read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", show_col_types = FALSE, comment = \"# \"\n)\n\nnames(fams_dicots) &lt;- c(\"family\", \"species\", \"gene\")\nnames(fams_monocots) &lt;- c(\"family\", \"species\", \"gene\")\n\n# Get gene sets\nsp &lt;- c(\"ath\", \"gma\", \"pap\", \"zma\", \"hvu\")\ngene_sets &lt;- lapply(sp, function(x) {\n    \n    spe &lt;- readRDS(\n        here(\"products\", \"result_files\", \"spe\", paste0(\"spe_\", x, \".rds\"))\n    )\n    gs &lt;- lapply(spe, rownames) |&gt; unlist() |&gt; unique()\n    return(gs)\n})\nnames(gene_sets) &lt;- sp\n\n# Get assignments for species in PLAZA\nfam_ath &lt;- fams_dicots |&gt; filter(gene %in% gene_sets$ath)\n\nfam_gma &lt;- fams_dicots |&gt;\n    mutate(gene = str_replace_all(gene, \"Glyma\\\\.\", \"GLYMA_\")) |&gt;\n    filter(gene %in% gene_sets$gma)\n\nfam_zma &lt;- fams_monocots |&gt; filter(gene %in% gene_sets$zma)\n\nFor H. vulgare, the genome assembly on PLAZA is different from the one we’re using, and the P. aphrodite genome is not available on PLAZA. Thus, for these two species, we will get gene family assignments using the following approach:\n\nPerform a DIAMOND search and get the top hit in target species (H. vulgare for H. vulgare; Allium sativum for P. aphrodite).\nUse the family assignment of top hits.\n\n\n# 1) Get sequence data ----\n## Query sequences (used in this study)\nquery &lt;- list(\n    hvu = Biostrings::readAAStringSet(\"https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/release-60/fasta/hordeum_vulgare/pep/Hordeum_vulgare.MorexV3_pseudomolecules_assembly.pep.all.fa.gz\"),\n    pap = Biostrings::readAAStringSet(\"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_genomic_scaffold_v1.0_protein.fa.gz\")\n)\nnames(query$hvu) &lt;- gsub(\".* gene:\", \"\", names(query$hvu))\nnames(query$hvu) &lt;- gsub(\" .*\", \"\", names(query$hvu))\nnames(query$pap) &lt;- gsub(\".* gene=\", \"\", names(query$pap))\n\n## Target sequences (from PLAZA)\ntarget &lt;- list(\n    hvu_target = Biostrings::readAAStringSet(\"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/Fasta/proteome.selected_transcript.hvu.fasta.gz\"),\n    pap_target = Biostrings::readAAStringSet(\"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/Fasta/proteome.selected_transcript.asa.fasta.gz\")\n)\nnames(target$hvu_target) &lt;- gsub(\".* | \", \"\", names(target$hvu_target))\nnames(target$pap_target) &lt;- gsub(\".* | \", \"\", names(target$pap_target))\n\n# 2) Perform DIAMOND searches\ncompare &lt;- data.frame(\n    query = c(\"hvu\", \"pap\"), \n    target = c(\"hvu_target\", \"pap_target\")\n)\ndmd &lt;- run_diamond(\n    c(query, target), \n    outdir = file.path(tempdir(), \"dmd\"),\n    compare = compare\n)\n\n# 3) Get top hits for each query gene\ntop_hits &lt;- lapply(dmd, function(x) {\n    \n    df &lt;- x |&gt;\n        group_by(query) |&gt;\n        arrange(evalue) |&gt;\n        slice_head(n = 1) |&gt;\n        ungroup() |&gt;\n        as.data.frame()\n    \n    return(df)\n})\n\n# Create a knee plot to define a similarity threshold (if needed)\nknees &lt;- lapply(top_hits, function(x) {\n    x |&gt;\n        arrange(-perc_identity) |&gt; \n        mutate(idx = row_number()) |&gt; \n        ggplot(aes(x = idx, y = perc_identity)) +\n        geom_point() + \n        scale_y_continuous(breaks = seq(0, 100, by = 10))\n})\n\nBased on knee plots of ECDF for sequence identity, we will define similarity cut-offs of 35% for the comparison pap-asa, and 90% for hvu-vhu. Then, we will use the ID of the target gene to get gene family assignments from PLAZA.\n\n# Get gene family assignments\nfam_hvu &lt;- top_hits$hvu_hvu_target |&gt;\n    filter(perc_identity &gt;=90) |&gt;\n    select(query, db) |&gt;\n    inner_join(fams_monocots, by = c(\"db\" = \"gene\")) |&gt;\n    select(family, species, gene = query) |&gt;\n    arrange(family)\n\nfam_pap &lt;- top_hits$pap_pap_target |&gt;\n    filter(perc_identity &gt;=35) |&gt;\n    select(query, db) |&gt;\n    inner_join(fams_monocots, by = c(\"db\" = \"gene\")) |&gt;\n    select(family, species, gene = query) |&gt;\n    arrange(family) |&gt;\n    mutate(species = \"pap\")\n\nNow, combining gene-by-family tables in a single object.\n\ngene_fams &lt;- bind_rows(fam_ath, fam_gma, fam_pap, fam_hvu, fam_zma) |&gt;\n    as.data.frame()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html#obtaining-functional-annotation",
    "href": "chapters/02_obtaining_duplicates_and_rates.html#obtaining-functional-annotation",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "2.4 Obtaining functional annotation",
    "text": "2.4 Obtaining functional annotation\nHere, we will obtain functional annotations for all genes in each species.\n\n# Get GO annotation for each species\nread_plaza_go &lt;- function(url) {\n    \n    df &lt;- read_tsv(\n        url,\n        show_col_types = FALSE, comment = \"# \"\n    ) |&gt;\n        dplyr::select(gene = `#gene_id`, term = description)\n    \n    return(df)\n}\nath_go &lt;- read_plaza_go(\"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GO/go.ath.csv.gz\")\n\ngma_go &lt;- read_plaza_go(\"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GO/go.gma.csv.gz\") |&gt;\n    mutate(gene = str_replace_all(gene, \"Glyma\\\\.\", \"GLYMA_\"))\n\nzma_go &lt;- read_plaza_go(\"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GO/go.zma.csv.gz\")\n\npap_go &lt;- read_tsv(\n    \"https://orchidstra2.abrc.sinica.edu.tw/orchidstra2/pagenome/padownload/P_aphrodite_v1.0_gene_def_GO_KEGG.gz\", show_col_types = FALSE\n) |&gt;    \n    dplyr::select(gene = `Gene ID`, term = `GO Names`) |&gt;\n    mutate(term = tidyr::replace_na(term, \"None\")) |&gt;\n    separate_longer_delim(term, delim = \";\") |&gt;\n    mutate(term = str_squish(term))\n\nhvu_go &lt;- read_tsv(here(\"data\", \"hvu_biomart.txt\"), show_col_types = FALSE) |&gt;\n    dplyr::select(gene = 1, term = `GO term name`) |&gt;\n    mutate(term = tidyr::replace_na(term, \"None\")) |&gt;\n    dplyr::distinct()\n\n# Get annotation in a list\nfunctional_annot &lt;- list(\n    Ath = ath_go,\n    Gma = gma_go, \n    Pap = pap_go,\n    Zma = zma_go,\n    Hvu = hvu_go\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html#saving-objects",
    "href": "chapters/02_obtaining_duplicates_and_rates.html#saving-objects",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "2.5 Saving objects",
    "text": "2.5 Saving objects\nNow that we have classified duplicate gene pairs and genes, we will save them to separate .rds files for each species. Each .rds file will contain a list with elements pairs and genes containing the duplicate pairs and genes, respectively.\n\n# Create a list with duplicate pairs and genes for each species\ndup_list &lt;- list(\n    ath = list(pairs = ath_kaks, genes = ath_dups),\n    gma = list(pairs = gma_kaks, genes = gma_dups),\n    pap = list(pairs = pap_kaks, genes = pap_dups),\n    zma = list(pairs = zma_kaks, genes = zma_dups),\n    hvu = list(pairs = hvu_kaks, genes = hvu_dups)\n)\n\n# Save objects\n## List with dup pairs (+ substitution rates) and genes for each species\nsaveRDS(\n    dup_list, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"dup_list.rds\")\n)\n\n## Duplicate pairs classified by age groups\nsaveRDS(\n    pairs_byage, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"pairs_by_age_group.rds\")\n)\n\n## Gene family assignments\nsaveRDS(\n    gene_fams, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"gene_families.rds\")\n)\n\n## Functional annotation\nsaveRDS(\n    functional_annot, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"functional_annotation.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html#session-info",
    "href": "chapters/02_obtaining_duplicates_and_rates.html#session-info",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2025-02-28\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.4.1)\n ade4                   1.7-22    2023-02-06 [1] CRAN (R 4.4.1)\n AnnotationDbi          1.66.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n ape                    5.8       2024-04-11 [1] CRAN (R 4.4.1)\n Biobase                2.64.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics           0.50.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocIO                 1.14.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23   2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1    2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1    2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.4.1)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.4.1)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0     2024-05-16 [1] CRAN (R 4.4.1)\n cli                    3.6.3     2024-06-21 [1] CRAN (R 4.4.1)\n coda                   0.19-4.1  2024-01-31 [1] CRAN (R 4.4.1)\n codetools              0.2-20    2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.4.1)\n crayon                 1.5.3     2024-06-20 [1] CRAN (R 4.4.1)\n curl                   5.2.1     2024-03-01 [1] CRAN (R 4.4.1)\n DBI                    1.2.3     2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1    2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36    2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.4.1)\n doubletrouble        * 1.5.2     2024-10-02 [1] Bioconductor\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.4.1)\n evaluate               0.24.0    2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.4.1)\n fastmap                1.2.0     2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.4.1)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb           1.40.1    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12    2024-07-24 [1] Bioconductor\n GenomicAlignments      1.40.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomicFeatures        1.56.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomicRanges          1.56.1    2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggnetwork              0.5.13    2024-02-14 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1     2024-04-23 [1] CRAN (R 4.4.1)\n glue                   1.7.0     2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5     2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1   2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7     2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3     2024-03-13 [1] CRAN (R 4.4.1)\n intergraph             2.0-4     2024-02-01 [1] CRAN (R 4.4.1)\n IRanges                2.38.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1    2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48      2024-07-07 [1] CRAN (R 4.4.1)\n lattice                0.22-6    2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.4.1)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61    2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0     2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics         1.16.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats            1.3.0     2024-04-11 [1] CRAN (R 4.4.1)\n mclust                 6.1.1     2024-04-29 [1] CRAN (R 4.4.1)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.4.1)\n MSA2dist               1.8.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n munsell                0.5.1     2024-04-01 [1] CRAN (R 4.4.1)\n network                1.18.2    2023-12-05 [1] CRAN (R 4.4.1)\n nlme                   3.1-165   2024-06-06 [1] CRAN (R 4.4.1)\n pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.4.1)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.4.1)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.4.1)\n pwalign                1.0.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13    2024-07-17 [1] CRAN (R 4.4.1)\n RCurl                  1.98-1.16 2024-07-11 [1] CRAN (R 4.4.1)\n readr                * 2.1.5     2024-01-10 [1] CRAN (R 4.4.1)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.4.1)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4     2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27      2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.4.1)\n Rsamtools              2.20.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n RSQLite                2.3.7     2024-05-27 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0    2024-03-24 [1] CRAN (R 4.4.1)\n rtracklayer            1.64.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n S4Arrays               1.4.1     2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors              0.42.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.4.1)\n seqinr                 4.2-36    2023-12-08 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.4.1)\n SparseArray            1.4.8     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n statnet.common         4.9.0     2023-05-24 [1] CRAN (R 4.4.1)\n stringi                1.8.4     2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment   1.34.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n syntenet             * 1.7.1     2024-10-08 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1     2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1     2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0     2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.4.1)\n withr                  3.0.0     2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46      2024-07-18 [1] CRAN (R 4.4.1)\n XML                    3.99-0.17 2024-06-25 [1] CRAN (R 4.4.1)\n XVector                0.44.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9     2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/02_obtaining_duplicates_and_rates.html#references",
    "href": "chapters/02_obtaining_duplicates_and_rates.html#references",
    "title": "2  Obtaining duplicate genes and gene pairs",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, and Yves Van de Peer. 2024. “Doubletrouble: An r/Bioconductor Package for the Identification, Classification, and Analysis of Gene and Genome Duplications.” bioRxiv, 2024–02.\n\n\nVan Bel, Michiel, Francesca Silvestri, Eric M Weitz, Lukasz Kreft, Alexander Botzki, Frederik Coppens, and Klaas Vandepoele. 2022. “PLAZA 5.0: Extending the Scope and Power of Comparative and Functional Genomics in Plants.” Nucleic Acids Research 50 (D1): D1468–74.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Obtaining duplicate genes and gene pairs</span>"
    ]
  },
  {
    "objectID": "chapters/03_genelevel_analyses.html",
    "href": "chapters/03_genelevel_analyses.html",
    "title": "3  Gene-level analyses",
    "section": "",
    "text": "3.1 Expression levels of duplicated genes\nHere, we will investigate if genes from particular duplication modes display significantly higher or lower expression levels compared to other duplication modes. We will start by calculating the sum and mean expression levels for all genes across samples combined.\n# Combine all `SpatialExperiment` objects in a single list\nspe_all &lt;- list(\n    ath = ath_spe,\n    gma = gma_spe,\n    pap = pap_spe,\n    zma = zma_spe, \n    hvu = hvu_spe\n)\n\n# Get sum of gene expression levels across all samples\nsum_all &lt;- Reduce(rbind, lapply(names(spe_all), function(x) {\n    \n    samples &lt;- names(spe_all[[x]])\n    sum_df &lt;- Reduce(rbind, lapply(samples, function(y) {\n        \n        df &lt;- rowSums(logcounts(spe_all[[x]][[y]])) |&gt;\n            as.data.frame() |&gt;\n            select(exp = 1) |&gt;\n            tibble::rownames_to_column(\"gene\") |&gt;\n            inner_join(dup_list[[x]]$genes, by = \"gene\") |&gt;\n            mutate(sample = y)\n            \n        return(df)\n    })) |&gt;\n        mutate(species = x)\n    \n    return(sum_df)\n})) |&gt;\n    mutate(type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")))\n\n# Get mean of gene expression levels across all samples\nmean_all &lt;- Reduce(rbind, lapply(names(spe_all), function(x) {\n    \n    samples &lt;- names(spe_all[[x]])\n    mean_df &lt;- Reduce(rbind, lapply(samples, function(y) {\n        \n        df &lt;- rowMeans(logcounts(spe_all[[x]][[y]]), na.rm = TRUE) |&gt;\n            as.data.frame() |&gt;\n            select(exp = 1) |&gt;\n            tibble::rownames_to_column(\"gene\") |&gt;\n            inner_join(dup_list[[x]]$genes, by = \"gene\") |&gt;\n            mutate(sample = y)\n            \n        return(df)\n    })) |&gt;\n        mutate(species = x)\n    \n    return(mean_df)\n})) |&gt;\n    mutate(type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")))\nNow, we will compare distributions using a Kruskal-Wallis test followed by a post-hoc Dunn test. Then, we will visualize distributions with CLD indicating significant differences (if any).\n# Get summary estimates for all samples combined\n## Sum\nsum_combined &lt;- sum_all |&gt;\n    group_by(gene) |&gt;\n    mutate(\n        csum = sum(exp), \n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")) \n    ) |&gt;\n    ungroup() |&gt;\n    select(gene, type, species, csum) |&gt;\n    distinct(gene, .keep_all = TRUE)\n\n## Mean\nmean_combined &lt;- mean_all |&gt;\n    group_by(gene) |&gt;\n    mutate(\n        cmean = mean(exp, na.rm = TRUE), \n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    ) |&gt;\n    ungroup() |&gt;\n    select(gene, type, species, cmean) |&gt;\n    distinct(gene, .keep_all = TRUE)\n    \n# Compare distros and get CLDs\n## Sum\nsum_clds &lt;- lapply(\n    split(sum_combined, sum_combined$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"csum\"\n) |&gt;\n    bind_rows(.id = \"species\") |&gt;\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(3500, 2500, 5500, 4500, 3500)\n        )\n    ) |&gt;\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |&gt;\n    dplyr::rename(type = Group)\n\n## Mean\nmean_clds &lt;- lapply(\n    split(mean_combined, mean_combined$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"cmean\"\n) |&gt;\n    bind_rows(.id = \"species\") |&gt;\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(0.4, 0.4, 0.9, 0.4, 0.4)\n        )\n    ) |&gt;\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |&gt;\n    dplyr::rename(type = Group)\n\n# Plot distros with CLDs\n## Sum\np_sum_combined &lt;- ggplot(sum_combined, aes(x = csum, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    geom_label(\n        data = sum_clds,\n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    ggh4x::facetted_pos_scales(x = list(\n        scale_x_continuous(\n            limits = c(0, 4e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 3e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 6e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 5e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        ),\n        scale_x_continuous(\n            limits = c(0, 4e3),\n            labels = scales::unit_format(unit = \"K\", scale = 1e-3)\n        )\n    )) +\n    labs(\n        x = \"Sum of log-transformed normalized counts\", y = NULL,\n        title = \"Total expression levels and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P &lt;0.05\"\n    ) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n\n## Mean\np_mean_combined &lt;- ggplot(mean_combined, aes(x = cmean, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    geom_label(\n        data = mean_clds, \n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    ggh4x::facetted_pos_scales(x = list(\n        scale_x_continuous(limits = c(0, 0.5)),\n        scale_x_continuous(limits = c(0, 0.5)),\n        scale_x_continuous(limits = c(0, 1)),\n        scale_x_continuous(limits = c(0, 0.5)),\n        scale_x_continuous(limits = c(0, 0.5))\n    )) +\n    labs(\n        x = \"Mean of log-transformed normalized counts\", y = NULL,\n        title = \"Mean expression level and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P &lt;0.05\"\n    ) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\nThe figures show that, overall, segmental, tandem, and proximal duplicates display higher expression levels compared to duplicated originating from other duplication modes, especially dispersed duplicates. In germinating barley seeds, however, retrotransposed duplicates display the highest expression values. Nevertheless, there seems to be an association between higher expression levels and duplication modes that tend to preserve cis-regulatory landscapes (SD, TD, and PD).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gene-level analyses</span>"
    ]
  },
  {
    "objectID": "chapters/03_genelevel_analyses.html#expression-breadths-of-duplicated-genes",
    "href": "chapters/03_genelevel_analyses.html#expression-breadths-of-duplicated-genes",
    "title": "3  Gene-level analyses",
    "section": "3.2 Expression breadths of duplicated genes",
    "text": "3.2 Expression breadths of duplicated genes\nWe will now calculate the expression breadths (i.e., number of cell types in which genes are expressed) for all duplicated genes, and test for differences in expression breadth by duplication mode.\nWe will start with the actual calculation of absolute expression breadth. Here, we will define gene i as expressed in cell type k if it is detected in at least 5% of the spots corresponding to cell type k.\n\n#' Calculate the proportion of non-zero spots for each gene by cell type\n#'\n#' @param spe A SpatialExperiment object.\n#' @param cell_type Character, name of the column with cell type information.\n#'\n#' @return A data frame with variables `gene`, `cell_type`, and `prop_detected`.\nget_prop_detected &lt;- function(spe, cell_type = \"cell_type\") {\n    \n    prop_detected &lt;- scuttle::aggregateAcrossCells(\n        spe, statistics = \"prop.detected\",\n        ids = spe[[cell_type]]\n    ) |&gt;\n        assay() |&gt;\n        reshape2::melt() |&gt;\n        dplyr::select(gene = Var1, cell_type = Var2, prop_detected = value) |&gt;\n        mutate(cell_type = as.character(cell_type))\n    \n    return(prop_detected)\n}\n\n# Get proportion of gene detection (non-zero counts) by cell type\nprop_detected &lt;- list(\n    Ath = lapply(spe_all$ath, get_prop_detected) |&gt; bind_rows(.id = \"sample\"),\n    Gma = lapply(spe_all$gma, get_prop_detected, \"annotation\") |&gt; bind_rows(.id = \"sample\"),\n    Pap = lapply(spe_all$pap, get_prop_detected, \"clusters\") |&gt; bind_rows(.id = \"sample\"),\n    Zma = lapply(spe_all$zma, get_prop_detected, \"cell_type\") |&gt; bind_rows(.id = \"sample\"),\n    Hvu = lapply(spe_all$hvu, get_prop_detected, \"tissue\") |&gt; bind_rows(.id = \"sample\")\n) |&gt; \n    bind_rows(.id = \"species\")\n\n# Calculate absolute expression breadth\neb &lt;- prop_detected |&gt;\n    group_by(species, gene, cell_type) |&gt;\n    mutate(mean_prop = mean(prop_detected, na.rm = TRUE)) |&gt;\n    ungroup() |&gt;\n    filter(mean_prop &gt;=0.01) |&gt;\n    distinct(gene, cell_type, .keep_all = TRUE) |&gt;\n    dplyr::count(species, gene) |&gt;\n    inner_join(\n        bind_rows(\n            dup_list$ath$genes,\n            dup_list$gma$genes,\n            dup_list$pap$genes,\n            dup_list$zma$genes,\n            dup_list$hvu$genes\n        )\n    ) |&gt;\n    mutate(\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    )\n\nNow, we will test for differences by duplication mode using Kruskal-Wallis + post-hoc Dunn’s tests, as implemented in the wrapper function cld_kw_dunn.\n\n# Test for differences in expression breadth by duplication mode\neb_test &lt;- lapply(\n    split(eb, eb$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"n\"\n) |&gt;\n    bind_rows(.id = \"species\") |&gt;\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(5.5, 5.5, 2, 14, 16.5)\n        )\n    ) |&gt;\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |&gt;\n    dplyr::rename(type = Group)\n\nNext, we will visualize distributions of expression breadths for genes originating from different duplication modes.\n\n# Plot distributions of absolute expression breadths\np_eb &lt;- ggplot(eb, aes(x = n, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_label(\n        data = eb_test, \n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg)\n    ) +\n    labs(\n        title = \"Absolute expression breadth and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P &lt;0.05\",\n        x = \"Number of cell types in which gene is detected\",\n        y = NULL\n    )\n\n\n\n\n\n\n\n\n\n\nThe figure shows that there are significant differences in expression breadth depending on how genes were duplicated. Importantly, as we observed for expression levels, duplication mechanisms resulting in shared cis-regulatory landscapes (SD, TD, PD) tend to create genes with greater expression breadth (i.e., expressed in more cell types).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gene-level analyses</span>"
    ]
  },
  {
    "objectID": "chapters/03_genelevel_analyses.html#spatial-variability-of-duplicated-genes",
    "href": "chapters/03_genelevel_analyses.html#spatial-variability-of-duplicated-genes",
    "title": "3  Gene-level analyses",
    "section": "3.3 Spatial variability of duplicated genes",
    "text": "3.3 Spatial variability of duplicated genes\nHere, we will identify spatially variable genes (SVGs) and test if they are enriched in genes originating from particular duplication modes. We will start by inferring SVGs using DESpace (Cai, Robinson, and Tiberi 2024) using cell types as spatial clusters. Genes will be considered SVGs if FDR &lt;0.05.\n\n# Define helper function to identify SVGs with DESpace\nget_svg &lt;- function(spe, spatial_cluster = \"clusters\") {\n    \n    # Get gene-wise test statistics\n    res &lt;- DESpace_test(\n        spe = spe,\n        spatial_cluster = spatial_cluster,\n        replicates = FALSE,\n        min_counts = 1,\n        min_non_zero_spots = 5\n    )\n    gc()\n    \n    # Get a data frame of test statistics for significant SVGs\n    res_df &lt;- res$gene_results |&gt;\n        as.data.frame() |&gt;\n        dplyr::filter(!is.na(FDR), FDR &lt;= 0.05)\n    \n    return(res_df)\n}\n\n# Identify SVGs\nsvgs &lt;- list(\n    ath = lapply(ath_spe, get_svg, spatial_cluster = \"cell_type\"),\n    gma = lapply(gma_spe, get_svg, spatial_cluster = \"annotation\"),\n    pap = lapply(pap_spe, get_svg, spatial_cluster = \"clusters\"),\n    zma = lapply(zma_spe, get_svg, spatial_cluster = \"cell_type\"),\n    hvu = lapply(hvu_spe, get_svg, spatial_cluster = \"tissue\")\n)\n\nNow, we will test if SVGs are enriched in duplicated genes from a particular duplication mode.\n\n# Define helper function to perform ORA for duplication modes\nora_dupmode &lt;- function(svg_df, dup_df) {\n    \n    df &lt;- HybridExpress::ora(\n        genes = svg_df$gene_id,\n        annotation = as.data.frame(dup_df),\n        background = dup_df$gene,\n        min_setsize = 2,\n        max_setsize = 1e8\n    )\n    \n    return(df)\n}\n\n# Perform overrepresentation analysis for duplication modes\nsp &lt;- names(dup_list)\nora_svg_dup &lt;- lapply(sp, function(x) {\n    \n    df &lt;- lapply(svgs[[x]], ora_dupmode, dup_list[[x]]$genes) |&gt;\n        bind_rows(.id = \"sample\") |&gt;\n        mutate(species = x)\n    \n    return(df)\n}) |&gt;\n    bind_rows() |&gt;\n    dplyr::select(species, sample, type = term, genes, all, padj)\n\nInterestingly, SVGs are enriched in SD-derived genes in most of the samples and in TRD-derived genes in some samples, revealing an association between these duplication modes and spatial variability in expression.\nNext, let’s create a data frame summarizing the frequency of SVGs per duplication mode, highlighting overrepresented results.\n\n# Define helper function to get frequency of SVGs per duplication mode\nget_dup_freqs &lt;- function(svg_list, dup_df, ora_df) {\n    \n    freq_df &lt;- lapply(svg_list, function(x) {\n        \n        df &lt;- left_join(x, dup_df, by = c(\"gene_id\" = \"gene\")) |&gt;\n            drop_na(type) |&gt;\n            mutate(\n                type = factor(\n                    type, \n                    levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")\n                )\n            ) |&gt;\n            dplyr::count(type, .drop = FALSE) |&gt;\n            as.data.frame()\n        \n        return(df)\n    }) |&gt;\n        bind_rows(.id = \"sample\") |&gt;\n        left_join(ora_df |&gt; select(sample, type, padj)) |&gt;\n        mutate(\n            symbol = case_when(\n                padj &gt; 0.05 ~ \"\",\n                padj &gt; 0.01 ~ \"*\",\n                padj &gt; 0.001 ~ \"**\",\n                !is.na(padj) ~ \"***\",\n                TRUE ~ NA_character_\n            )\n        )\n    \n    return(freq_df)\n}\n\n# Get frequency of SVGs per duplication mode\nsvg_dupmode_freqs &lt;- lapply(sp, function(x) {\n    \n    df &lt;- get_dup_freqs(svgs[[x]], dup_list[[x]]$genes, ora_svg_dup) |&gt;\n        mutate(species = x)\n    \n    return(df)\n}) |&gt;\n    bind_rows() |&gt;\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    ) |&gt;\n    distinct()\n\nNow, let’s visualize results as a heatmap with cells colored by scaled counts (by duplication mode) and significance asterisks highlighted.\n\n# Create plot\np_heatmap &lt;- svg_dupmode_freqs |&gt;\n    mutate(\n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    ) |&gt;\n    group_by(sample) |&gt;\n    mutate(scaled_n = scale(n, center = FALSE)) |&gt;\n    ungroup() |&gt;\n    # Add code to scale counts by sample\n    ggplot(aes(x = sample, y = type, fill = scaled_n)) +\n    geom_tile(color = \"gray90\", linewidth = 0.8) +\n    geom_text(aes(label = symbol), color = \"gray20\", size = 4) +\n    facet_grid(. ~ species, scales = \"free_x\", space = \"free\") +\n    scale_fill_gradient(low = \"#D6E5F4\", high = \"#2171B5\") +\n    theme_classic() +\n    theme(\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        legend.position = \"bottom\"\n    ) +\n    labs(\n        title = \"Frequency of spatially variable genes by duplication mode\",\n        subtitle = \"Asterisks indicate significant overrepresentation\",\n        x = \"Samples\", y = NULL, fill = \"Scaled counts\"\n    )",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gene-level analyses</span>"
    ]
  },
  {
    "objectID": "chapters/03_genelevel_analyses.html#saving-objects",
    "href": "chapters/03_genelevel_analyses.html#saving-objects",
    "title": "3  Gene-level analyses",
    "section": "Saving objects",
    "text": "Saving objects\nFinally, we will save important objects to reuse later.\n\n# Save objects as .rds files ----\n## SVGs\nsaveRDS(\n    svgs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"svg_list.rds\")\n)\n\n## Data frame with ORA results - duplication mode and SVGs\nsaveRDS(\n    ora_svg_dup, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"ORA_svg_and_duplication_mode.rds\")\n)\n\n## Frequency of SVGs per duplication mode in each sample and species\nsaveRDS(\n    svg_dupmode_freqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"svg_frequency_by_dupmode.rds\")\n)\n\n# Save plots ----\nsaveRDS(\n    p_sum_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"total_expression_by_duplication_mode.rds\")\n)\n\nsaveRDS(\n    p_mean_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"mean_expression_by_duplication_mode.rds\")\n)\n\nsaveRDS(\n    p_eb, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"expression_breadth_by_duplication_mode.rds\")\n)\n\nsaveRDS(\n    p_heatmap, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"heatmap_svgs_by_dupmode.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gene-level analyses</span>"
    ]
  },
  {
    "objectID": "chapters/03_genelevel_analyses.html#session-info",
    "href": "chapters/03_genelevel_analyses.html#session-info",
    "title": "3  Gene-level analyses",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n assertthat             0.2.1      2019-03-21 [1] CRAN (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocParallel           1.38.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n codetools              0.2-20     2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n cowplot                1.1.3      2024-01-22 [1] CRAN (R 4.4.1)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4     2024-03-30 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DESpace              * 1.4.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1      2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggforce                0.4.2      2024-02-19 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggnewscale             0.5.0      2024-07-19 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4     2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10   2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n polyclip               1.10-7     2024-07-23 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0      2023-01-06 [1] CRAN (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tweenr                 2.0.3      2024-02-26 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gene-level analyses</span>"
    ]
  },
  {
    "objectID": "chapters/03_genelevel_analyses.html#references",
    "href": "chapters/03_genelevel_analyses.html#references",
    "title": "3  Gene-level analyses",
    "section": "References",
    "text": "References\n\n\n\n\nCai, Peiying, Mark D Robinson, and Simone Tiberi. 2024. “DESpace: Spatially Variable Gene Detection via Differential Expression Testing of Spatial Clusters.” Bioinformatics 40 (2): btae027.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Gene-level analyses</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html",
    "href": "chapters/04_expression_divergence_correlations.html",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "",
    "text": "4.1 Handling sparsity: aggregating counts in SpatialExperiment objects\nAs demonstrated by Morabito et al. (2023), it is nearly impossible to get high gene-gene correlations in single-cell (and, hence, spatial) transcriptomics data because of the inherent sparsity of such data. A proposed solution is to aggregate cells/spots into metacells/metaspots, what appears to solve the sparsity problem. Another solution that works is to use pseudobulk (aggregating counts by spatial domains), but this can lead to a very small number of columns for samples with a small number of identified spatial domains, introducing biases to correlations.\nHere, we will use a helper function aggregate_spots() to aggregate counts into metaspots comprised of ~N spots using k-means clustering (k = number of spots / N) for each spatial domain separately. After aggregating counts, aggregate_spots() calculates size factors with scater::computeLibraryFactors() and generates a logcounts assay with scater::logNormCounts().\nIn hdWGCNA (Morabito et al. 2023), authors suggest using 7 spots (a spot and its neighbors). However, plant cells are much larger than animals cells. Thus, using metaspots comprised of 7 spots might not sufficiently overcome the challenges of calculating correlations from sparse data. To address that, we will select a sample from each data set, and calculate gene-gene correlations using metaspots comprised of 10 to 50 spots in intervals of 10. Then, we will visualize distributions of gene-gene correlations to choose a suitable metaspot size.\n# Calculate gene-gene correlations from a sample using increasingly large metaspots\nnum_spots &lt;- seq(10, 50, by = 10)\n\nsim_cor &lt;- lapply(num_spots, function(n) {\n    \n    ## Wrapper function to handle `nspots` greater than spot count for a spatial domain\n    nspots &lt;- function(spe, domain = \"cell_type\") {\n        nmin &lt;- min(table(spe[[domain]]))\n        n &lt;- ifelse(n &gt; nmin, nmin, n)\n        return(n)\n    }\n    \n    # Create metaspot-level counts\n    spes &lt;- list(\n        ath = ath_spe[[1]],\n        gma = gma_spe[[1]],\n        pap = pap_spe[[1]],\n        zma = zma_spe[[1]],\n        hvu = hvu_spe[[1]]\n    )\n    \n    spe_metaspots &lt;- list(\n        ath = aggregate_counts(\n            spes$ath, spatial_domain = \"cell_type\", \n            nspots = nspots(spes$ath, \"cell_type\")\n        ),\n        pap = aggregate_counts(\n            spes$pap, spatial_domain = \"clusters\", \n            nspots = nspots(spes$pap, \"clusters\")\n        ),\n        gma = aggregate_counts(\n            spes$gma, spatial_domain = \"annotation\", \n            nspots = nspots(spes$gma, \"annotation\")\n        ),\n        zma = aggregate_counts(\n            spes$zma, spatial_domain = \"cell_type\", \n            nspots = nspots(spes$zma, \"cell_type\"), iter.max = 100\n        ),\n        hvu = aggregate_counts(\n            spes$hvu, spatial_domain = \"tissue\", \n            nspots = nspots(spes$hvu, \"tissue\")\n        )\n    )\n    \n    # Calculate gene-gene correlations\n    rho_metaspots &lt;- lapply(names(spe_metaspots), function(x) {\n        \n        rho_df &lt;- calculate_cor(\n            spe_metaspots[[x]], dups = dup_pairs[[x]],\n            assay_name = \"logcounts\"\n        ) |&gt;\n            mutate(nspots = n) |&gt;\n            mutate(species = x)\n        \n        return(rho_df)\n    }) |&gt;\n        bind_rows()\n    \n    return(rho_metaspots)\n}) |&gt;\n    bind_rows()\n\n\n# Create a density plot with correlation distros for each number of spots\np_simcor &lt;- sim_cor |&gt;\n    filter(!is.na(cor)) |&gt;\n    mutate(\n        species = str_to_title(species),\n        nspots = as.factor(nspots)\n    ) |&gt;\n    ggplot(aes(x = cor, color = nspots, fill = nspots)) +\n    geom_density(alpha = 0.1) +\n    scale_color_viridis_d() +\n    scale_fill_viridis_d() +\n    facet_wrap(~species, nrow = 1) +\n    xlim(-1, 1) +\n    theme_classic() +\n    labs(\n        title = \"Distribution of gene-gene correlations for increasingly large metaspots\",\n        subtitle = \"Correlations between paralogous gene pairs only\",\n        x = expression(\"Spearman's\" ~ rho),\n        y = \"Density\", fill = \"# spots\", color = \"# spots\"\n    )\nThe plot shows that metaspots comprised of 30 spots can sufficiently reduce the amount of noise in gene-gene correlations arising from sparsity. Thus, we will now create SpatialExperiment objects at the metaspot-level using metaspots of size 30. Exceptions will be made for samples in which the smallest spatial domain has less than 30 spots. In such cases, the size of the metaspot will be number of spots in the smallest domain.\n# Aggregating counts using metaspots\nspe_metaspots &lt;- list(\n    ath = lapply(\n        ath_spe, aggregate_counts, spatial_domain = \"cell_type\", nspots = 30\n    ),\n    gma = lapply(\n        gma_spe, aggregate_counts, spatial_domain = \"annotation\", nspots = 30\n    ),\n    pap = lapply(\n        pap_spe, aggregate_counts, spatial_domain = \"clusters\", nspots = 30\n    ),\n    zma = lapply(\n        zma_spe, aggregate_counts, spatial_domain = \"cell_type\", \n        iter.max = 100, nspots = 30\n    ),\n    hvu = lapply(\n        hvu_spe, aggregate_counts, spatial_domain = \"tissue\", nspots = 30\n    )\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#comparing-distributions-of-gene-gene-correlations-by-duplication-mode",
    "href": "chapters/04_expression_divergence_correlations.html#comparing-distributions-of-gene-gene-correlations-by-duplication-mode",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "4.2 Comparing distributions of gene-gene correlations by duplication mode",
    "text": "4.2 Comparing distributions of gene-gene correlations by duplication mode\nHere, we will calculate Spearman’s correlations between duplicate pairs and compare the distributions of correlation coefficients by duplication mode.\n\n# Calculate Spearman's correlations\nrho_metaspots &lt;- lapply(names(spe_metaspots), function(x) {\n    \n    rho_df &lt;- lapply(\n        spe_metaspots[[x]], calculate_cor, dups = dup_pairs[[x]],\n        assay_name = \"logcounts\"\n    ) |&gt;\n        dplyr::bind_rows(.id = \"sample\")\n    \n    return(rho_df)\n})\nnames(rho_metaspots) &lt;- names(spe_metaspots)\n\n# Remove missing values\nrho_metaspots &lt;- lapply(rho_metaspots, function(x) {\n    return(x[!is.na(x$cor), ])\n})\n\nNext, for each sample, we will test for significant differences by duplication mode using Kruskal-Wallis tests followed by a post-hoc Dunn’s test. To account for differences in ages between gene pairs, we will do this separately for each age group.\n\n# Add age group info to pairs\nrho_metaspots_age &lt;- lapply(seq_along(rho_metaspots), function(x) {\n    return(pairs_age[[x]] |&gt; dplyr::inner_join(rho_metaspots[[x]]))\n})\nnames(rho_metaspots_age) &lt;- names(rho_metaspots)\n\n# Compare distros\n#' Wrapper function to compare distros with Kruskal-Wallis + Dunn\ncompare_cors &lt;- function(rho_df) {\n    \n    # Add a variable indicating sample + Ks peak\n    rho_df$id &lt;- paste0(rho_df$sample, \"_\", rho_df$peak)\n    ids &lt;- unique(rho_df$id)\n    \n    # Perform tests and get CLD for each sample-peak\n    cld_df &lt;- Reduce(rbind, lapply(ids, function(x) {\n        \n        fdf &lt;- rho_df[rho_df$id == x, ]\n        \n        # Perform Kruskal-Wallis test followed by a post-hoc Dunn's test\n        cld &lt;- cld_kw_dunn(fdf, value = \"cor\")\n        cld$sample &lt;- unique(fdf$sample)\n        cld$peak &lt;- unique(fdf$peak)\n        \n        return(cld)\n    }))\n    \n    \n    \n    return(cld_df)\n}\n\n# Combine test results into a single data frame\ncomp_metaspots &lt;- bind_rows(\n    compare_cors(rho_metaspots_age$ath) |&gt; mutate(species = \"Ath\"),\n    compare_cors(rho_metaspots_age$gma) |&gt; mutate(species = \"Gma\"),\n    compare_cors(rho_metaspots_age$pap) |&gt; mutate(species = \"Pap\"),\n    compare_cors(rho_metaspots_age$zma) |&gt; mutate(species = \"Zma\"),\n    compare_cors(rho_metaspots_age$hvu) |&gt; mutate(species = \"Hvu\")\n) \n\nNow, we will visualize results with a heatmap showing CLDs for all samples.\n\n# Plot heatmap with CLDs\np_heatmap_rho &lt;- comp_metaspots |&gt;\n    mutate(\n        Group = factor(\n            Group, levels = rev(c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n        )\n    ) |&gt;\n    ggplot(aes(x = sample, y = Group, fill = Letter)) +\n    geom_tile(color = \"gray90\", linewidth = 0.8, alpha = 0.7) +\n    geom_text(aes(label = Letter), size = 3) +\n    ggh4x::facet_nested(~ species + peak, scales = \"free\", space = \"free\") +\n    theme_classic() +\n    theme(\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank()\n    ) +\n    labs(\n        title = \"Differences in gene-gene correlations by duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P &lt;0.05\",\n        x = \"Samples\", y = \"Mode\"\n    ) +\n    theme(\n        legend.position = \"none\"\n    ) +\n    ggsci::scale_fill_npg()\n\np_heatmap_rho\n\n\n\n\n\n\n\n\n\n\nThe heatmap shows that differences in expression divergence by duplication modes vary not only by species, but also by sample (slide). To account for variations across samples, we will repeat the analyses above, but now using the mean correlations for each gene pair across samples (so that we have a single, summarized distribution for each species). Then, we will compare the distributions of gene-gene correlations by duplication mode as done before.\n\n# Get mean Fisher's Z-transformed rho estimates\nzrho_mean &lt;- bind_rows(rho_metaspots_age, .id = \"species\") |&gt;\n    mutate(\n        cor = signif(cor, 1),\n        cor = 0.5 * log((1 + cor) / (1 - cor)),\n        pair = str_c(dup1, dup2, sep = \"_\"),\n        species_peak = str_c(species, peak, sep = \"_\")\n    ) |&gt;\n    group_by(pair, peak) |&gt;\n    mutate(mean_cor = mean(cor)) |&gt;\n    ungroup() |&gt;\n    distinct(pair, peak, .keep_all = TRUE) |&gt;\n    mutate(\n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        peak = as.character(peak)\n    ) |&gt;\n    dplyr::select(-c(sample, cor, pair))\n\n# Compare distributions\nzrho_cld &lt;- lapply(\n    split(zrho_mean, zrho_mean$species_peak),\n    cld_kw_dunn, value = \"mean_cor\"\n) |&gt;\n    bind_rows(.id = \"species_peak\") |&gt;\n    tidyr::separate(species_peak, c(\"species\", \"peak\"), sep = \"_\") |&gt;\n    dplyr::rename(type = Group) |&gt;\n    mutate(\n        species = str_to_title(species),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        peak = as.character(peak)\n    )\n\n# Plot distributions with CLDs\np_zrho_mean &lt;- ggplot(zrho_mean, aes(x = mean_cor, y = type)) +\n    geom_violin(aes(fill = type), scale = \"width\", show.legend = FALSE) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    geom_label(\n        data = zrho_cld,\n        aes(x = 0.9, y = type, label = Letter)\n    ) +\n    ggh4x::facet_nested(~ species + peak, scales = \"free\", space = \"free\") +\n    labs(\n        x = expression(\"Fisher's z-transformed\" ~ rho), \n        y = NULL,\n        title = \"Gene-gene correlations and duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P &lt;0.05\"\n    ) +\n    scale_x_continuous(limits = c(-0.5, 1)) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n\n\n\n\n\n\n\n\n\n\nThe figure shows that differences in gene-gene correlations by duplication mode exist, but not for all species. For Arabidopsis, maize, and younger soybean duplicates, segmental and proximal duplicates (and tandem duplicates in case of maize) are more similar than duplicates derived from other modes. In Phalaenopsis sp., barley, and older soybean duplicates, there are no differences in correlations by duplication mode. Interestingly, there seems to be an effect of duplicate age on differences. For instance, in soybean, younger duplicates differ in correlations based on their duplication mode, but not older ones. Likewise, (young) maize duplicates (originated at ~16 MYA) differ in correlations based on duplication modes, but not barley duplicates, which are much older (originated at ~53 MYA). The age of duplicates could also explain why orchid duplicates did not display differences in gene-gene correlations. An exception exists for Arabidopsis, whose duplicates display differences in correlations by duplication mode despite their old ages (~51 to 72 MYA). Such discrepancies could also be partially explained by tissue-specific differences in expression divergence. For instance, duplicates originating from different modes might diverge differently in leaves (tissue profiled in the Arabidopsis data set), but not in other tissues.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#frequency-of-pairs-with-significant-expression-preservation",
    "href": "chapters/04_expression_divergence_correlations.html#frequency-of-pairs-with-significant-expression-preservation",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "4.3 Frequency of pairs with significant expression preservation",
    "text": "4.3 Frequency of pairs with significant expression preservation\nHere, to assess whether observed correlations are greater than the expected by chance (and, hence, indicating significant expression preservation), we will randomly sample 10,000 gene pairs and calculate Spearman’s correlations to generate a null distribution. Then, we will compare the observed correlations to such a null distribution to determine whether correlations are greater than the expected.\n\n# Get genes with preserved expression (rho &gt; 95% quantile)\nspecies &lt;- names(spe_metaspots)\npreserved &lt;- lapply(species, function(x) {\n    \n    df &lt;- lapply(seq_along(spe_metaspots[[x]]), function(i) {\n        \n        ## Get cut-off based on null distribution\n        pairs &lt;- data.frame(\n            dup1 = sample(rownames(spe_metaspots[[x]][[i]]), 1e4, replace = TRUE),\n            dup2 = sample(rownames(spe_metaspots[[x]][[i]]), 1e4, replace = TRUE)\n        )\n        nulls &lt;- calculate_cor(\n            spe_metaspots[[x]][[i]], dups = pairs, assay_name = \"logcounts\"\n        )\n        cutoff &lt;- quantile(nulls$cor, 0.95, na.rm = TRUE)\n        \n        # Get only pairs with rho &gt; `cutoff`\n        sample_id &lt;- names(spe_metaspots[[x]])[i]\n        preserved &lt;- rho_metaspots_age[[x]] |&gt;\n            dplyr::filter(\n                sample == sample_id, \n                cor &gt; cutoff\n            )\n        \n        return(preserved)\n    }) |&gt; dplyr::bind_rows()\n\n    return(df)\n}) |&gt; bind_rows()\n\nNow, we will test for significant associations between duplication modes and expression preservation. The goal here is to find out if pairs originating from certain duplication modes are more preserved than the expected by chance. Then, we will visualize results with a stacked barplot showing the relative frequency of preserved pairs (by mode) for each sample.\n\n# Perform enrichment of preserved genes by duplication mode\npreserved_list &lt;- preserved |&gt; \n    mutate(\n        pair = str_c(dup1, dup2, sep = \"_\"),\n        sample_peak = str_c(sample, peak, sep = \"_\")\n    ) |&gt;\n    select(pair, sample_peak)\n\npreserved_list &lt;- split(preserved_list, preserved_list$sample_peak)\n\nsea_df &lt;- lapply(preserved_list, function(x) {\n    \n    dups &lt;- bind_rows(rho_metaspots_age, .id = \"species\") |&gt;\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |&gt;\n        left_join(x, by = \"pair\") |&gt;\n        dplyr::select(pair, type)\n        \n    res_df &lt;- HybridExpress::ora(\n        genes = x$pair,\n        annotation &lt;- as.data.frame(dups),\n        background = dups$pair,\n        min_setsize = 5, max_setsize = 1e4, alpha = 0.001\n    )\n    \n    return(res_df)\n}) |&gt;\n    bind_rows(.id = \"sample_peak\")\n\n# Get relative frequency of preserved pairs by mode for each sample\npdata_preserved &lt;- preserved |&gt;\n    dplyr::count(sample, peak, type) |&gt;\n    dplyr::rename(n_preserved = n) |&gt;\n    right_join(\n        bind_rows(rho_metaspots_age) |&gt; \n            dplyr::count(sample) |&gt;\n            dplyr::rename(n_all = n)\n    ) |&gt;\n    mutate(\n        perc_preserved = n_preserved / n_all\n    ) |&gt;\n    select(sample, peak, type, perc_preserved) |&gt;\n    pivot_longer(cols = perc_preserved) |&gt;\n    left_join(\n        bind_rows(rho_metaspots_age, .id = \"species\") |&gt;\n            select(sample, species) |&gt;\n            distinct()\n    ) |&gt;\n    mutate(sample_peak = str_c(sample, peak, sep = \"_\")) |&gt;\n    left_join(\n        sea_df |&gt; dplyr::select(sample_peak, type = term, padj)\n    ) |&gt;\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = str_to_title(species)\n    ) |&gt;\n    mutate(\n        ltype = ifelse(!is.na(padj), 1, 0),\n        alpha = ifelse(!is.na(padj), 0.9, 0.2)\n    )\n\n\n# Create barplot\np_preserved &lt;- ggplot(\n    pdata_preserved, aes(x = sample, y = value)\n) +\n    geom_bar(\n        aes(fill = type, alpha = alpha),\n        position = \"stack\", stat = \"identity\"\n    ) +\n    scale_alpha_identity() +\n    ggh4x::facet_nested(~ species + peak, scales = \"free\", space = \"free\") +\n    scale_fill_manual(values = palette.colors()) +\n    theme_classic() +\n    scale_y_continuous(\n        limits = c(0, 0.10), \n        breaks = seq(0, 0.10, by = 0.05),\n        expand = expansion(mult = 0.01)\n    ) +\n    theme(\n        panel.background = element_rect(fill = bg),\n        axis.ticks.x = element_blank(),\n        axis.text.x = element_blank()\n    ) +\n    labs(\n        title = \"Relative frequency of duplicates with preserved expression\",\n        subtitle = \"Bright colors indicate significant associations; Fisher's exact test, P &lt;0.001\",\n        x = \"Samples\", y = \"Relative frequency\", \n        fill = \"Mode\"\n    )\n\np_preserved\n\n\n\n\n\n\n\n\n\n\nThe figure shows that the sets of duplicate pairs with preserved expression are significantly overrepresented in tandem and proximal duplicates in most species. An exception is the barley data set, in which there is a significant overrepresentation of retrotransposed pairs in most samples, while only one sample displays overrepresentation of tandem duplicates. The association between tandem/proximal duplicates and pairs with preserved expression is likely due to preserved cis-regulatory element between ancestral genes and copies in these duplication modes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#expression-divergence-over-time",
    "href": "chapters/04_expression_divergence_correlations.html#expression-divergence-over-time",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "4.4 Expression divergence over time",
    "text": "4.4 Expression divergence over time\nHere, we will explore how gene-gene correlations change over time using \\(K_s\\) as a proxy for time. Since there are many samples for some species, visualizing \\(\\rho\\) over time for each sample separately is not feasible. A workaround is to, for each gene pair, calculate mean correlations across samples in species S, and then use mean correlations as a summary statistic. However, we first need to make sure that correlations for the same gene pairs do not vary much across samples. To verify that, let’s calculate some measure of spread and plot them for each species.\n\n# Calculate variability of correlations for the same pair across samples\ncor_var &lt;- lapply(rho_metaspots, function(sp) {\n    \n    ## Get a wide matrix with correlations for each gene pair\n    cor_wide &lt;- sp |&gt; \n        dplyr::filter(Ks &lt;3) |&gt;\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |&gt;\n        select(pair, cor, sample) |&gt;\n        mutate(cor = 0.5 * log((1 + cor) / (1 - cor))) |&gt;\n        pivot_wider(names_from = sample, values_from = cor) |&gt;\n        tibble::column_to_rownames(\"pair\") |&gt;\n        as.matrix() \n    \n    ## Calculate metrics\n    df &lt;- data.frame(\n        SD = apply(cor_wide, 1, sd, na.rm = TRUE),\n        IQR = apply(cor_wide, 1, IQR, na.rm = TRUE),\n        Range = apply(cor_wide, 1, function(x) max(x) - min(x))\n    )\n    \n    return(df)\n}) |&gt;\n    bind_rows(.id = \"species\") |&gt;\n    mutate(species = str_to_title(species)) |&gt;\n    pivot_longer(cols = !species, names_to = \"metrics\", values_to = \"value\")\n    \n# Plot CV for each species\np_corvar &lt;- cor_var |&gt;\n    ggplot(aes(x = value, y = species)) +\n    geom_violin(aes(fill = species)) +\n    geom_boxplot(width = 0.05) +\n    facet_wrap(~metrics, scales = \"free_x\", nrow = 1) +\n    scale_fill_manual(values = palette.colors(palette = \"Accent\")) +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg),\n        legend.position = \"none\"\n    ) +\n    labs(\n        title = \"Variability of correlations for the same gene pair across samples\",\n        subtitle = \"Spearman's correlations were transformed with Fisher's z-transformation\",\n        x = \"Estimate\", y = \"Species\"\n    )\n\np_corvar\n\n\n\n\n\n\n\n\n\n\nThe figure shows that correlations for the same pairs across different samples do not vary much, despite some outliers for the A. thaliana data set. Hence, we can safely summarize correlations by using the mean correlation across data sets for each species.\nNext, we will plot a scatterplot showing mean correlations between gene pairs as a function of time (here, represented by \\(K_s\\)). Following previous papers (Gu et al. 2002; Makova and Li 2003; Ganko, Meyers, and Vision 2007), we will transform Spearman’s rho using Fisher’s z-transformation, defined as:\n\\[\\frac{1}{2} log(\\frac{1+\\rho}{1-\\rho})\\]\nHowever, we will first check which association is best supported for mean correlations and \\(K_s\\): linear or exponential. For that, we will fit two linear models for each duplication mode in each species:\n\nlm(zrho ~ Ks) - linear association\nlm(zrho ~ logks) - exponential association\n\nThen, we will use AIC and BIC to check which model is best supported.\n\n# Get mean rho for all duplicates in species\nmean_rho_all &lt;- lapply(rho_metaspots, function(sp) {\n    \n    ## Get mean cor per species\n    mrho &lt;- sp |&gt; \n        dplyr::filter(Ks &lt;3) |&gt;\n        mutate(\n            cor = signif(cor, 1),\n            cor = 0.5 * log((1 + cor) / (1 - cor)),\n            pair = str_c(dup1, dup2, sep = \"_\")\n        ) |&gt;\n        group_by(pair) |&gt;\n        mutate(mean_cor = mean(cor, na.rm = TRUE)) |&gt;\n        ungroup() |&gt;\n        distinct(pair, .keep_all = TRUE) |&gt;\n        mutate(\n            type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n        ) |&gt;\n        dplyr::select(zrho = mean_cor, Ks, Ka, type) |&gt;\n        dplyr::filter(!zrho %in% c(Inf, -Inf)) |&gt;\n        dplyr::filter(!is.na(zrho))\n\n    return(mrho)\n})\nnames(mean_rho_all) &lt;- str_to_title(names(mean_rho_all))\n\n# Fit models\nsp &lt;- names(mean_rho_all)\ndmodes &lt;- c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")\nmodel_comp &lt;- lapply(sp, function(x) {\n    \n    df &lt;- mean_rho_all[[x]] |&gt;\n        mutate(logks = log(Ks))\n    \n    \n    comp &lt;- Reduce(rbind, lapply(dmodes, function(y) {\n        \n        m1 &lt;- lm(zrho ~ Ks, data = df |&gt; dplyr::filter(type == y))\n        m2 &lt;- lm(zrho ~ logks, data = df |&gt; dplyr::filter(type == y))\n        \n        bic &lt;- BIC(m1, m2)\n        aic &lt;- AIC(m1, m2)\n        \n        result &lt;- data.frame(\n            BIC1 = bic$BIC[1],\n            BIC2 = bic$BIC[2],\n            AIC1 = aic$AIC[1],\n            AIC2 = aic$AIC[2],\n            Rsq1 = summary(m1)$r.squared,\n            Rsq2 = summary(m2)$r.squared,\n            species = x, \n            type = y\n        ) |&gt;\n            mutate(\n                best_BIC = ifelse(BIC1 &lt; BIC2, \"m1\", \"m2\"),\n                best_AIC = ifelse(AIC1 &lt; AIC2, \"m1\", \"m2\")\n            )\n        \n        return(result)\n    }))\n}) |&gt; bind_rows()\n\nModel selection metrics indicate that a log-log regression outperforms a simple linear regression, indicating that the two variables (\\(K_s\\) and correlations) are exponentially associated. Let’s visualize such relationships.\n\n# Define helper function to plot scatterplot of cor ~ Ks\nplot_cor_rates &lt;- function(df, x = \"Ks\", y = \"zrho\", by = \"type\") {\n    \n    pal &lt;- palette.colors(6)\n    pal[5] &lt;- \"#e4d93f\"\n    p &lt;- ggplot(df, aes(x = .data[[x]], y = .data[[y]])) +\n        geom_point(aes(color = .data[[by]]), alpha = 0.5) +\n        scale_color_manual(values = pal) +\n        facet_wrap(vars(.data[[by]]), nrow = 1) +\n        theme_classic() +\n        coord_cartesian(ylim = c(-1, 3)) +\n        theme(\n            legend.position = \"none\",\n            panel.background = element_rect(fill = bg)\n        ) +\n        labs(\n            x = expression(log ~ K[s]),\n            y = expression(\"Spearman's\" ~ rho),\n            title = \"Expression divergence over time\"\n        )\n    \n    return(p)\n}\n\n# Create a scatterplot with cor ~ Ks - all samples from a species combined\np_rho_ks &lt;- lapply(mean_rho_all, function(x) {\n    \n    ## Create a scatterplot\n    p_combined &lt;- x |&gt; \n        mutate(logks = log(Ks)) |&gt;\n        plot_cor_rates(x = \"logks\") +\n        geom_smooth(method = \"lm\", color = \"firebrick3\") +\n        ggpubr::stat_regline_equation(\n            aes(label = ..eq.label..),\n            label.x = -3.7, label.y = 2.5, size = 3\n        ) +\n        scale_x_continuous(limits = c(-4, 1.10)) +\n        labs(title = NULL, y = expression(\"Fisher's z-transformed\" ~ rho))\n    \n    return(p_combined)\n})\n\n# Combine plots into one\np_rho_ks_final &lt;- wrap_plots(\n    p_rho_ks$Ath + labs(subtitle = \"A. thaliana\", x = NULL),\n    p_rho_ks$Gma + labs(subtitle = \"G. max\", x = NULL) +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    p_rho_ks$Pap + labs(subtitle = \"P. aphrodite\", x = NULL) +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    p_rho_ks$Zma + labs(subtitle = \"Z. mays\", x = NULL) +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    p_rho_ks$Hvu + labs(subtitle = \"H. vulgare\") +\n        theme(\n            strip.background = element_blank(),\n            strip.text = element_blank()\n        ),\n    ncol = 1\n) +\n    plot_annotation(title = \"Gene-gene correlations over time\") +\n    plot_layout(axes = \"collect\") &\n    theme(\n        plot.subtitle = element_text(face = \"italic\")\n    )\n\np_rho_ks_final\n\n\n\n\n\n\n\n\n\n\nOverall, the figure shows that expression divergence increases (i.e., paralogous pairs become more different in expression profiles) over time. A positive slope (\\(\\beta_1\\)) can be observed for retrotransposed duplicates in four out of five species (except for Z. mays), suggesting that older duplicates tend to have more similar expression profiles for this duplication mode. However, the number of retrotransposed duplicates is much smaller than the number of duplicates originating from all other mechanisms.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#expression-divergence-by-gene-family",
    "href": "chapters/04_expression_divergence_correlations.html#expression-divergence-by-gene-family",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "4.5 Expression divergence by gene family",
    "text": "4.5 Expression divergence by gene family\nHere, we will explore how duplicates in each gene family diverge, looking for families that tend to have more similar expression profiles (i.e., less divergence), and families with more divergent expression profiles. We will start by assigning families to each pair and ranking families by median correlations.\n\n# Assign families to each pair\nzrho_fams &lt;- zrho_mean |&gt;\n    inner_join(fams |&gt; dplyr::select(dup1 = gene, family)) |&gt;\n    filter(!mean_cor %in% c(Inf, -Inf))\n\n# Get Q1, Q3, median, and rank families by median\nfams_ranked &lt;- zrho_fams |&gt;\n    group_by(species, family) |&gt;\n    summarise(\n        q1 = quantile(mean_cor, 0.25, na.rm = TRUE),\n        median = quantile(mean_cor, 0.5, na.rm = TRUE),\n        q3 = quantile(mean_cor, 0.75, na.rm = TRUE)\n    ) |&gt;\n    arrange(species, -median) |&gt;\n    ungroup()\n\nNext, we will visualize distributions of correlations for each family using boxplots. We will use median correlations calculated above to sort boxes from highest to lowest correlation.\n\n# Visualize IQRs of correlations per family\np_zrho_fam &lt;- fams_ranked |&gt;\n    mutate(\n        species_family = str_c(species, family, sep = \"_\"),\n        species_family = as_factor(species_family)\n    ) |&gt;\n    ggplot(aes(x = species_family)) +\n    geom_linerange(\n        aes(ymin = q1, ymax = q3),\n        color = \"gray20\"\n    ) +\n    geom_point(aes(y = median), color = \"firebrick\", size = 0.5) +\n    facet_wrap(~species, scales = \"free_x\", nrow = 1) +\n    theme_classic() +\n    theme(\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        panel.background = element_rect(fill = bg)\n    ) +\n    labs(\n        title = \"Gene-gene correlations for each gene family\",\n        subtitle = \"Families are ranked by median values (red dots)\",\n        x = \"Ranked gene families\",\n        y = expression(\"IQR of Fisher's z-transformed\" ~ rho)\n    )\n\np_zrho_fam\n\n\n\n\n\n\n\n\n\n\nThe figure shows that expression divergence varies by gene family. Interestingly, some families contain gene pairs that are highly similar, and some other families contain gene pairs that are highly dissimilar, suggesting that there might be selection pressures acting to preserve expression similarity in some paralogs, but not in others.\nTo better understand these families with highly similar/dissimilar gene pairs, we will perform functional enrichment analyses to profile their functions.\n\n# Select top 10% of the families with highest median correlations\ntop10_high &lt;- fams_ranked |&gt;\n    group_by(species) |&gt;\n    slice_max(median, prop = 0.1) |&gt;\n    ungroup()\n\ntop10_low &lt;- fams_ranked |&gt;\n    group_by(species) |&gt;\n    slice_min(median, prop = 0.1) |&gt;\n    ungroup()\n\n# Perform overrepresentation analyses\nsp &lt;- names(go_annot)\nsea &lt;- lapply(sp, function(x) {\n    \n    ## Get top 10% families (highest and lowest correlations)\n    t10_high &lt;- top10_high |&gt;\n        filter(species == x) |&gt;\n        pull(family)\n    \n    t10_low &lt;- top10_low |&gt;\n        filter(species == x) |&gt;\n        pull(family)\n    \n    ## Get gene sets\n    genes_high &lt;- fams |&gt;\n        filter(family %in% t10_high, species == tolower(x)) |&gt;\n        pull(gene)\n    \n    genes_low &lt;- fams |&gt;\n        filter(family %in% t10_low, species == tolower(x)) |&gt;\n        pull(gene)\n    \n    ## Perform SEA\n    bg &lt;- zrho_fams |&gt;\n        filter(species == x)\n    bg &lt;- unique(bg$dup1, bg$dup2)\n    \n    df_high &lt;- HybridExpress::ora(\n        genes = genes_high,\n        annotation = as.data.frame(go_annot[[x]]),\n        background = bg\n    ) |&gt;\n        mutate(category = \"highcor\")\n    \n    df_low &lt;- HybridExpress::ora(\n        genes = genes_low,\n        annotation = as.data.frame(go_annot[[x]]),\n        background = bg\n    ) |&gt;\n        mutate(category = \"lowcor\")\n    \n    final_df &lt;- bind_rows(df_high, df_low) |&gt;\n        mutate(species = x)\n    \n    return(final_df)\n}) |&gt;\n    bind_rows()\n\nUpon manual inspection and curation of results (in object sea), we observed that families with highly similar paralogs are related to basic cellular processes, such as chromatin assembly, regulation of transcription, translation, splicing, signaling, amino acid and lipid metabolism, etc. Families with highly dissimilar paralogs were overrepresented in genes associated with more specific processes, such as defense to symbionts, leaf senescence, flower development, detoxification, auxin metabolism and transport, ABA biosynthesis, sucrose metabolism and transport, and cell wall biogenesis and remodeling.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#saving-objects",
    "href": "chapters/04_expression_divergence_correlations.html#saving-objects",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "Saving objects",
    "text": "Saving objects\nFinally, we will save important objects to reuse later.\n\n# Save objects as .rds files\n## List of data frames with gene-gene correlations for each species\nsaveRDS(\n    rho_metaspots, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"spearman_rho_metaspots.rds\")\n)\n\n## Mean Z-transformed rho estimates per species\nsaveRDS(\n    zrho_mean, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"mean_zrho_metaspots.rds\")\n)\n\n## CLD from Kruskal-Wallis + post-hoc Dunn's test\nsaveRDS(\n    comp_metaspots, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"rho_comp_metaspots.rds\")\n)\n\n# Duplicate pairs with significantly preserved gene expression\nsaveRDS(\n    preserved, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"pairs_preserved_expression.rds\")\n)\n\n# Plots\n## Simulation of gene-gene correlations for increasingly large metaspots\nsaveRDS(\n    p_simcor, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"simulation_rho_metaspots.rds\")\n)\n\n## Heatmaps of CLD for differences in gene-gene correlations\nsaveRDS(\n    p_heatmap_rho, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"rho_comp_heatmap.rds\")\n)\n\n## Distribution of mean Fisher's Z-transformed \\rho estimates \nsaveRDS(\n    p_zrho_mean, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"mean_zrho_comp.rds\")\n)\n\n## Relative frequency of pairs with preserved expression\nsaveRDS(\n    p_preserved, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"pairs_preserved_expression_relfreq.rds\")\n)\n\n## Variability of correlations for the same gene pairs across samples \nsaveRDS(\n    p_corvar, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"rho_variation_across_samples.rds\")\n)\n\n## Expression divergence over time - all samples combined\nsaveRDS(\n    p_rho_ks_final, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"expression_divergence_over_time.rds\")\n)\n\n## IQR of \\rho distros for each gene family\nsaveRDS(\n    p_zrho_fam, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"IQR_rho_per_gene_family.rds\")\n)\n\n## Enrichment results for families with highly similar and dissimilar paralogs\nsaveRDS(\n    sea, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"SEA_highly_similar_dissimilar_fams.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#session-info",
    "href": "chapters/04_expression_divergence_correlations.html#session-info",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n annotate               1.82.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n AnnotationDbi          1.66.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n base64enc              0.1-3      2015-07-28 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocParallel           1.38.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BioNERO              * 1.12.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1     2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5      2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5      2020-08-30 [1] CRAN (R 4.4.1)\n blob                   1.2.4      2023-03-17 [1] CRAN (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0      2024-05-16 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n checkmate              2.3.1      2023-12-04 [1] CRAN (R 4.4.1)\n circlize               0.4.16     2024-02-20 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n clue                   0.3-65     2023-09-23 [1] CRAN (R 4.4.1)\n cluster                2.1.6      2023-12-01 [1] CRAN (R 4.4.1)\n coda                   0.19-4.1   2024-01-31 [1] CRAN (R 4.4.1)\n codetools              0.2-20     2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n ComplexHeatmap         2.21.1     2024-09-24 [1] Github (jokergoo/ComplexHeatmap@0d273cd)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4     2024-03-30 [1] CRAN (R 4.4.1)\n DBI                    1.2.3      2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n dynamicTreeCut         1.63-1     2016-03-11 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1      2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n exdiva               * 0.99.0     2024-08-21 [1] Bioconductor\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastcluster            1.2.6      2024-01-12 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2      2022-02-02 [1] CRAN (R 4.4.1)\n foreign                0.8-87     2024-06-26 [1] CRAN (R 4.4.1)\n Formula                1.2-5      2023-02-24 [1] CRAN (R 4.4.1)\n genefilter             1.86.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GENIE3                 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n GetoptLong             1.0.5      2020-12-15 [1] CRAN (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggdendro               0.2.0      2024-02-23 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggnetwork              0.5.13     2024-02-14 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5      2024-01-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n GlobalOptions          0.1.2      2020-06-10 [1] CRAN (R 4.4.1)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n GO.db                  3.19.1     2024-07-24 [1] Bioconductor\n gridExtra              2.3        2017-09-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n Hmisc                  5.1-3      2024-05-28 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmlTable              2.4.3      2024-07-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3      2024-03-13 [1] CRAN (R 4.4.1)\n impute                 1.78.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n intergraph             2.0-4      2024-02-01 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14     2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1     2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4     2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10   2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n memoise                2.0.1      2021-11-26 [1] CRAN (R 4.4.1)\n mgcv                   1.9-1      2023-12-21 [1] CRAN (R 4.4.1)\n minet                  3.62.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n NetRep                 1.2.7      2023-08-19 [1] CRAN (R 4.4.1)\n network                1.18.2     2023-12-05 [1] CRAN (R 4.4.1)\n nlme                   3.1-165    2024-06-06 [1] CRAN (R 4.4.1)\n nnet                   7.3-19     2023-05-03 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n plyr                   1.8.9      2023-10-02 [1] CRAN (R 4.4.1)\n png                    0.1-8      2022-11-29 [1] CRAN (R 4.4.1)\n polynom                1.4-1      2022-04-11 [1] CRAN (R 4.4.1)\n preprocessCore         1.66.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.4.1)\n RhpcBLASctl            0.23-42    2023-02-11 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rpart                  4.1.23     2023-12-05 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n RSQLite                2.3.7      2024-05-27 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n shape                  1.4.6.1    2024-02-23 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0      2023-01-06 [1] CRAN (R 4.4.1)\n statnet.common         4.9.0      2023-05-24 [1] CRAN (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n survival               3.7-0      2024-06-05 [1] CRAN (R 4.4.1)\n sva                    3.52.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n viridisLite            0.4.2      2023-05-02 [1] CRAN (R 4.4.1)\n WGCNA                  1.72-5     2023-12-07 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XML                    3.99-0.17  2024-06-25 [1] CRAN (R 4.4.1)\n xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/04_expression_divergence_correlations.html#references",
    "href": "chapters/04_expression_divergence_correlations.html#references",
    "title": "4  Expression divergence between duplicate pairs",
    "section": "References",
    "text": "References\n\n\n\n\nGanko, Eric W, Blake C Meyers, and Todd J Vision. 2007. “Divergence in Expression Between Duplicated Genes in Arabidopsis.” Molecular Biology and Evolution 24 (10): 2298–2309.\n\n\nGu, Zhenglong, Dan Nicolae, Henry HS Lu, and Wen-Hsiung Li. 2002. “Rapid Divergence in Expression Between Duplicate Genes Inferred from Microarray Data.” Trends in Genetics 18 (12): 609–13.\n\n\nMakova, Kateryna D, and Wen-Hsiung Li. 2003. “Divergence in the Spatial Pattern of Gene Expression Between Human Duplicate Genes.” Genome Research 13 (7): 1638–45.\n\n\nMorabito, Samuel, Fairlie Reese, Negin Rahimzadeh, Emily Miyoshi, and Vivek Swarup. 2023. “hdWGCNA Identifies Co-Expression Networks in High-Dimensional Transcriptomics Data.” Cell Reports Methods 3 (6).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Expression divergence between duplicate pairs</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html",
    "href": "chapters/05_network-based_expression_divergence.html",
    "title": "5  Network-based expression divergence",
    "section": "",
    "text": "5.1 Inferring gene coexpression networks (GCNs)\nWe will use BioNERO to infer signed hybrid GCNs using Spearman’s \\(\\rho\\) as a correlation method. We will infer a single GCN for each species by pseudobulking and combining different slides. Let’s start with this aggregation step.\n# Define helper function to pseudobulk and combine count data\npseudobulk_and_combine &lt;- function(spe_list, domain = \"cell_type\") {\n    \n    # Create a single matrix with pseudobulk counts for all samples\n    ccounts &lt;- lapply(seq_along(spe_list), function(x) {\n        \n        ag &lt;- counts(scuttle::aggregateAcrossCells(\n            spe_list[[x]], ids = spe_list[[x]][[domain]], statistics = \"sum\"\n        ))\n        colnames(ag) &lt;- paste0(colnames(ag), \"_S\", x)\n        ag &lt;- cbind(gene = rownames(ag), as.data.frame(ag))\n        \n        return(ag)\n    })\n    ccounts &lt;- Reduce(function(x, y) merge(x, y, by = \"gene\", all.x = TRUE), ccounts)\n    ccounts &lt;- ccounts |&gt;\n        tibble::column_to_rownames(\"gene\") |&gt;\n        as.matrix()\n    ccounts[is.na(ccounts)] &lt;- 0\n    \n    # Recreate SpatialExperiment object and get log-norm counts\n    spe &lt;- SpatialExperiment::SpatialExperiment(\n        assays = list(counts = ccounts),\n        colData = data.frame(\n            row.names = colnames(ccounts),\n            domain = gsub(\"_S.*\", \"\", colnames(ccounts)),\n            slide = gsub(\".*_S\", \"S\", colnames(ccounts))\n        )\n    )\n    spe &lt;- scuttle::computeLibraryFactors(spe)\n    spe &lt;- scuttle::logNormCounts(spe)\n    \n    return(spe)\n}\n\n# Get combined pseudobulked counts for each species\nspe_all &lt;- list(\n    Ath = pseudobulk_and_combine(ath_spe, \"cell_type\"),\n    Gma = pseudobulk_and_combine(gma_spe, \"annotation\"),\n    Pap = pseudobulk_and_combine(pap_spe, \"clusters\"),\n    Zma = pseudobulk_and_combine(zma_spe, \"cell_type\"),\n    Hvu = pseudobulk_and_combine(hvu_spe, \"tissue\")\n)\nNext, we will infer the gene coexpression networks.\nWGCNA::allowWGCNAThreads(nThreads = 16)\n\n# For each species, infer a GCN for each sample based on metaspot aggregation\ngcns &lt;- lapply(spe_all, function(sp) {\n    \n    ## Infer signed hybrid GCN based on Spearman's correlations\n    mat &lt;- as.matrix(assay(sp, \"logcounts\"))\n    power &lt;- SFT_fit(mat, net_type = \"signed hybrid\", cor_method = \"spearman\")\n    gcn &lt;- exp2gcn(\n        mat, net_type = \"signed hybrid\", SFTpower = power$power,\n        cor_method = \"spearman\", return_cormat = FALSE, verbose = TRUE\n    )\n    \n    ## Extract hubs\n    hubs &lt;- get_hubs_gcn(mat, gcn)\n    \n    ## Create a list with relevant elements\n    result_list &lt;- list(\n        SFTplot = power$plot,\n        MEs = gcn$MEs,\n        genes_and_modules = gcn$genes_and_modules,\n        k = gcn$kIN,\n        hubs = hubs\n    )\n    \n    return(result_list)\n})",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html#duplicate-co-occurrence-in-coexpression-modules",
    "href": "chapters/05_network-based_expression_divergence.html#duplicate-co-occurrence-in-coexpression-modules",
    "title": "5  Network-based expression divergence",
    "section": "5.2 Duplicate co-occurrence in coexpression modules",
    "text": "5.2 Duplicate co-occurrence in coexpression modules\nNow, for each species, we will count the frequencies of genes in each module preservation class identified by exdiva.\n\n# Get module preservation classes with {exdiva}\nsp &lt;- names(gcns)\nmod_comps &lt;- lapply(sp, function(x) {\n    \n    ## Get duplicate pairs and ages for species `x`\n    dup_df &lt;- pairs_age[[tolower(x)]]\n    ## Get comparison classes\n    comps &lt;- compare_coex_modules(dup_df, gcns[[x]]$genes_and_modules)\n    \n    return(comps)\n}) |&gt;\n    purrr::set_names(sp) |&gt;\n    bind_rows(.id = \"species\")\n\nNext, we will get the proportion of diverged gene pairs (i.e., ‘diverged’ and ‘only one’ category together), and compare the observed frequency to a null distribution of frequencies obtained from 10,000 degree-preserving simulated networks (through node label permutation).\n\n# Get proportion of diverged pairs\nprop_div &lt;- mod_comps |&gt;\n    filter(module_preservation != \"both_absent\") |&gt;\n    mutate(species_peak = str_c(species, peak, sep = \"_\")) |&gt;\n    mutate(\n        module_preservation = str_replace_all(\n            module_preservation, \"one_absent\", \"diverged\"\n        )\n    ) |&gt;\n    group_by(species_peak, type) |&gt;\n    dplyr::count(module_preservation) |&gt;\n    mutate(prop_div = n / sum(n)) |&gt;\n    ungroup() |&gt;\n    filter(module_preservation == \"diverged\")\n\n# Get simulated proportions\nsp &lt;- names(gcns)\nprop_sim &lt;- lapply(sp, function(x) {\n    \n    message(\"Working on \", x)\n    \n    ## Get duplicates and ages\n    dup_df &lt;- pairs_age[[tolower(x)]] \n    \n    ## Perform node label permutation 10k times and get frequency of diverged pairs\n    sim_prop &lt;- lapply(seq_len(1e4), function(z) {\n        \n        ### Simulate modules\n        sm &lt;- gcns[[x]]$genes_and_modules\n        sm$Genes &lt;- sample(sm$Genes, replace = FALSE)\n        \n        ### Get frequency of diverged pairs in simulated modules\n        sprop &lt;- compare_coex_modules(dup_df, sm) |&gt;\n            filter(module_preservation != \"both_absent\") |&gt;\n            mutate(species = x) |&gt;\n            mutate(species_peak = str_c(species, peak, sep = \"_\")) |&gt;\n            mutate(\n                module_preservation = str_replace_all(\n                    module_preservation, \"one_absent\", \"diverged\"\n                )\n            ) |&gt;\n            group_by(species_peak, type) |&gt;\n            dplyr::count(module_preservation) |&gt;\n            mutate(prop_div = n / sum(n)) |&gt;\n            ungroup() |&gt;\n            filter(module_preservation == \"diverged\") |&gt;\n            mutate(sim = z)\n        \n        ### Combine results\n        res_list &lt;- setNames(\n            sprop$prop_div,\n            paste0(sprop$species_peak, \"_\", sprop$type)\n        )\n\n        return(res_list)\n    }) |&gt; unlist()\n    \n    return(sim_prop)\n})\nnames(prop_sim) &lt;- sp\n\n\n# Calculate P-values from null distros\ndnames &lt;- lapply(prop_sim, function(x) names(x) |&gt; unique()) |&gt; unlist()\nobserved &lt;- prop_div |&gt;\n    mutate(dnames = str_c(species_peak, type, sep = \"_\")) |&gt;\n    dplyr::select(dnames, prop_div)\n\npvals &lt;- lapply(dnames, function(x) {\n    \n    ## Get null distribution and observed value\n    nulls &lt;- prop_sim |&gt; purrr::pluck(gsub(\"_.*\", \"\", x))\n    nulls &lt;- nulls[names(nulls) == x]\n    obs &lt;- observed |&gt;\n        dplyr::filter(dnames == x) |&gt;\n        dplyr::pull(prop_div)\n    \n    # Compare observed to null and get a P-value\n    p_greater &lt;- mean(nulls &gt;= obs)\n    p_twosided &lt;- mean(abs(nulls - mean(nulls)) &gt;= abs(obs - mean(nulls)))\n    p_less &lt;- mean(nulls &lt;= obs)\n    \n    final_stats &lt;- data.frame(\n        group = x,\n        p_greater = p_greater,\n        p_less = p_less,\n        p_twosided = p_twosided\n    )\n    \n    return(final_stats)\n}) |&gt;\n    bind_rows() |&gt;\n    mutate(\n        signif = case_when(p_greater &lt;0.05 | p_less &lt;0.05 ~ \"*\", TRUE ~ \"\")\n    )\n\npvals$smallest &lt;- names(pvals[, c(2,3)])[apply(pvals[, c(2,3)], 1, which.min)]\npvals &lt;- pvals |&gt;\n    mutate(\n        slabel = case_when(\n            signif == \"*\" & smallest == \"p_less\" ~ \"-\",\n            signif == \"*\" & smallest == \"p_greater\" ~ \"+\",\n            TRUE ~ \"\"\n        )\n    )\n\nNext, we will visualize frequencies of diverged duplicates by mode for each species.\n\n# Plot frequency of diverged pairs\npdata &lt;-  prop_div |&gt;\n    mutate(group = str_c(species_peak, type, sep = \"_\")) |&gt;\n    separate_wider_delim(species_peak, delim = \"_\", names = c(\"species\", \"peak\")) |&gt;\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    ) |&gt;\n    left_join(pvals, by = \"group\") |&gt;\n    dplyr::select(species, peak, type, prop_div, slabel) |&gt;\n    mutate(\n        prop = signif(prop_div, 2),\n        lab = case_when(\n            slabel == \"\" ~ as.character(prop),\n            TRUE ~ paste0(prop, \" (\", slabel, \")\")\n        )\n    ) |&gt;\n    dplyr::select(-prop)\n\np_diverged_gcn &lt;- pdata |&gt;\n    ggplot(aes(x = prop_div, y = type, fill = type)) +\n    geom_bar(stat = \"identity\", color = \"gray20\") +\n    ggh4x::facet_nested(~species + peak, scales = \"free_x\") +\n    geom_text(aes(x = 0.1, label = lab, color = type), hjust = 0, size = 4) +\n    scale_color_manual(values = c(\"gray90\", rep(\"gray10\", 4), \"gray90\")) +\n    scale_fill_manual(values = palette.colors()) +\n    theme_classic() +\n    labs(\n        title = \"Network-based expression divergence and duplication mode\",\n        subtitle = \"(-): observed values are smaller than expected\",\n        x = \"Relative frequency of diverged pairs\", y = \"Duplication mode\"\n    ) +\n    scale_x_continuous(\n        breaks = seq(0, 1, by = 0.5), labels = c(0, 0.5, 1)\n    ) +\n    theme(legend.position = \"none\")\n\np_diverged_gcn\n\n\n\n\n\n\n\n\n\n\nThe figure shows that, for paralog pairs for which both genes are expressed, most pairs diverge in expression, as they are either in different coexpression modules or only one gene is expressed. Importantly, despite the high proportions of diverged pairs, some proportions are still lower than the expected by chance in degree-preserving simulated networks, indicating a significantly higher proportion of preserved pairs. However, there is no consistent association between duplication modes and significantly higher proportion of preservation across species.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html#distances-between-module-eigengenes",
    "href": "chapters/05_network-based_expression_divergence.html#distances-between-module-eigengenes",
    "title": "5  Network-based expression divergence",
    "section": "5.3 Distances between module eigengenes",
    "text": "5.3 Distances between module eigengenes\nSince the classification system in exdiva::compare_coex_modules() is binary (i.e., genes in a paralog pair eitheir co-occur or do not co-occur in the same module), we will also explore quantitatively how different genes in different modules are. For that, we for genes in different modules, we will calculate distances between module eigengenes.\n\n# Calculate distances between module eigengenes\nsp &lt;- names(gcns)\nme_dist &lt;- lapply(sp, function(x) {\n    \n    d &lt;- compare_coex_me(\n        mod_comps |&gt; \n            dplyr::relocate(species, .after = last_col()) |&gt;\n            dplyr::filter(species == x),\n        gcns[[x]]$MEs\n    )\n    \n    return(d)\n    \n}) |&gt;\n    bind_rows() |&gt;\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    )\n\n# Plot distances\np_medist &lt;- ggplot(me_dist, aes(x = ME_cor, y = type)) +\n    ggbeeswarm::geom_quasirandom(aes(color = type), alpha = 0.4) +\n    scale_color_manual(values = palette.colors()) +\n    ggh4x::facet_nested(~species + peak) +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg),\n        legend.position = \"none\"\n    ) +\n    scale_x_continuous(\n        limits = c(-1, 1),\n        breaks = seq(-1, 1, by = 0.5), \n        labels = c(-1, -0.5, 0, 0.5, 1)\n    ) +\n    labs(\n        x = expression(\"Spearman's\" ~ rho ~ \"between module eigengenes\"),\n        y = NULL,\n        title = \"Gene-gene similarities for pairs in different modules\",\n        subtitle = \"Similarities are measured by correlations between module eigengenes\"\n    )\n\np_medist\n\n\n\n\n\n\n\n\n\n\nThe plot shows that, of the paralog pairs for which genes are in different modules, such different modules are actually not so different, with mostly moderate correlations between module eigengenes. Besides, for some species and duplication types, there was no or very few pairs classified as ‘diverged’, but most of the diverged pairs were included in the ‘only one’ category (i.e., only one gene was in the network, also indicating divergence). For such category, the correlation between eigengenes would be non-existent, since one of the genes is not in any module.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html#node-degree-and-duplication-mode",
    "href": "chapters/05_network-based_expression_divergence.html#node-degree-and-duplication-mode",
    "title": "5  Network-based expression divergence",
    "section": "5.4 Node degree and duplication mode",
    "text": "5.4 Node degree and duplication mode\nHere, we will test whether genes originating from different duplication modes have significantly different degrees.\n\n# Get degree and duplication mode for each gene\nsp &lt;- names(gcns)\ndegree_dup &lt;- lapply(sp, function(x) {\n    \n    df &lt;- gcns[[x]]$k |&gt;\n        tibble::rownames_to_column(\"gene\") |&gt;\n        dplyr::select(gene, k = kWithin) |&gt;\n        inner_join(dup_pairs[[tolower(x)]]$gene, by = \"gene\") |&gt;\n        mutate(species = x)\n    \n    return(df)\n}) |&gt; \n    bind_rows() |&gt;\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    )\n\n# Test for significant differences\ndegree_clds &lt;- lapply(\n    split(degree_dup, degree_dup$species),\n    cld_kw_dunn,\n    var = \"type\", value = \"k\"\n) |&gt;\n    bind_rows(.id = \"species\") |&gt;\n    inner_join(\n        data.frame(\n            species = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"),\n            x = c(50, 30, 150, 400, 40)\n        )\n    ) |&gt;\n    mutate(species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))) |&gt;\n    dplyr::rename(type = Group)\n\n# Plot distributions\np_degree &lt;- ggplot(degree_dup, aes(x = k, y = type)) +\n    geom_violin(aes(fill = type), show.legend = FALSE) +\n    geom_boxplot(width = 0.1, outlier.color = \"gray60\", outlier.alpha = 0.5) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_label(\n        data = degree_clds,\n        aes(x = x, y = type, label = Letter)\n    ) +\n    facet_wrap(~species, nrow = 1, scales = \"free_x\") +\n    labs(\n        title = \"Degree distributions and gene duplication mode\",\n        subtitle = \"CLD from Kruskal-Wallis + post-hoc Dunn's test; P &lt;0.05\",\n        x = \"Intramodular degree\", y = NULL\n    ) +\n    theme_classic() +\n    theme(panel.background = element_rect(fill = bg))\n\np_degree\n\n\n\n\n\n\n\n\n\n\nThe figure shows that genes originating from some duplication modes (e.g., DNA tranposons, tandem, and segmental) tend to have overall higher degree. However, there is no universal pattern across species. For instance, there are no differences in degree by duplication mode in soybean. Likewise, genes originating from tandem duplications have higher degree in orchid flowers and barley seeds, but not in other data sets.\nNext, we will test if hubs are overrepresented in genes from any particular duplication mode.\n\n# Test for associations between hubs and genes from particular dup modes\n## Define helper function to perform ORA for duplication modes\nora_dupmode &lt;- function(genes, dup_df) {\n    \n    df &lt;- HybridExpress::ora(\n        genes = genes,\n        annotation = as.data.frame(dup_df),\n        background = dup_df$gene,\n        min_setsize = 2,\n        max_setsize = 1e8,\n        alpha = 1 # to get all P-values (and plot)\n    )\n    \n    return(df)\n}\n\n# Perform overrepresentation analysis for duplication modes\nsp &lt;- names(gcns)\nhubs_dup &lt;- lapply(sp, function(x) {\n    \n    df &lt;- ora_dupmode(\n        genes = gcns[[x]]$hubs$Gene, \n        dup_df = dup_pairs[[tolower(x)]]$genes\n    ) |&gt;\n        mutate(species = x)\n    \n    return(df)\n}) |&gt;\n    bind_rows() |&gt;\n    dplyr::select(species, type = term, genes, all, padj) |&gt;\n    mutate(\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\"))\n    )\n\n# Plot results\np_ora_hubs_dup &lt;- hubs_dup |&gt;\n    mutate(\n        logP = -log10(padj),\n        significant = ifelse(padj &lt; 0.05, TRUE, FALSE),\n        symbol = case_when(\n            padj &lt;=0.05 & padj &gt;0.01 ~ \"*\",\n            padj &lt;=0.01 & padj &gt;0.001 ~ \"**\",\n            padj &lt;=0.001 ~ \"***\",\n            TRUE ~ \"\"\n        )\n    ) |&gt;\n    ggplot(aes(x = genes, y = type)) +\n    geom_point(\n        aes(fill = type, size = logP, alpha = significant), \n        color = \"gray20\", pch = 21\n    ) +\n    scale_size(range = c(2, 7)) +\n    scale_alpha_manual(values = c(0.3, 1)) +\n    scale_fill_manual(values = palette.colors()) +\n    geom_text(aes(label = symbol), vjust = -0.3, size = 5) +\n    facet_wrap(~species, nrow = 1) +\n    scale_x_continuous(limits = c(0, 800)) +\n    theme_classic() +\n    theme(\n        panel.background = element_rect(fill = bg)\n    ) +\n    guides(fill = \"none\", alpha = \"none\") +\n    labs(\n        title = \"Duplication mode of hub genes in coexpression networks\",\n        subtitle = \"Bright dots with asterisks indicate significant overrepresentation; P &lt;0.05\",\n        x = \"Number of hub genes\", y = NULL,\n        size = expression(-Log[10] ~ italic(P))\n    )\n\np_ora_hubs_dup\n\n\n\n\n\n\n\n\n\n\nThe figure shows that hubs are enriched in genes originating from segmental duplications (in three out of five species) and transposed duplication (in one out of five species), suggesting that these duplication mechanisms tend to create genes with central roles.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html#saving-important-objects",
    "href": "chapters/05_network-based_expression_divergence.html#saving-important-objects",
    "title": "5  Network-based expression divergence",
    "section": "Saving important objects",
    "text": "Saving important objects\nLastly, we will save important objects and plots to be reused later.\n\n# R objects\n## GCNs from pseudobulk data - one per species\nsaveRDS(\n    gcns, compress = \"xz\", \n    file = here(\"products\", \"result_files\", \"gcns_pseudobulk.rds\")\n)\n\n# Plots\n## Network-based expression divergence and duplication mode (barplot)\nsaveRDS(\n    p_diverged_gcn, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"network_based_divergence.rds\")\n)\n\n## Distribution of similarities between eigengenes for diverged pairs\nsaveRDS(\n    p_medist, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"ME_similarities_diverged_pairs.rds\")\n)\n\n## Degree distribution and duplication mode\nsaveRDS(\n    p_degree, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"degree_distro_by_duplication_mode.rds\")\n)\n\n## GCN hubs and duplication mode\nsaveRDS(\n    p_ora_hubs_dup, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"GCN_hubs_by_duplication_mode.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html#session-info",
    "href": "chapters/05_network-based_expression_divergence.html#session-info",
    "title": "5  Network-based expression divergence",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n annotate               1.82.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n AnnotationDbi          1.66.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n base64enc              0.1-3      2015-07-28 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23    2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1     2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n BioNERO              * 1.12.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1     2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5      2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5      2020-08-30 [1] CRAN (R 4.4.1)\n blob                   1.2.4      2023-03-17 [1] CRAN (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0      2024-05-16 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n checkmate              2.3.1      2023-12-04 [1] CRAN (R 4.4.1)\n circlize               0.4.16     2024-02-20 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n clue                   0.3-65     2023-09-23 [1] CRAN (R 4.4.1)\n cluster                2.1.6      2023-12-01 [1] CRAN (R 4.4.1)\n coda                   0.19-4.1   2024-01-31 [1] CRAN (R 4.4.1)\n codetools              0.2-20     2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n ComplexHeatmap         2.21.1     2024-09-24 [1] Github (jokergoo/ComplexHeatmap@0d273cd)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4     2024-03-30 [1] CRAN (R 4.4.1)\n DBI                    1.2.3      2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n dynamicTreeCut         1.63-1     2016-03-11 [1] CRAN (R 4.4.1)\n edgeR                  4.2.1      2024-07-14 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n exdiva               * 0.99.0     2024-08-21 [1] Bioconductor\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastcluster            1.2.6      2024-01-12 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n foreach                1.5.2      2022-02-02 [1] CRAN (R 4.4.1)\n foreign                0.8-87     2024-06-26 [1] CRAN (R 4.4.1)\n Formula                1.2-5      2023-02-24 [1] CRAN (R 4.4.1)\n genefilter             1.86.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GENIE3                 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n GetoptLong             1.0.5      2020-12-15 [1] CRAN (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggdendro               0.2.0      2024-02-23 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggnetwork              0.5.13     2024-02-14 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5      2024-01-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n GlobalOptions          0.1.2      2020-06-10 [1] CRAN (R 4.4.1)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n GO.db                  3.19.1     2024-07-24 [1] Bioconductor\n gridExtra              2.3        2017-09-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n Hmisc                  5.1-3      2024-05-28 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmlTable              2.4.3      2024-07-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3      2024-03-13 [1] CRAN (R 4.4.1)\n impute                 1.78.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n intergraph             2.0-4      2024-02-01 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n iterators              1.0.14     2022-02-05 [1] CRAN (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1     2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n limma                  3.60.4     2024-07-17 [1] Bioconductor 3.19 (R 4.4.1)\n locfit                 1.5-9.10   2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n memoise                2.0.1      2021-11-26 [1] CRAN (R 4.4.1)\n mgcv                   1.9-1      2023-12-21 [1] CRAN (R 4.4.1)\n minet                  3.62.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n NetRep                 1.2.7      2023-08-19 [1] CRAN (R 4.4.1)\n network                1.18.2     2023-12-05 [1] CRAN (R 4.4.1)\n nlme                   3.1-165    2024-06-06 [1] CRAN (R 4.4.1)\n nnet                   7.3-19     2023-05-03 [1] CRAN (R 4.4.1)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n plyr                   1.8.9      2023-10-02 [1] CRAN (R 4.4.1)\n png                    0.1-8      2022-11-29 [1] CRAN (R 4.4.1)\n preprocessCore         1.66.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.4.1)\n RhpcBLASctl            0.23-42    2023-02-11 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rpart                  4.1.23     2023-12-05 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n RSQLite                2.3.7      2024-05-27 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n shape                  1.4.6.1    2024-02-23 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n statmod                1.5.0      2023-01-06 [1] CRAN (R 4.4.1)\n statnet.common         4.9.0      2023-05-24 [1] CRAN (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n survival               3.7-0      2024-06-05 [1] CRAN (R 4.4.1)\n sva                    3.52.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n WGCNA                  1.72-5     2023-12-07 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XML                    3.99-0.17  2024-06-25 [1] CRAN (R 4.4.1)\n xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/05_network-based_expression_divergence.html#references",
    "href": "chapters/05_network-based_expression_divergence.html#references",
    "title": "5  Network-based expression divergence",
    "section": "References",
    "text": "References",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Network-based expression divergence</span>"
    ]
  },
  {
    "objectID": "chapters/06_divergence_classes.html",
    "href": "chapters/06_divergence_classes.html",
    "title": "6  Classifying paralogs into divergence classes",
    "section": "",
    "text": "6.1 Calculating relative expression breadths\nNow, we will calculate relative expression breadths. For a gene pair p, the relative expression breadth of each gene g will be the number of spatial domains in which gene g is expressed, divided by the total number of domains in which either one of the genes in pair p is expressed.\n# Define helper function to calculate relative expression breadth\n\n#' Calculate relative expression breadth for each gene in each gene pair\n#' \n#' @param spe A SpatialExperiment object.\n#' @param pairs \n#' @param cell_type Character, name of the column with cell type information.\n#' @param min_prop Numeric, minimum proportion of non-zero spots to classify\n#' gene as detected. Default: 0.01.\n#' \n#' @return A data as in \\strong{pairs}, but with two extra variables \n#' named \\strong{reb1}, \\strong{reb2}.\n#'\ncalculate_reb &lt;- function(spe, pairs, cell_type = \"cell_type\", min_prop = 0.01) {\n    \n    # Get cell types in which each gene is detected\n    prop_detected &lt;- scuttle::aggregateAcrossCells(\n        spe, statistics = \"prop.detected\",\n        ids = spe[[cell_type]]\n    ) |&gt;\n        assay()\n    \n    detected &lt;- apply(prop_detected, 1, function(x) {\n        return(names(x[x &gt;= min_prop]))\n    })\n\n    # Calculate relative expression breadth for each gene in each pair\n    rebs &lt;- Reduce(rbind, lapply(seq_len(nrow(pairs)), function(x) {\n        \n        ct1 &lt;- detected[[pairs$dup1[x]]]\n        ct2 &lt;- detected[[pairs$dup2[x]]]\n        \n        n &lt;- length(union(ct1, ct2))\n        eb_df &lt;- data.frame(\n            reb1 = length(ct1) / n, \n            reb2 = length(ct2) / n\n        )\n        \n        return(eb_df)\n    }))\n    \n    final_pairs &lt;- cbind(pairs, rebs)\n    \n    return(final_pairs)\n}\n\n# For each gene of a duplicate pair, calculate relative expression breadth\nrebs &lt;- list(\n    Ath = lapply(spe_all$ath, calculate_reb, pairs = pairs_age$ath) |&gt; \n        bind_rows(.id = \"sample\"),\n    Gma = lapply(spe_all$gma, calculate_reb, pairs = pairs_age$gma, cell_type = \"annotation\") |&gt;\n        bind_rows(.id = \"sample\"),\n    Pap = lapply(spe_all$pap, calculate_reb, pairs = pairs_age$pap, cell_type = \"clusters\") |&gt;\n        bind_rows(.id = \"sample\"),\n    Zma = lapply(spe_all$zma, calculate_reb, pairs = pairs_age$zma, cell_type = \"cell_type\") |&gt;\n        bind_rows(.id = \"sample\"),\n    Hvu = lapply(spe_all$hvu, calculate_reb, pairs = pairs_age$hvu, cell_type = \"tissue\") |&gt;\n        bind_rows(.id = \"sample\")\n)\nrebs &lt;- bind_rows(rebs, .id = \"species\")\n\n# Get mean reb for each gene in a pair across samples\nmean_rebs &lt;- rebs |&gt;\n    mutate(pair = str_c(dup1, dup2, sep = \"_\")) |&gt;\n    group_by(pair) |&gt;\n    mutate(\n        mean_reb1 = mean(reb1, na.rm = TRUE),\n        mean_reb2 = mean(reb2, na.rm = TRUE)\n    ) |&gt;\n    ungroup() |&gt;\n    dplyr::select(-c(sample, reb1, reb2)) |&gt;\n    distinct() |&gt;\n    dplyr::select(-pair) |&gt;\n    mutate(\n        species_peak = str_c(species, peak, sep = \" - peak \"),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        type = factor(type, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\"))\n    )\nNext, we will visualize relative expression breadths for each gene pair by duplication mode using smoothed density representations of scatterplots.\n# Plot smoother density representations of scatterplots\np_mean_reb &lt;- ggplot(mean_rebs, aes(x = mean_reb1, y = mean_reb2)) +\n    stat_density_2d(\n        geom = \"raster\",\n        aes(fill = after_stat(density)),\n        contour = FALSE\n    ) +\n    scale_fill_gradient(low = \"#F7FBFF\", high = \"#08519C\") +\n    ggh4x::facet_nested(\n        cols = vars(type),\n        rows = vars(species, peak)\n    ) +\n    scale_x_continuous(\n        limits = c(0, 1), breaks = seq(0, 1, 0.5), labels = c(0, 0.5, 1), expand = c(0, 0)\n    ) +\n    scale_y_continuous(\n        limits = c(0, 1), breaks = seq(0, 1, 0.5), labels = c(0, 0.5, 1), expand = c(0, 0)\n    ) +\n    theme_classic() +\n    theme(panel.spacing = unit(0.2, \"cm\")) +\n    labs(\n        x = \"REB of gene 1\", y = \"REB of gene 2\", fill = \"Density\",\n        title = \"Relative expression breadth of paralogs\",\n        subtitle = \"Scatterplots are represented by their smoothed densities\"\n    )\n\np_mean_reb\nThe figure shows that most duplicates diverge asymmetrically. However, for some species (e.g., orchid and maize), a large fraction of segmental duplicates display redundancy at the expression level.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Classifying paralogs into divergence classes</span>"
    ]
  },
  {
    "objectID": "chapters/06_divergence_classes.html#comparing-relative-expression-breadth-by-mode",
    "href": "chapters/06_divergence_classes.html#comparing-relative-expression-breadth-by-mode",
    "title": "6  Classifying paralogs into divergence classes",
    "section": "6.2 Comparing relative expression breadth by mode",
    "text": "6.2 Comparing relative expression breadth by mode\nNext, we will classify gene pairs in three classes based on their relative expression breadths, and then compare the number of genes in each class by duplication mode. The classes and their definitions are:\n\nRedundancy: both pairs with REB &gt;0.70.\nAssymetric divergence: one gene with REB &gt;0.7, and the other gene with REB &lt;0.3.\nSymmetric divergence: both genes with REB between 0.3 and 0.7.\n\nWe will with the classification per se.\n\n# Classify pairs based on REB\nreb_classes &lt;- mean_rebs |&gt;\n    filter(\n        !is.nan(mean_reb1), \n        !is.na(mean_reb1), \n        !is.nan(mean_reb2), \n        !is.na(mean_reb2) \n    ) |&gt;\n    mutate(\n        class = case_when(\n            mean_reb1 &gt;0.7 & mean_reb2 &gt;0.7 ~ \"Redundancy\",\n            mean_reb1 &gt;0.7 & mean_reb2 &lt;0.3 ~ \"Asymmetric\",\n            mean_reb2 &gt;0.7 & mean_reb1 &lt;0.3 ~ \"Asymmetric\",\n            mean_reb1 &gt;0.3 & mean_reb1 &lt;0.7 &\n                mean_reb2 &gt; 0.3 & mean_reb2 &lt;0.7 ~ \"Symmetric\",\n            TRUE ~ \"Undefined\"\n        )\n    ) |&gt;\n    filter(class != \"Undefined\") |&gt;\n    as.data.frame()\n\nThen, we will test for significant associations between each class and duplication modes.\n\n# Test for overrepresentation of REB classes in duplicates from each dup mode\nreb_classes_split &lt;- split(reb_classes, reb_classes$species_peak)\nora_dupmode_class &lt;- lapply(reb_classes_split, function(x) {\n    \n    # Get list of all duplicate pairs\n    dups &lt;- x |&gt;\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |&gt;\n        select(pair, type)\n    \n    # Get a list of genes for each class\n    classes_list &lt;- x |&gt;\n        mutate(pair = str_c(dup1, dup2, sep = \"_\")) |&gt;\n        select(pair, class)\n    classes_list &lt;- split(classes_list, classes_list$class)\n    \n    # Perform ORA\n    ora_dfs &lt;- lapply(classes_list, function(y) {\n        \n        df &lt;- HybridExpress::ora(\n            genes = unique(y$pair),\n            annotation = dups,\n            background = dups$pair,\n            min_setsize = 2,\n            max_setsize = 1e8,\n            alpha = 1\n        )\n        \n        return(df)\n    }) |&gt;\n        bind_rows(.id = \"class\")\n    \n    return(ora_dfs)\n}) |&gt;\n    bind_rows(.id = \"species_peak\")\n\nNext, we will plot the frequencies of duplicates in each class by mode.\n\n# Plot frequency of duplicates (by mode) in each class\np_reb_classes &lt;- ora_dupmode_class |&gt;\n    mutate(\n        genes = log10(genes + 1),\n        symbol = case_when(\n            padj &gt; 0.05 ~ \"\",\n            padj &gt; 0.01 ~ \"*\",\n            padj &gt; 0.001 ~ \"**\",\n            !is.na(padj) ~ \"***\",\n            TRUE ~ NA_character_\n        ),\n        peak = str_replace_all(species_peak, \".* - peak \", \"\"),\n        species = str_replace_all(species_peak, \" - .*\", \"\"),\n        species = factor(species, levels = c(\"Ath\", \"Gma\", \"Pap\", \"Zma\", \"Hvu\")),\n        term = factor(term, levels = c(\"SD\", \"TD\", \"PD\", \"rTRD\", \"dTRD\", \"DD\")),\n        class = factor(class, levels = c(\"Redundancy\", \"Symmetric\", \"Asymmetric\"))\n    ) |&gt;\n    ggplot(aes(x = term, y = class)) +\n    geom_tile(aes(fill = genes)) +\n    scale_fill_gradient(low = \"#E5F5E0\", high = \"#006D2C\") +\n    geom_text(aes(label = symbol)) +\n    ggh4x::facet_nested(\n        cols = vars(species, peak)\n    ) +\n    theme_classic() +\n    labs(\n        title = \"Expression divergence pattern and duplication mode\",\n        subtitle = \"Asterisks indicate significant overrepresentation; P &lt;0.05\",\n        x = \"Duplication mode\", y = \"Divergence class\",\n        fill = expression(Log[10] ~ N)\n    ) +\n    theme(\n        legend.position = \"bottom\",\n        axis.text.x = element_text(angle = 90, hjust = 1)\n    )\n\np_reb_classes\n\n\n\n\n\n\n\n\n\n\nThe figure shows that most pairs derived from small-scale duplications (TD, PD, TRD, and DD) are overrepresented in pairs with asymmetric divergence. Segmental duplicates (and sometimes transposed duplicates) are mostly overrepresented in pairs that display redundancy and symmetric divergence.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Classifying paralogs into divergence classes</span>"
    ]
  },
  {
    "objectID": "chapters/06_divergence_classes.html#saving-objects",
    "href": "chapters/06_divergence_classes.html#saving-objects",
    "title": "6  Classifying paralogs into divergence classes",
    "section": "Saving objects",
    "text": "Saving objects\nFinally, we will save important objects to reuse later.\n\n# Objects\n## Relative expression breadths\nsaveRDS(\n    rebs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"relative_expression_breadth.rds\")\n)\n\n# Plots\n## Smoothed densities of relative expression breadths\nsaveRDS(\n    p_mean_reb, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"smoothed_densities_relative_expression_breadth.rds\")\n)\n\n## ORA - duplication mode and divergence classes\nsaveRDS(\n    p_reb_classes, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"ORA_dupmode_and_divergence_class.rds\")\n)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Classifying paralogs into divergence classes</span>"
    ]
  },
  {
    "objectID": "chapters/06_divergence_classes.html#session-info",
    "href": "chapters/06_divergence_classes.html#session-info",
    "title": "6  Classifying paralogs into divergence classes",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-04-23\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.4.1)\n backports              1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n broom                  1.0.6      2024-05-17 [1] CRAN (R 4.4.1)\n car                    3.1-2      2023-03-30 [1] CRAN (R 4.4.1)\n carData                3.0-5      2022-01-06 [1] CRAN (R 4.4.1)\n cli                    3.6.3      2024-06-21 [1] CRAN (R 4.4.1)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.4.1)\n crayon                 1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1     2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36     2024-06-23 [1] CRAN (R 4.4.1)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.4.1)\n evaluate               0.24.0     2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2      2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats              * 1.0.0      2023-01-29 [1] CRAN (R 4.4.1)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1     2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12     2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1     2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.4.1)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1      2024-04-23 [1] CRAN (R 4.4.1)\n ggpubr                 0.6.0      2023-02-10 [1] CRAN (R 4.4.1)\n ggsignif               0.6.4.9000 2024-12-12 [1] Github (const-ae/ggsignif@705495f)\n glue                   1.7.0      2024-01-09 [1] CRAN (R 4.4.1)\n gtable                 0.3.5      2024-04-22 [1] CRAN (R 4.4.1)\n here                 * 1.0.1      2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3      2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.4.1)\n knitr                  1.48       2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6     2024-03-20 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3      2023-09-27 [1] CRAN (R 4.4.1)\n magick                 2.8.4      2024-07-14 [1] CRAN (R 4.4.1)\n magrittr               2.0.3      2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61     2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0      2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0      2024-04-11 [1] CRAN (R 4.4.1)\n munsell                0.5.1      2024-04-01 [1] CRAN (R 4.4.1)\n patchwork              1.2.0      2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2      2023-08-10 [1] CRAN (R 4.4.1)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13     2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5      2024-01-10 [1] CRAN (R 4.4.1)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4      2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27       2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4      2023-11-05 [1] CRAN (R 4.4.1)\n rstatix                0.7.2      2023-02-01 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0     2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1      2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1     2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.4.1)\n SingleCellExperiment * 1.26.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n SparseArray            1.4.8      2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n SpatialExperiment    * 1.14.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n stringi                1.8.4      2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1      2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1      2023-03-20 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1      2024-03-11 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0      2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0      2024-01-18 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0      2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0      2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.4.1)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.4.1)\n withr                  3.0.0      2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.51       2025-02-19 [1] CRAN (R 4.4.1)\n XVector                0.44.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9      2024-07-05 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0     2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Classifying paralogs into divergence classes</span>"
    ]
  },
  {
    "objectID": "chapters/06_divergence_classes.html#references",
    "href": "chapters/06_divergence_classes.html#references",
    "title": "6  Classifying paralogs into divergence classes",
    "section": "References",
    "text": "References\n\n\n\n\nCasneuf, Tineke, Stefanie De Bodt, Jeroen Raes, Steven Maere, and Yves Van de Peer. 2006. “Nonrandom Divergence of Gene Expression Following Gene and Genome Duplications in the Flowering Plant Arabidopsis Thaliana.” Genome Biology 7: 1–11.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Classifying paralogs into divergence classes</span>"
    ]
  }
]